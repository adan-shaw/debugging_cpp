Redis 产品简介:
	redis-server: Redis 后端服务器
	redis-client: Redis 前端引擎-命令控制前端
	hiredis :     Redis 前端引擎-SDK 库
	(hiredis 是一个redis-server 的前端引擎SDK 库, 支持多款语言, 这里主要谈论c/c++ 的hiredis ;)



# 安装hiredis 
apt-get install redis libhiredis-dev

# 安装redis-client
apt-get install redis redis-tools

# 安装redis-server
apt-get install redis redis-server

# 安装Redis 套装
apt-get install redis 





Redis 是一种高性能的键值对存储系统, 具有以下优势: 
	1.速度快: 
		Redis 使用内存存储数据, 不需要等待磁盘的IO, 在内存之间进行的数据存储和查询, 速度非常快; 
		当然, 缓存的数据总量不能太大, 因为受到物理内存空间大小的限制; 
		同时, Redis 是单线程数据库, 避免了线程切换和锁机制的性能消耗(最终单纯考研PC 机器的内存性能, 内存响应速度);

	2.丰富的数据类型: 
		Redis 支持多种数据类型, 如string字符串、hash哈希、list列表、set集合和sortedset有序集合等;
		方便进程间的数据交换, 无论是单机内的进程的数据交换, 还是局域网内的进程的数据交换, 丰富的'数据交换容器'选择;

	3.事务处理/原子性操作/支持lua脚本:
			Redis 支持Lua脚本, 可以在Redis 服务器端执行一段脚本; 
			Redis 支持事务处理(Redis 事务功能是通过lua 脚本实现的);
			Redis 支持多条命令组成的原子操作, 这意味着在执行多个命令时, 如果发生任何错误, 整个操作都会失败(Redis 原子操作是通过事务处理实现的);
			[支持阶级: 支持lua 脚本-> 支持事务处理-> 支持原子操作]

	4.持久性: 
		Redis 支持两种持久性机制, 一种是RDB, 另一种是AOF, 将内存中的数据写入外部的物理存储设备; 

	5.支持主从复制:
		支持主-从(Master-Slave)复制与高可用(Redis Sentinel)集群(3.0版本以上)

	6.发布/订阅:
		Redis 支持发布/订阅功能, 可以用于实现消息队列和实时推送等应用, 也就是支持简易的MQ 功能(轻度使用, 要求不高可以试试);

	7.支持分布式锁:
		在分布式系统中, 如果不同的节点需要访同到一个资源, 往往需要通过互斥机制来防止彼此干扰, 并且保证数据的一致性; 
		在这种情况下, 需要使用到分布式锁, 而Redis 是支持分布式锁的(正好锤实了Redis 为进程间通信的最佳选择方案, 跨系统进程间通信也是u最佳选择)

	8.分布式:
		Redis 支持分布式模式, 可以多个Redis 实例组成一个集群, 实现数据的垂直和水平切分; 

	9.hiredis 前端引擎SDK 库, 支持多种编程语言;

小总结:
	Redis 最终变成一个高性能, 好用的进程间数据交换器, 比c++ 里面的stl 要功能强大, 好用;
	也比信号量, 共享内存等IPC 进程通信方式, 要功能强大, 好用;





缺点:
	Redis 基于socket 进行通信, 有一定io 网络损耗, 性能上肯定不能跟'原生的stl/进程间IPC'相比,
	但一般都不影响业务!! 业务能容忍的范围内, redis 是很好用的

	这也是为什么, 有Map了, 为什么还要有Redis?
	redis 是进程间通信最佳选择:
		* redis 支持分布式锁, 跨PC 进程间同步;
		* redis 支持跨编程语言之间通信(不只是跨进程这么简单, lua/php/python/c++/java 之间都可以依赖redis 进行数据交换, 非常友好)

	所以, redis 的缺点仅仅是: 比'原生的stl/进程间IPC'的性能稍微低一点而已, 其他没有什么大毛病;
	当然redis 的MQ 功能, 也是一般的, 轻度使用问题不大(不建议深度使用);





应用场景1:
	php 机之间共享资源, 可以使用redis;
	一台服务器下, 可能不止一台php 机器的, 当出现多个php 机, 需要共享数据的时候, redis 是最佳选择;

应用场景2:
	多进程程序, 直接使用redis 共享数据, 还可以解决多进程在数据访问同步的困难(信号灯太难搞了);
	所以多进程程序之间需要通信, 使用redis 也很舒服;

应用场景3:
	不同虚拟机, lua / python / php / java 之间共享数据;
	由于是不同虚拟机, 没办法共享数据, 自己写c 对接接口太麻烦, 直接使用redis 是最佳选择;

如果不是进程之间的通信, 尽量不要用redis(线程之间通信直接用锁)!!
需要超高性能的进程之间的通信, 也尽量不要用redis, redis 使用socket 进行数据收发, 有一定损耗;





