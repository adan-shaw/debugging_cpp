什么是serialization序列化? 应该怎样用序列化?
	外面的人的意思是: 根据分割符号实现的序列化;

	但其实都是废话, 傻逼才会用的(自己实现没必要), 
	因为你无论怎么样约定序列化, 都有缺陷字符串不能用的;

	序列化都有关键词约束的(就是有些关键词不能用), 你只要明白:
		设计是否违反大小字节序列的问题, 影响准确复原,
		如果能正确复原数据, 根本不需要复杂的序列化手段, 呵呵;
		所以, 区分数字/字符/二进制数据的区别即可;

	所谓的序列化和反序列化, 实际上都是一种数据格式的约定;
	而且序列化有大量的现成项目, 如果没有特殊用途, 根本不需要自己实现序列化;

	json/xml 有大量的成功案例, 
	json 常用于传输应用数据, xml 通常用来实现可视化界面, 这已经是行业规定了, 
	虽然一定程度上, json, xml 都算是笨重的, 你可以设计更简便的序列化方案, 但根本没必要;

	如果想节约资源, 也行, 做一个对照表, 然后数据节命名, 都用a,b,c,d 等单个字符串命名, 
	收到数据之后, 再通过对照表复原数据即可, 
	还能压缩空格, 换行, 进一步压缩字符串, 
	但这些都是小招数, 实际上只是浪费时间在折腾而已, 没必要自己重写序列化的实现, 这是一个无耻的洗脑行为;



通信行业基本上, 都是: 
	应用, 协议, 数据, 序列化, 信号 -> 信号, 反序列化, 数据, 协议, 应用
	说白了就是将应用数据压缩成一维数组, 逐位发送出去(物理层是逐位发送的, 如果不懂, 看看数模转换)
	最终都是:
		应用数据 -> 压缩成一维数组(序列化) -> 逐位发送(数模转换) -> 逐位接收(数模转换) -> 反序列化(还原应用数据) -> 应用数据 -> 执行操作;

	所以, 专心做拓展技术的事情, 集中精力解决新技术的问题, 不要被人带节奏, 在泥潭里面打爬, 简直开玩笑, 无耻的洗脑行为;





应对二维矩阵, 三维立体, 四维=时间+三维的未来趋势, 如何传输这些数据?
	传统的json 处理应用数据, 的确很适合, 
	但面对目前市场需求, 2/3/4 维度的数据存储需求, 会对新的序列化方案, 提出新的需求;
	使用json + 2/3/4维度的数字简单序列化, 可以提高应用的解析效率, 提高网络程序的性能, 甚至是可靠性;

	json 记录:
		LWH+T = 4维数据记录, 每一个都是int, 声明: 图片的长宽, 立体空间的长宽高, 四维空间的长宽高+时间;

	但实际上, 跟连续内存数组的原理差不多, 
	你实际上可以直接将 2/3/4 维度的数据, 直接排列成一维数组, 只要使用',' 号分割符即可;
	(确保是宏定义分割符即可, 不满意还能换, 轻松)
