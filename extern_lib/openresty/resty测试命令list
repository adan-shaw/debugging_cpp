cd /home/tarball/openresty



# 内嵌luajit 执行一句lua 语句
./bin/resty -e 'print("love you")'

# 指定lua 库路径, 执行lua 命令
./bin/resty -I lua_home/adan_lua -e 'print("love")'



# 内嵌luajit 执行一句lua file(通常都会找不到关联文件, 用得比较少)
./bin/resty ./lua_home/hello_world2.lua

# 指定lua 库路径, 执行lua 文件
./bin/resty -I ./lua_home/adan_lua ./lua_home/adan_lua/clock.lua




# 阻塞内嵌luajit for 1 second
./bin/resty -e 'ngx.sleep(1); ngx.say("done")'

# 让我们使用 cosocket API 连接到 openresty.com 的 443 端口
./bin/resty -e 'local sock = ngx.socket.tcp() print(sock:connect("openresty.com", 443))'

# 使用openresty 轻线程
./bin/resty -e 'ngx.thread.wait(ngx.thread.spawn(function () print("in thread!") end))'




# 检查内嵌luajit 的编译参数
./bin/resty -V

# 关闭LuaJIT 编译器
./bin/resty -j off

# 使用LuaJIT的'jit.dump模块', 用于输出JIT编译器生成的跟踪的'详细信息';
./bin/resty -j dump

# 使用LuaJIT的'jit.v模块', 用于输出JIT编译器生成的跟踪的'简要信息';
./bin/resty -j v





# resty 手动修改nginx 报错等级(debug, info, notice, warn, error, crit, alert, or emerg)
./bin/resty --errlog-level info

# resty 手动修改nginx 最大链接计数(Set maximal connection count)
./bin/resty -c 1024





# 手动插入http{} nginx.conf 配置块, --http-conf http{} (略)
# 手动插入main{} nginx.conf 配置块, --main-conf main{} (略)
# 手动插入http{} nginx.conf 配置块的file, --http-include ./http.conf (略)
# 手动插入http{} nginx.conf 配置块的file, --http-include ./main.conf (略)





#
# resty 命令list
#
-c NUM               Set maximal connection count (default: 64);
-e PROG              Run the inlined Lua code in "prog";
--errlog-level LEVEL Set nginx error_log level. Can be debug, info, notice, warn, error, crit, alert, or emerg;
--gdb                Use GDB to run the underlying nginx C process;
--gdb-opts OPTS      Pass extra command-line options to GDB;
--help               Print this help;
--http-conf CONF     Specifies nginx.conf snippet inserted into the http {} configuration block (multiple instances are supported);
--http-include PATH  Include the specified file in the nginx http configuration block (multiple instances are supported);
-I DIR               Add dir to the search paths for Lua libraries;
-j dump              Use LuaJIT's jit.dump module to output detailed info of the traces generated by the JIT compiler;
-j off               Turn off the LuaJIT JIT compiler;
-j v                 Use LuaJIT's jit.v module to output brief info of the traces generated by the JIT compiler;
-l LIB               Require library "lib";
--main-conf CONF     Specifies nginx.conf snippet inserted into the nginx main {} configuration block (multiple instances are supported);
--main-include PATH  Include the specified file in the nginx main configuration block (multiple instances are supported);
--nginx              Specify the nginx path (this option might be removed in the future);
--no-stream          Disable the stream {} configuration in auto-generated nginx.conf;
--ns IP              Specify a custom name server (multiple instances are supported);
--resolve-ipv6       Make the nginx resolver lookup both IPv4 and IPv6 addresses;
--rr                 Use Mozilla rr to record the execution of the underlying nginx C process;
--shdict 'NAME SIZE' Create the specified lua shared dicts in the http configuration block (multiple instances are supported);
--stap               Use sysetmtap to run the underlying nginx C process;
--stap-opts OPTS     Pass extra systemtap command line options;
--user-runner CMD    Use CMD as user runner for the underlying nginx process;
-V                   Print version numbers and nginx configurations;
--valgrind           Use valgrind to run nginx;
--valgrind-opts OPTS Pass extra options to valgrind;

