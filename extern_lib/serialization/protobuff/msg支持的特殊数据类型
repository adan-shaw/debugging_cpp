#
# 1.数组类型
#
在protobuf消息中定义数组类型, 是通过在字段前面增加'repeated关键词'实现, 标记当前字段是一个数组; 

1.整数数组的例子: 
message Msg {
	//只要使用repeated标记类型定义, 就表示数组类型; 
	repeated int32 arrays = 1;
}

2.字符串数组
message Msg {
	repeated string names = 1;
}





#
# 2.枚举类型
#
当需要定义一个消息类型的时候, 可能想为一个字段指定"预定义值序列"中的一个值, 这时候可以通过枚举实现; 例子: 

//指定版本信息, 不指定会报错
syntax = "proto3";

//枚举消息类型, 使用enum关键词定义,一个电话类型的枚举类型
enum PhoneType {
	MOBILE = 0;//proto3版本中, 首成员必须为0, 成员不应有相同的值
	HOME = 1;
	WORK = 2;
}

//定义一个电话消息
message PhoneNumber{
	string number = 1;//电话号码字段
	PhoneType type = 2;//电话类型字段, 电话类型使用PhoneType枚举类型
}





#
# 3.消息内嵌(message 内嵌, 跟struct 结构体内嵌类似)
#
我们在各种语言开发中类的定义是可以互相嵌套的, 也可以使用其他类作为自己的成员属性类型; 
在protobuf中同样支持消息嵌套, 可以在一个消息中嵌套另外一个消息, 字段类型可以是另外一个消息类型; 

1.引用其他消息类型的用法
//定义Result消息
message Result {
	string url = 1;
	string title = 2;
	repeated string snippets = 3;//字符串数组类型
}

//定义SearchResponse消息
message SearchResponse {
	//引用上面定义的Result消息类型, 作为results字段的类型
	repeated Result results = 1;//repeated关键词标记, 说明results字段是一个数组
}


2.消息嵌套(类似类嵌套一样, 消息也可以嵌套)
message SearchResponse {
	//嵌套消息定义
	message Result {
		string url = 1;
		string title = 2;
		repeated string snippets = 3;
	}
	//引用嵌套的消息定义
	repeated Result results = 1;
}


3.import导入其他proto文件定义的消息
我们在开发一个项目的时候通常有很多消息定义, 都写在一个proto文件, 不方便维护, 
通常会将消息定义写在不同的proto文件中, 在需要的时候可以通过import导入其他proto文件定义的消息; 
例子:

保存文件: result.proto
	syntax = "proto3";
	//Result消息定义
	message Result {
		string url = 1;
		string title = 2;
		repeated string snippets = 3;//字符串数组类型
	}

保存文件: search_response.proto
	syntax = "proto3";
	import "result.proto";//导入Result消息定义

	//定义SearchResponse消息
	message SearchResponse {
		//使用导入的Result消息
		repeated Result results = 1; 
	}





#
# 4.map 类型
#
protocol buffers支持map类型定义; 

1.map语法
	map<key_type, value_type> map_field = N;
	key_type:
		可以是任何整数或字符串类型(除浮点类型和字节之外的任何标量类型); 
		请注意, 枚举不是有效的key_type; 
	value_type:
		可以是除另一个映射之外的任何类型; 

2.map的例子
syntax = "proto3";
message Product{
	string name = 1;//商品名

	//定义一个k/v类型, key是string类型, value也是string类型
	map<string, string> attrs = 2;//商品属性, 键值对
}

Map 字段不能使用repeated关键字修饰, 成为了map 之后, 不能定义一个map数组, 如:
{
	repeated map<string, string> attrs = 2;//错误定义!!
}



