protobuff 的*.proto message 定义文件, 可以使用protoc 命令进行编译(protoc.exe), 详情如下:

	protoc 常用的OPTION选项:
		--cpp_out=OUT_DIR           指定代码生成目录, 生成C++ 代码
		--csharp_out=OUT_DIR        指定代码生成目录, 生成C# 代码
		--java_out=OUT_DIR          指定代码生成目录, 生成java 代码
		--js_out=OUT_DIR            指定代码生成目录, 生成javascript 代码
		--objc_out=OUT_DIR          指定代码生成目录, 生成Objective C 代码
		--php_out=OUT_DIR           指定代码生成目录, 生成php 代码
		--python_out=OUT_DIR        指定代码生成目录, 生成python 代码
		--ruby_out=OUT_DIR          指定代码生成目录, 生成ruby 代码

		-I=PROTO_SRC_DIR            指定*.proto 文件所在的目录, 用来搜索更多*.proto

		默认参数                     指定本次protoc 所需的唯一xxx.proto 文件, 用作编译;



	go 语言默认是需要打补丁, 才能使用protoc 的:
		go get -u github.com/golang/protobuf/protoc-gen-go

	注意: 
		安装go语言插件后, 需要将$GOPATH/bin 路径加入到PATH环境变量中;

	编译成go语言版本:
		protoc --go_out=. ./helloworld.proto





#
# protoc 工具的原型
#
声明:
	protoc = protoc-c = protoc-gen-c, 实际上都是一个工具!!
	cd /usr/bin
	ln -s ./protoc ./protoc-gen-c
	ln -s ./protoc-c ./protoc-gen-c





#
# *.proto 编译demo
#

#!/bin/sh

#
# protobuf 编译语法
#

# $SRC_DIR:  .proto 所在的源目录
# --cpp_out: 生成c++ 代码
# $DST_DIR:  生成代码的目标目录
# xxx.proto: 要针对哪个proto 文件生成接口代码

# format:
#protoc -I=$SRC_DIR --cpp_out=$DST_DIR $SRC_DIR/xxx.proto



# demo
#protoc -I=. --cpp_out=. ./test.proto

# better
SRC_DIR="."
DST_DIR="."
protoc -I=$SRC_DIR --cpp_out=$DST_DIR $SRC_DIR/test.proto



#
# 编译测试文件
#
g++ -std=c++11 ./test.pb.cc ./main.cpp -o x -lprotobuf





#
# 原版命令(protoc --help)
#
Usage: protoc [OPTION] PROTO_FILES
Parse PROTO_FILES and generate output based on the options given:
  -IPATH, --proto_path=PATH   Specify the directory in which to search for
                              imports.  May be specified multiple times;
                              directories will be searched in order.  If not
                              given, the current working directory is used.
  --version                   Show version info and exit.
  -h, --help                  Show this text and exit.
  --encode=MESSAGE_TYPE       Read a text-format message of the given type
                              from standard input and write it in binary
                              to standard output.  The message type must
                              be defined in PROTO_FILES or their imports.
  --decode=MESSAGE_TYPE       Read a binary message of the given type from
                              standard input and write it in text format
                              to standard output.  The message type must
                              be defined in PROTO_FILES or their imports.
  --decode_raw                Read an arbitrary protocol message from
                              standard input and write the raw tag/value
                              pairs in text format to standard output.  No
                              PROTO_FILES should be given when using this
                              flag.
  --descriptor_set_in=FILES   Specifies a delimited list of FILES
                              each containing a FileDescriptorSet (a
                              protocol buffer defined in descriptor.proto).
                              The FileDescriptor for each of the PROTO_FILES
                              provided will be loaded from these
                              FileDescriptorSets. If a FileDescriptor
                              appears multiple times, the first occurrence
                              will be used.
  -oFILE,                     Writes a FileDescriptorSet (a protocol buffer,
    --descriptor_set_out=FILE defined in descriptor.proto) containing all of
                              the input files to FILE.
  --include_imports           When using --descriptor_set_out, also include
                              all dependencies of the input files in the
                              set, so that the set is self-contained.
  --include_source_info       When using --descriptor_set_out, do not strip
                              SourceCodeInfo from the FileDescriptorProto.
                              This results in vastly larger descriptors that
                              include information about the original
                              location of each decl in the source file as
                              well as surrounding comments.
  --dependency_out=FILE       Write a dependency output file in the format
                              expected by make. This writes the transitive
                              set of input file paths to FILE
  --error_format=FORMAT       Set the format in which to print errors.
                              FORMAT may be 'gcc' (the default) or 'msvs'
                              (Microsoft Visual Studio format).
  --print_free_field_numbers  Print the free field numbers of the messages
                              defined in the given proto files. Groups share
                              the same field number space with the parent 
                              message. Extension ranges are counted as 
                              occupied fields numbers.

  --plugin=EXECUTABLE         Specifies a plugin executable to use.
                              Normally, protoc searches the PATH for
                              plugins, but you may specify additional
                              executables not in the path using this flag.
                              Additionally, EXECUTABLE may be of the form
                              NAME=PATH, in which case the given plugin name
                              is mapped to the given executable even if
                              the executable's own name differs.
  --cpp_out=OUT_DIR           Generate C++ header and source.
  --csharp_out=OUT_DIR        Generate C# source file.
  --java_out=OUT_DIR          Generate Java source file.
  --js_out=OUT_DIR            Generate JavaScript source.
  --objc_out=OUT_DIR          Generate Objective C header and source.
  --php_out=OUT_DIR           Generate PHP source file.
  --python_out=OUT_DIR        Generate Python source file.
  --ruby_out=OUT_DIR          Generate Ruby source file.
  @<filename>                 Read options and filenames from file. If a
                              relative file path is specified, the file
                              will be searched in the working directory.
                              The --proto_path option will not affect how
                              this argument file is searched. Content of
                              the file will be expanded in the position of
                              @<filename> as in the argument list. Note
                              that shell expansion is not applied to the
                              content of the file (i.e., you cannot use
                              quotes, wildcards, escapes, commands, etc.).
                              Each line corresponds to a single argument,
                              even if it contains spaces.
