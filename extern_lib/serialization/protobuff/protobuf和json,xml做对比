前言:
	protobuff 和json, xml, ini 等序列化方式不一样, 
	protobuff 并非字符串手段去实现序列化的, 而是纯二进制的手段实现序列化的, 这是本质区别, 也是一种创新;
	再有, protobuff 支持反射, 也是json, xml, ini 等传统字符串型序列化工具不能比拟的优势;

	当然再好的东西也有缺点, protobuff 的技术复杂度较大, 维护成本高, 
	小型互联网公司根本没有这个必要使用protobuff, json/xml/ini 等传统序列化手段, 已经足够了;
	但是, 对于大型互联网公司, 还有工业应用场景, 对性能和效率有比较极致追求, 不计较维护成本的项目, protobuff 是一个不错的选择;
	(高技术含量的工具, 也要看使用的人, 是否高技术才行的, 能否驾驭才是真正的问题)





1.protobuff的性能超越JSON主要是因为以下几个方面: 
	* 序列化和反序列化速度更快: 
			protobuff使用二进制格式进行数据交换, 而JSON使用文本格式, 因此在序列化和反序列化过程中, protobuff的速度更快; 
	* 数据体积更小: 
			由于protobuff使用二进制格式, 数据体积相比JSON更小, 因此在网络传输和存储时占用的空间更少; 
	* 生成的代码更高效: 
			通过使用protobuff的代码生成工具, 可以生成高效的数据访问代码, 提高程序的性能; 
	* 更好的数据结构支持: 
			protobuff支持更丰富的数据结构, 如枚举类型、嵌套消息等, 可以更灵活地处理复杂的数据; 

	总的来说, protobuff在性能方面超越JSON是因为其更高效的数据交换格式和更优化的代码生成机制; 
	因此, 对于对性能要求较高的应用场景, 使用protobuff会更加合适; 

	json是这些年慢慢兴起的轻量级数据交换格式; 
	比起老大哥XML, 因其更快的解析速度和更小的体积, 可谓是用过的都说好; 
	一般情况下json足够满足你的大多数需求, 但是在计算机领域, 没有最快, 只有更快;  
	当你的传输数据大到一定程度的时候, json的速度也不能满足你需求的时候, 你就需要更快的protobuff;





2.protobuff的性能和json, xml 的实际对比:
	用protobuff序列化后的大小是json的10分之一, 是xml格式的20分之一, 但是性能却是它们的5~100倍; 

	protobuff协议数据格式十分紧凑, 采用tag|leg|value 来定界一个字段, 且以这种方式紧密排列, 
	使用varint这种数据结构根据实际字节占用情况灵活分配内存进一步减小传输开销; 
	使用zigzag算法来对负数进行进一步的压缩, 最终我们可以使用2个字节来表示-1; 


	protocolbuffer(以下简称PB)是google 的一种数据交换的格式, 它独立于语言, 独立于平台;(百度百科);
	因为其使用二进制存储, 所以会比json更快; 
	但是缺点也是显而易见, 二进制存储易读性很差;  


	protobuff要解析40M json的需求, 在PC端, 使用json需要解析10秒钟; 
	但是将相同的内容通过protobuff再导出成bytes, 只要17M, 缩小了2.5倍左右, 但读取速度只要0.8秒, 还包括了数据解析后的处理;  
	0.1秒和0.008秒可能给人差别不大, 但是10秒和0.8秒的差别真的是天壤地别;  

	如果需要传输的数据量比较大时, protobuff是你的不二选择;  



