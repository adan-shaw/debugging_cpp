* nlohmann_json 源码包有一大半都是test文件, 只是做编译测试, 运行测试, 并不是nlohmann_json 库的实现文件, 很奇怪!!
	但你没必要将其删掉, 因为nlohmann_json 是一个应用数据的'离线/传输打包'库, 
	nlohmann_json 库的准确性校验, 是一个比较重的任务, nlohmann_json 需要这些库做可靠性支撑的!!



* nlohmann_json 源码包, 还有一大堆reports png 图片, 压缩一下之后, 可以极大地压缩nlohmann_json 包的大小;
	别担心nlohmann_json 的内容会很多, 装规模大而已, 实际也就那样!!
	nlohmann_json 是一个小型编码库, 可以迅速拿下的;





nlohmann_json 支持两种模式:
	* single_include 单文件模式(后续的项目编译慢), 简单测试, 可以使用这个模式;
	* 编译成.so 动态链接库模式(后续的项目编译快), 长期的大型项目编译, 可以使用这个节约编译时间;



ps:
	我的理解是错的, nlohmann_json 实际上还是一个'single_include 单文件'project, cmake 编译竟然只是为了test, 实际上不会做任何事情!!
	tarball nlohmann_json 之后, 竟然没有lib 编译出来, 没有.so/.a 文件, 一个都没有, 只是将'single_include 单文件'移动到安装路径上面, 十分滑稽!!

	因此, 直接使用'single_include 单文件'模式即可, 别浪费时间!!
	当然你可以跑一次cmake for nlohmann_json, 确保当前系统对nlohmann_json 的支持(一般都不会有问题的!!)

	跟cjson 不一样, 这样一来, nlohmann_json 的编译效率, 执行效率, 肯定只能说是一般了, 你懂的;
	c++ 语法库的多重封装, 应该是很难封装成.so 动态链接库的, 
	因为.so 动态链接库, 基本上也是要求c 语言封装的(突然相通了很多事, c/c++ 的长短板, 或者这时候会显露)

	anyway, 使用nlohmann_json, 直接使用'single_include 单文件'模式即可!!
	这个一个c++ 高度封装的库, 都是c++ 类封装, 解析靠c++ 编译器;
