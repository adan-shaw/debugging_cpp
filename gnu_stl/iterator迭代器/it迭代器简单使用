详情, 参考:
	./c++迭代器(STL迭代器)iterator详解.html
#
# 1.支持迭代器的容器
#
vector					随机访问(即数组下标访问)
deque						随机访问
list						双向访问(即双向节点访问, 最快的方法是: 在有序list 上执行二分法查找访问)
set/multiset		双向访问
map/multimap		双向访问
stack						不支持迭代器
queue						不支持迭代器
priority_queue	不支持迭代器





#
# 2.迭代器的创建
#
迭代器按照定义方式分成以下四种:
	1) 正向迭代器, 定义方法如下: 
		<容器类名>::iterator <迭代器名>;

	2) 常量正向迭代器, 定义方法如下: 
		<容器类名>::const_iterator <迭代器名>;

	3) 反向迭代器, 定义方法如下: 
		<容器类名>::reverse_iterator <迭代器名>;

	4) 常量反向迭代器, 定义方法如下: 
		<容器类名>::const_reverse_iterator <迭代器名>;

反向迭代器和正向迭代器的区别在于:
	对正向迭代器进行++操作时, 迭代器会指向容器中的后一个元素;
	对反向迭代器进行++操作时, 迭代器会指向容器中的前一个元素.





#
# 3.迭代器的访问操作(以'随机访问迭代器'为例)
#
随机访问迭代器具有双向迭代器的全部功能;
若p是一个随机访问迭代器, i是一个整型变量或常量, 则p还支持以下操作: 
	p+=i: p 迭代器往后移动 i 个元素
	p-=i: p 迭代器往前移动 i 个元素
	p+i:  返回 p 后面第 i 个元素的迭代器(迭代器p并未移动, 想要p移动, 必须改变p的值:p=p+i)
	p-i:  返回 p 前面第 i 个元素的迭代器

	p[i]: 返回 p 后面第 i 个元素的引用('随机访问迭代器'特有的功能; 裁减了这个功能, 随机访问迭代器=双向访问迭代器)
