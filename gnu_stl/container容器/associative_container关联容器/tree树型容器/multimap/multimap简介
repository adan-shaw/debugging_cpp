//multimap实现简介:
/*
	* 基于'RBTree红黑树'实现的multimap 集合功能, 是一种key-value键值对的有序关联容器, key 不是唯一, 对key 进行排序;

	* multimap 可以在构造函数中, 重写Compare 排序比较函数, 默认排序顺序是: 从小到大, less<int>升序;

	* 排序比较函数为less<int>升序, 从小到大; greater<int>降序不能用, 不知道为什么!! 可能是编译器的兼容问题, gcc 不支持在multimap 中使用greater<int>降序;

	* multimap 的搜索、移除和插入操作, 拥有对数复杂度O(log n); 

	* multimap 有key-value键值对, 允许出现重复key;

	* multimap 常见的集合操作, 很多: 去重、并集、交集等;

	* 使用emplace 替代insert 插入, 更安全, 更快捷一点(需要c++11);

	* multimap c++17 提供更多安全插入的功能(不用也没关系的, 看业务需求);

	* end()是指向最后一个元素的下一个(通常是NULL), rbegin()指向最后一个元素;

	* multimap 支持'旧式双向迭代器'(LegacyBidirectionalIterator);

	* multimap 满足容器(Container)、具分配器容器(AllocatorAwareContainer)、关联容器(AssociativeContainer)和可逆容器(ReversibleContainer)的要求;



	* multimap 跟map 其实并无太大差别, 只是multimap 兼容多个相同键值而已;



	* 与map不同的点: 'insert/emplace'插入操作的返回值不同;
			map 'insert/emplace'插入常量, 返回pair 对;
			map 借助迭代器执行'insert/emplace'插入, 则返回迭代器;
			//std::pair<iterator,bool> insert(const value_type& x);					//直接插入常量, 自动排序, 插入位置不确定, 返回pair 对;
			//iterator insert(iterator position, const value_type& x);			//根据迭代器插入, 自动排序, 插入位置确定, 返回迭代器;

			multimap 则统一返回multimap<int>::iterator 迭代器;



	* 与map不同的是: 是否支持'模仿'数组插入语法;
		map 的key 值是唯一的, 所以支持'模仿'数组插入语法;
		multimap 的key 值不是唯一的, 所以没办法支持'模仿'数组插入语法;
*/
