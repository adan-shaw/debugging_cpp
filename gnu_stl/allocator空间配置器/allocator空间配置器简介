#
# 1.allocator 简介
#
allocator 并不是一个通用意义上的内存重用管理器;
allocator 属于编程逻辑上的'内存重用管理器';
甚至, allocator 只能对单一类型进行内存重用,
一个allocator, 只能管理一个'类定义'实化后产生的类实体;
无论这个类实化了多少个实体, 只要变量类型一致, 都可以使用allocator 空间管理器;
但实际上, ptmalloc, jemalloc 才是通用意义上的内存重用器!!





#
# 2.allocator 与类工厂模式的关联
#
allocator 方便程序员实现工厂模式, 效率非常不错;
如果将ptmalloc 切换为jemalloc, 那就更完美了.

在一个类的定义里面, 实现一个规模化类工厂, 实现自我生产;
把类工厂的全局共有数据, 变成static 数据;
把类实体的固有数据, 变成public, private, protected 普通数据;

这样类工厂在自我生产的时候, 就能实现共享数据, 自我复制, 两者完美结合;

工厂模式, 必然会自己携带一个allocator, 
而且这个allocator 必然是static 变量, 在工厂内共享;

工厂模式, 不需要用到单例, 不要画蛇添足, 构造函数隐藏在private, 
但也不是虚函数, 不能节省的, 只是将构造函数从public 移到private 而已,
构造函数不能为虚函数, 这是定律!! 不能改变的


AbstractFactory 抽象工厂模式(其实就是反向思考, 从产品, 到工厂, 从下到上捋):
	负责生产产品aa的工厂 --> 工厂A --> 生产线A, 负责生产产品aa from A;
										--> 工厂B --> 生产线A, 负责生产产品aa from B;
	负责生产产品bb的工厂 --> 工厂A --> 生产线B, 负责生产产品bb from A;
										--> 工厂B --> 生产线B, 负责生产产品bb from B;
	负责生产产品cc的工厂 --> 工厂A --> 生产线C, 负责生产产品cc from A;
										--> 工厂B --> 生产线C, 负责生产产品cc from B;
	实话时, 只需实化工厂A/B 的其中一个即可, 因为工厂A/B 随便一个, 都能生产产品aa/bb/cc;


Factory 工厂模式(其实就是正向思考, 从工厂, 到产品, 从上到下捋):
	工厂 --> 生产线A, 负责生产产品aa;
			 --> 生产线B, 负责生产产品bb;
			 ...





#
# 3.gun 公版的allocator:
#
$ find /usr/include/c++/8/ -name "*allocator*"
	/usr/include/c++/8/ext/mt_allocator.h
	/usr/include/c++/8/ext/malloc_allocator.h
	/usr/include/c++/8/ext/extptr_allocator.h
	/usr/include/c++/8/ext/new_allocator.h
	/usr/include/c++/8/ext/bitmap_allocator.h
	/usr/include/c++/8/ext/throw_allocator.h
	/usr/include/c++/8/ext/pool_allocator.h
	/usr/include/c++/8/ext/array_allocator.h
	/usr/include/c++/8/ext/debug_allocator.h
	/usr/include/c++/8/bits/uses_allocator.h
	/usr/include/c++/8/bits/allocator.h
	/usr/include/c++/8/scoped_allocator

GNU STL除了提供默认分配器allocator.h, 
还提供了__pool_alloc、__mt_alloc、array_allocator、malloc_allocator 内存分配器;

常用的allocator:
	__pool_alloc:				高性能的单池配置器, 可重用内存在类型相同实例之间共享,
											当列表(free list)被用完时, 它将通过::operator new 获取新内存,
											如果客户容器请求的块超过某个阈值, 则将绕过缓冲池, 将分配请求直接传递给::operator new
											[网络上大写特写的sgi alloc 就是这个东西, 一般只分配16 个缓冲hash桶, 每个桶128字节, 大于128 字节直接new]
	__mt_alloc:					高性能的固定尺寸的配置器, 分配呈指数级增长
	bitmap_allocator:		一种高性能的配置器, 使用位图来跟踪已经使用和未使用的内存位置
	array_allocator :		全局内存分配, 只分配不释放, 交给系统来释放

简单的allocator:
	allocator:					默认allocator, 没有二级重用, 低级封装, 等于new/delete, 没啥用;
	new_allocator:			简单地包装::operator new 和::operator delete
	malloc_allocator:		简单地包装malloc和free

调试类allocator:
	debug_allocator.h:	在一个任意的配置器A外增加了一层包装. 它将大小略有增加的请求传递给A, 并使用额外的内存来存储尺寸大小信息
											当将指针传递给deallocate()时, 将检查存储的大小, 并使用assert()确保它们匹配
	throw_allocator.h:	包含内存跟踪和标记功能






