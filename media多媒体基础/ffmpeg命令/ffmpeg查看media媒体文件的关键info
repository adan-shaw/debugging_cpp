1.ffmpeg查看媒体文件的封装信息
	简单示范:
		ffmpeg -i <媒体文件.mkv>
		ffmpeg -i <媒体文件.mp4>
		ffmpeg -i <媒体文件.mp3>





2.结果分析:
	Video:			即视频轨
	Audio:			即音频轨
	Subtitle		即字幕轨

	视频轨道可以有多个, 具体看不同的封装格式, 可以兼容多少个视频轨道.
	音频轨道也可以有多个.
	字幕轨道也可以有多个.

	注意:
		ffmpeg -i <media file>
		实际也有装载的意思!!
		装载之后, 如果你不进行下一步操作, ffmpeg 默认就会打印出这个媒体文件的信息.
		然后结束退出.

	例子: 
		ffmpeg -i ./Comedy.Central.Roast.of.Bruce.Willis.2018.mp4
		(吐槽大会, 字幕脱轨的那个视频, 你完全没有办法改变. 因为字幕是打印到视频里面的.)
		查看一个没有字幕轨道的mp4文件, 得到如下描述
	Metadata:
		major_brand      : isom
		minor_version    : 1
		compatible_brands: isomavc1
		creation_time    : 2018-07-31T19:50:23.000000Z
		Duration: 01:23:43.32, start: 0.000000, bitrate: 2434 kb/s
		Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 1280x720 [SAR 1:1 DAR 16:9], 2309 kb/s, 29.97 fps, 29.97 tbr, 30k tbn, 59.94 tbc (default)

	Metadata:
		creation_time   : 2018-07-31T19:50:23.000000Z
		Stream #0:1(und): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 120 kb/s (default)

	Metadata:
		creation_time   : 2018-07-31T18:48:35.000000Z

	结果表明:
		这个mp4 文件, 实际是mkv 视频格式转码,压缩得来的.
		#0:2(und): 字幕轨道为空, 被删除了. 因为mp4 格式, 不支持独立字幕轨道, 所以没有数据.
		但是, 转码归转码, 它是不会完全修改视频的存储信息的, 
		例如, 如果你将mkv文件, 转码为mp4, 只是会将mkv文件的字幕轨道, 打印到视频轨道中.
		然后清空字幕轨道, 达到mp4 '视频-音频'双轨道的要求.

		注意看轨道标记:
			Stream #0:0(und): 
			Stream #0:1(und): 

	你剪切, 编辑轨道的时候, 需要靠这些标记来操作的.





1.ffmpeg 操作比较迅速, 但也会导致很多问题:
		如果信息不匹配, 可能'合并/插入'等操作之后, 视频会出现问题.
		(主要是视频合成, 插入时的问题, 视频剪裁就没有这种问题, 因为拆分必然类同, 
		 但是合成, 可能是两个不同帧速, 不同像素的视频. 这种视频合并, 是会出问题的.)

	因此, 使用'合并/插入'等之前, 应当检查mp4视频的信息, 防止合并出错.



2.如果视频-帧速, 视频-像素, 等信息不匹配, 需要进行转换, 合并后才可以正常播放.
	合并命令:
		ffmpeg -f concat -i filelist.txt -c copy xxx.mp4
	如果视频-帧速, 视频-像素, 等信息出现差异, 则以谁在前面为准, 后面的全部follow !!
	这样会导致很严重的出错问题.
	前后不同步.



3.ffmpeg 视频的操作速度:
	加入这个参数, 可以加快操作速度:
		ffmpeg -f concat -i filelist.txt -c copy xxx.mp4
		-c copy 边拷贝边操作, 速度最快.
	慢操作和快操作的结果, 都是一样的!! 所以还是快操作好.

	直接拼接视频, 剪切视频, 处理速度是很快的.
	但是如果重新编码, 那么处理速度很慢!! ffmpeg 快一点. kdenlive 更慢



4.ffmpeg 命令的可叠加性:
	ffmpeg 大部分命令都可以随意叠加的, 只要知道谁在前面, 谁在后面即可!!
	当然-i xxxmp4 肯定在前面, 
	而后面的全是输出参数, 但是输出参数可以一定程度上打乱顺序, 问题不重要.



5.ffmpeg里面常用的一些符号的含义(仅供参考和改进)
	-c:v 控制视频格式
	-c:a 控制音频格式
	-b:v 1M 代表着视频的比特率变成1Mb
	-filter:v 过滤视频数据

	25   tbr代表帧率;
	90k  tbn代表文件层(st)的时间精度, 即1S=1200k, 和duration相关;
	50   tbc代表视频层(st->codec)的时间精度, 即1S=50, 和strem->duration和时间戳相关.


	改变tbc(帧速是关键, 像素大小是关键, fps 随意):
	# 失败!! 不行
	ffmpeg -i x1.mp4 -codec:v mpeg4 -r 120 -qscale:v 2 -codec:a copy x1x1.mp4 

	不同帧率的视频合并(难)
	用kdenlive 试试.
	证明:
		不同帧速的视频合并, 必然触发重新编码,
		你可以直接用kdenlive 重新编码, 而且肯定会很慢.
