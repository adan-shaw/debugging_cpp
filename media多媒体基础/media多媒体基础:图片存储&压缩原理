1.计算机图片数据存储原理:

	计算机是如何存储图片数据的?
	目前所有显示器, 摄像头, 都是2D 平面摄像头, 
	所以, 实际上图片也是2D 的, 因此有:
		计算机存储图片数据的基本原理是:
			* 图片描述, 声明info[不重要, 仅供图片解析器阅读, 方便让图片解析器准备好解析算法]
			* 像素点
			* '像素点坐标pos'(x,y)
		满足这两个要素, 就能组成一张2D 图片;


	* 像素点:
		我们知道可见光色, 一般是: 
			红、绿、蓝, 可以用[0-255,0-255,0-255]来存储, 也就是3 个字节(一个[0,255]就是8bit, 一个字节)
		也就是, 3 个bit 可以组成一个像素点;


	* '像素点坐标pos'(x,y):
		我们知道一张picture, 实际上就是一张2D 数组, 有x,y 轴(未来可以添加3 维z 轴);
		因此, 我们本来可以用:
			255 * 255 = 65025 个像素点(太小了!! 目前最小也一般是: 480*640 720p)

		因此, 如果使用2 bit 来存储'像素点坐标pos', 那么就会是: 65536 * 65536 = 42亿+个像素点
		(目前最大的手机摄像头, 像素也才: 1 亿个像素点, 因此, 足够用了)


	由此, 我们知道, 计算机存储一张照片, 无论怎么样, 都逃脱不了这个描述体系:
		* 3 byte 字节, 描述一个像素点;
		* 2*2 byte 字节, 描述一个'像素点坐标pos';
		ps:
			(三维'像素点坐标pos': 2*2*2 = 8 byte 字节, 
			 但三维立体'像素点坐标pos'场景, 所需的像素点数量, 非常巨大!! 
			 这也是为什么'游戏-我的世界', 画质那么差, 画质要是提高, 会很卡)





2.图片压缩算法原理:

	从理论上出发, 压缩一张照片, 是不可能压缩'像素点坐标pos'的!!
	你只能压缩相同颜色的像素点, 相同颜色就省略, 不同颜色才显示;


	但实际上, 计算机是人为设计的, 
	只要我们默认将图像的'像素点数据', 按照从上至下, 从左向右的默认规则去阅读, 
	我们完全可以直接把'像素点坐标pos'的数据, 全部删掉, 仅保留: 
		像素点的三原色数据, 这是一种压缩方法, 可以直接消除大量pos 像素点数据, 是一个不错的压缩方法;

	这种方法的缺点:
		一旦压缩之后, 图片处于不可编辑状态!!
		所以, 一般相机拍摄出来的照片, 都会附带'像素点坐标pos'!!
		否则编辑图片时, 需要: 先读出图片像素点, 并自动还原'像素点坐标pos', 才能编辑;
		编辑完之后, 导出时, 还需要再次压缩, 目前大部分jpg, jpeg 图片, 都是这种编辑方法;



	激进的图片压缩方法:
		在删除'像素点坐标pos'的基础上, 如果碰到重复的'像素点三原色', 则合并;
		下一个像素点:
			第一个字节为: 0
			第二个字节为: 重复像素点的数量, 最多255 个重复;

		如果碰到一张白纸, 那么就会是:
			每255 个像素点pos, 一个像素点, 这样jpg 的压缩比例, 还会进一步坍塌!!

		缺点:
			需要图片解码器配合的算法, 才能读出这样的照片,
			因此, 还是需要看看jpg, jpeg, png 等封装格式, 才能决定这种压缩算法, 是怎样实现的;



	重点:
		图片压缩, 必须配合图片格式标准, 如: 
			jpg, jpeg, png 等封装, 还原标准来编写, 否则图片浏览器没办法打开图片!!

		而市面上, 有大量现成的图片压缩算法, 
		因此, 非常不建议各位无聊去重写这些东西, 如果需要重写, 先看:
			jpg, jpeg, png 等的封装格式, 根据picture 封装格式, 来编写压缩算法, 才是真理;


