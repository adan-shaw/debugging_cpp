#
# '推流同步'出现问题时的解决办法:
#

'推流同步'出现问题时的解决办法:
	推流, 为什么会出现同步问题?
	显然的, 如果是直接用ffmpeg, 把file 变成media 媒体流, 基本上是不可能出现'推流同步'的问题的;
	因为这ffmpeg 把file 变成media 媒体流的操作, 是在本机PC 中进行的, 内存中进行的, 
	出现'推流同步'的可能性基本没有(不要异想天开, 内存不足会直接崩溃, 而不是出现同步问题);

	因此, '推流同步'基本只存在于:
		录音设备/摄像头设备, 数据录入差异, 导致时间轴不一;
		流媒体server 转发时, 转发效率有差异, 导致时间轴不一;

	解决办法:
		同步'录音设备/摄像头设备'的时间, 记录时间轴起点, 终止点, 持续时间;

	最终在接收端, 使用ffmpeg调整时间轴, 对齐时间轴, 
	实现视频轨道, 音频轨道, 字幕轨道对齐;
	(这是一个艰难的操作, ffmpeg 解决这三个轨道的同步, 也很难;
	 关键是, 有些字幕轨道, 是直接烧写到视频里面的, 
	 如果字幕轨道和视频轨道出现差异, 你最好祈祷这个视频文件, 可以分离出字幕轨道,
	 如果不能分离出字幕轨道, 基本上不能调整;
	 基本上也是合成视频那个人, 在烧写视频轨道和字幕轨道的时候, 搞错了, 导致错误的, 不可逆转)

	对于'录音设备/摄像头设备'来说, 没有字幕轨道的困扰, 实现轨道对齐是可以实现的;
	实现自动对齐轨道, 由程序自动匹配对齐, 倒是很难;


	解决网络延时, 提高网络性能, 可以减少'录音设备/摄像头设备'出现轨道不对齐的情况;
	但为了提高准确性, 可靠性, 必须实现自动对齐轨道的算法,
	才能让'录音设备/摄像头设备'录入数据, 变得更可靠;

	对于视觉计算, 一般不关注声音设备录入, 因此不用考虑这种问题;
	对于通话设备, 一般不关注视频数据的录入, 也不用考虑这种问题;
	只有在实时会话视频的情况下, 这种自动对齐轨道的算法, 才会比较重要;


	时间轴出现对齐差异, 一般是录入设备导致的(录入设备合成时间轴时, 出现差异);
	已合成好的视频, 一般不会有差异;








'拉流同步'出现问题时的解决办法:
	非会话级拉流, 出现同步问题, 一般可以:
		* 设置预先缓存, 一开始就不断预先缓存时间轴, 弥补网速差异带来的困扰;
			利用优势网速时段, 弥补劣势网速时段, 维持时间轴的实时性;

		* 提高推流服务器/p2p 节点的io 效率, 
			或者, 甚至, 利用'流媒体server 营运商'和'p2p 节点', 实现联合推送服务, 提高网络io 吞吐量和可靠性;

		* 调整推流码流, 减少, 压缩码流的输出, 缩流缩帧, 减少网络消耗, 提高时间轴的实时性;

		* 优化客户端/服务器的socket 缓存, 
			优化服务器的linux 网络协议栈sysctl.conf内核参数;
			优化客户端web浏览器的参数;



	实时会话级-'拉流同步'出现问题:
		在上一个解决办法的基础上, 着手再以'SDP 会话协议'作为切入点, 解决问题;
