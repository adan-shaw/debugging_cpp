#
# media推流拉流总纲
#

# 前言声明:
	关于互联网media流媒体协议介绍, 请看: ../AF_INET互联网应用协议list
	这里不再累赘, 本节只谈论media推流拉流, 不谈论实时会话的细节;
	ps:
		实时会话 = 会话协议(会话通知, 会话邀请, 会话初始化) + media推流拉流(流媒体数据传输);

声明:
	本节所述的mp3/mp4, 并非真的是指mp3/mp4, 而是泛指mp3=声音, mp4=视频;
	由于声音媒体文件/媒体流的格式太多, 故用mp3 表示, 容易理解;
	由于视频媒体文件/媒体流的格式太多, 故用mp4 表示, 容易理解;








# 流媒体服务器:
	流媒体server必须提供'服务质量(QoS)保障协议'的TCP/UDP支撑性实现, 一般包括以下几种协议:
		RTP/RTCP
		SRTP/SRTCP
		RTMP/RTMPE
		RTMPT/RTMPS
		RTSP
		HLS
	完成对以上协议的支持后, 提供出推流端口, 拉流端口, 就完成了基础的流媒体server功能;
	以实现WebRTC 标准的支撑(支持WebRTC的web浏览器, 才能播放mp3/mp4媒体流)
	进阶功能:
		* 拉流端限速(必备功能, 否则服务器会崩溃; 一般不限制推流端)
		* https 证书验证, 提供SSL 隧道传输, 防止media媒体流数据被截获, 监听(必备功能)
		* log 日志系统(必备功能)
		* 访问权限约束, 防止用户越界访问系统资源(必备功能)
		...

	常见的流媒体server分析:
		nginx:
			支持TCP 下的多种'服务质量(QoS)保障协议', 具备出色的限流, SSL隧道传输, 访问权限约束等功能,
			但不支持udp 组播, 常用于互联网播放小视频, 现已经淘汰;
			(被WebRTC p2p 取代, 没有服务器营运商愿意负担巨大的流量费用, p2p 是趋势)
		rtsp-simple-server:
			支持TCP/UDP 下的多种'服务质量(QoS)保障协议', 支持SSL隧道传输等功能,
			但貌似没有限流功能, 只能通过约束原始推流码流的帧率, 来控制推流速度;
			(常见于局域网推流中, udp 模式是真的好用, 无论点播还是多播, 性能都是最优);
		simple-rtmp-server:
			国产流媒体server, 中文技术文档多;
		EasyDarwin:
			成熟&强大的全能产品, 部分开源, 部分收费;



# 推流
	将原始数据源(mp3/mp4媒体文件, 录音器/摄像头media媒体流), 
	按照一定帧率, 规格(包括像素网格, 图片间隔, 播放速度等), 进行重新切片,
	然后将新的media媒体流, 推送到流媒体server的推流端口中;
	ps:
		如果是'录音器/摄像头media媒体流', 可以不切片, 直接将'录音器/摄像头media媒体流'导入到流媒体server中, 
		一般流媒体server, 都可以配置推流源来自: 
			* RTSP/RTMP 切片后的数据流(一般是对mp3/mp4媒体文件进行切片, 也可以是对media媒体流进行重新切片)
			* redirect转发另一个server的媒体流(一般转发不需要重新切片)
			* Camera直接提取相机中的媒体流(一般转发不需要重新切片)



# 拉流
	根据具体某一种的'服务质量(QoS)保障协议', 从流媒体server的拉流端口, 拉取media媒体流, 并进行解析还原, 解码播放;
	这部分功能, 就称之为拉流(实际就是一个网络media流播放器), 市面上常见的'拉流播放器'有:
		* web浏览器(大部分web浏览器都支持mp3/mp4 拉流播放, 部分黑屏无界面的文字web 浏览器除外)
		* vlc
		* smplayer
		* ffplay
		* ffmpeg(拉流保存到本地文件, 而非直接播放, 连播放功能都省掉了, 直接解码转存media数据到file中)
		...



# 实时'视频会话/语音通话'服务器:
	SDP会话描述协议(Session Description Protocol) + 流媒体server = 实时'视频会话/语音通话'server;
	* SDP会话描述协议(Session Description Protocol):
		1.'SAP会话通知'协议
		2.'SIP会话初始化(会话邀请)'协议
	* 流媒体server:
		后续会话建立之后, 具体数据的传输方式, 组播方式, 由后续的编程模式决定;
		参考上面的流媒体server详解, 流媒体server必须提供'服务质量(QoS)保障协议'的TCP/UDP支撑性实现;








# 一对一点播, 一对多组播, 多对多组播, 实时会话组播, 实时非会话组播, 一对一视频会话, 多对多视频会话等概念:
	* 实时非会话组播:
		流媒体server, 提供'服务质量(QoS)保障协议'的TCP/UDP支撑性实现;

	* 实时会话组播:
		SDP + 流媒体server, SDP只管描述会话通知, 会话邀请, 会话初始化; 流媒体server必须提供'服务质量(QoS)保障协议'的TCP/UDP支撑性实现;



	* 一对一点播:
		一个用户拉流, 一个流媒体server服务:
			流媒体server找到资源文件, 然后转换为指定的media码流, 进行推流, 
			最终只让唯一的用户拉流(消耗非常大);
		通常这种情况, 都使用fork()/docker, 直接启动nginx/rtsp-simple-server, 对用户进行一对一推流拉流;
		顺便提供:
			https安全通信服务;
			tcp/udp限速;
			p2p&STUN协议, NAT穿墙, 利用用户缓存数据, 进行互相发送服务, 服务器则躲避所有带宽, 只做NAT穿墙协调, 极大地避免带宽消耗;
			(需要浏览器支持, 最终将流量消耗, 转嫁到用户身上, 服务器则最大限度减少流量费用)
			支持用户手动跳跃, 暂停, 重置, 时间轴的功能(一对多/多对多/会话视频/语音通话, 都不支持, 一对一点播特有的功能)
			...
		'一对一点播'总结:
			用户数量多的情况下, 技术难度大;
			有'服务质量(QoS)保障协议'指令控制端, 有'media媒体流'数据端, socket链接至少是2 个通道以上;
			(一个通道的老式RTP/RTCP, 基本很少用, 性能应该很慢)

	* 一对多组播:
		常见于各种房间主播, 房间电影院, 甚至是新闻联播, 综艺节目, TV 频道等;
		这类media媒体流的特点是:
			提前录制好, 或者录制场地和直播画面之间, 存在一个时间差缓冲, 哪怕是几十秒,
			这时候, 就为技术性缓存, 提供了极大的操作空间;
		ps:
			会话视频/语音通话, 缓冲时间差近似为0, 一般在50ms 以内, 让人感觉不出来;
			这时候技术难度会大很多很多;

	* 多对多组播:
		常见于各种房间主播, 房间电影院, 甚至是新闻联播, 综艺节目, TV 频道等;
		与一对多组播差异不大, 只不过新增一个功能:
			把n路推流合并成n个九宫格, 最终输出到一路推流数据中;
		这个过程必然触发重新编码, 重新切片, 技术难度加大了一点;



	* 一对一会话视频:
		一对一点播的基础上, 再加SDP(会话通知, 会话邀请, 会话初始化), mp3+mp4 影音流, 并且延时极限小于200ms;
		数量多的情况下, 技术难度超级大;

	* 一对多会话视频:
		一对多组播的基础上, 再加SDP(会话通知, 会话邀请, 会话初始化), mp3+mp4 影音流, 并且延时极限小于200ms;

	* 多对多会话视频:
		多对多组播的基础上, 再加SDP(会话通知, 会话邀请, 会话初始化), mp3+mp4 影音流, 并且延时极限小于200ms;



	* 一对一语音通话:
		一对一点播的基础上, 再加SDP(会话通知, 会话邀请, 会话初始化), mp3声音流, 并且延时极限小于200ms;
		数量多的情况下, 技术难度很大;

	* 一对多语音通话:
		一对多组播的基础上, 再加SDP(会话通知, 会话邀请, 会话初始化), mp3声音流, 并且延时极限小于200ms;

	* 多对多语音通话:
		多对多组播的基础上, 再加SDP(会话通知, 会话邀请, 会话初始化), mp3声音流, 并且延时极限小于200ms;






