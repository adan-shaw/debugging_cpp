camera摄像机简介:
	camera摄像机, 是一种以一定帧率&像素, '指定推送端'推送'视频流+音频流'的设备;

	camera的指定推送端, 可以是:
		/dev/null, 丢弃一切数据, 一般不可能使用这种模式的;
		file     , 录制视频模式, camera媒体流导入到file, 保存;
		usb      , 将camera媒体流 导入到usb 端口;
							 如果host挂载了该usb 设备, 则导入到/dev/usb0 设备中, 以设备文件的方式存在;
							 如果host没有挂载该usb 设备, 则host丢弃数据;
		ip       , 将camera媒体流, 通过网络推送到指定ip的host中;
							 (需要双端约定好, 建立tcp/ip 链接, 一般是udp, 节约流量, 解决巨帧问题);





camera摄像机的主要功能:
	镜头浏览:
		camera媒体流推送到usb/ip中, 然后linux 系统从usb/ip拉流, 
		然后再用ffplay 直接解码播放, 显示到display屏幕上面;

	录制模式:
		camera媒体流导入到file, 进行保存;

	拍照模式:
		将1fps 的照片, 保存到file中;(ps: 30fps = 每秒播放30张照片)
		fps = 帧率

	镜头放大模式:
		通过camera相机的io口排线, 调整相机焦距, 继续执行'镜头浏览'功能;

	特效模式:
		通过特效编码, 对相机捕抓到的原始数据, 进行特效处理;
		ps:
			相机的主控芯片, 是不可能做特效的(特效超消耗cpu 计算性能);
			手机拍照特效, 都是直接经过处理, 再合成的媒体流;
			虽然这样做很消耗cpu, 但是一般人拍照的时候, 不会做其它操作, 
			所以根本感觉不出来相机占用了cpu进行解码编码;
			但实际上, 手机拍摄视频时, camera实际上是抢占了cpu使用权, 进行解码编码的;
			将解码编码后的媒体流, 导入到新的/dev/usb2 中(假设手机摄像头是以/dev/usb 媒体流输出的)
			这样用户可以直接看到特效化之后的媒体流, 所见即所得, 这样更好地实现: 自动施加特效, 捞粉丝的小伎俩;





camera摄像机的类型:
	uvc摄像机:
		uvc摄像机(usb video camera), 是一种以一定帧率&像素, 向usb 异步串行接口推送数据的camera;
		由于是usb 异步串行接口, 因此uvc摄像机会以/dev/usb0 的设备文件形式, 存放在linux系统中;

	rtmp推流摄像机(ip摄像机):
		将camera媒体流, 通过网络推送到指定ip的host中;
		一般指定一个局域网主控switch, 此后用户可以通过rtmp拉流, 查看实时camera, 或者过往记录;
		一般不指定云服务器主机, 否则数据流量过于巨大, 很不划算!!
		(需要双端约定好, 建立tcp/ip 链接, 一般用udp, 节约流量, 解决巨帧问题);

	webcam网络摄像机:
		一般使用rtsp 协议, 是一种互联网摄像机, 一般支持NAT 穿墙;
		就是webcam 端, 自己向用户端, 暴露ip&推流端口, 让用户自己来获取camera媒体流;
		webcam 端的NAT穿墙server的支持有:
			DMZ / port mapping / UPnP;
		(需要双端约定好, 建立tcp/ip 链接, 一般用tcp)



	uvc摄像机优点:
		比起ip 摄像头, uvc摄像机的实时性要更高;

	rtmp推流摄像机(ip摄像机):
		没有数据线限制, 传输距离远, 不用usb线, 方便实用;
		局域网高速, 监控行业常用;

	webcam网络摄像机:
		没有数据线限制, 传输距离远, 不用usb线, 方便实用;
		互联网低速, 监控行业常用, 个人用户常用, 容易被网络入侵;
		因为没有营运商, 会承担专用的camera媒体流的流量费用,
		因而使用DMZ / port mapping / UPnP 等p2p 手段, 节约流量,
		但这种p2p 模式, 存在比较巨大的安全隐患, 容易被入侵;

	ps:
		ip摄像头 = rtmp推流摄像头 / webcam网络摄像机, 这两款都可以称之为'ip 摄像头';
		而且, 目前的'ip 摄像头', 基本都是通过无线电传输数据的, 一般是wifi 协议;


