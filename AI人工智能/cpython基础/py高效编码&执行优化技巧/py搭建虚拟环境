#
# 1.使用pip 安装'搭建虚拟环境必须的依赖包'(需要root 权限)
#
/usr/local/bin/python2 -m pip install virtualenv
/usr/local/bin/python3 -m pip install virtualenv

#pip3 install --user virtualenv
#pip2 install --user virtualenv





#
# 2.创建python 虚拟环境venv
#
:<<!
简介:
	Python3.3以上的版本通过venv模块原生支持虚拟环境;
	Python2.7是virtualenv, 不是venv;
!

# 执行成功后, 默认生成路径是: /home/tarball/cpython2/py2_env
/usr/local/bin/python2 -m virtualenv py2_env

# 执行成功后, 默认生成路径是: /home/tarball/cpython3/py3_env
/usr/local/bin/python3 -m venv py3_env





#
# 3.python 虚拟环境venv 的其他问题
#
# virtualenv什么时候成为内建模块?
	Python3.3以上的版本通过venv内建模块支持虚拟环境, 可以代替之前pip的virtualenv;


# 为什么需要venv 虚拟python环境?
	在实际开发中, 创建虚拟隔离环境, 建立软件运行的python版本, 与系统自带的python 版本完全隔绝, 是运行python project 的首要条件;
	linux 系统一般情况下, 不能随意更换系统自带的python 版本的(更换了linux 系统默认的python 版本, 容易导致系统崩溃);
	因此, 创建一个新的venv 虚拟python环境, 来运行python 软件project, 是每个python 程序员都要会做的事;
	ps:
		一个venv 虚拟python环境, 应该只有一个python 版本, 
		不要在一个venv 虚拟python环境中, 同时集成python2, python3, 馊主意!!


# venv 虚拟python环境, 怎么用pip?
	Python3.3中使用"venv"命令创建的环境不包含"pip"，你需要进行手动安装;
	Python3.4中改进了这一个缺陷, 进入了venv 目录之后, $venv/bin 里面就有pip 工具, 正常使用即可:
		$venv/bin/pip install --upgrade pip
		或者:
		$venv/bin/python3 -m pip install --upgrade pip


# 虚拟环境常用场景:
	多人代码协作环境不一样, 导致代码报错;
	云端环境与本地环境不一致, 导致报错;
	使用路径:
		创建虚拟环境->进入并激活虚拟环境->进入虚拟环境后下载运行代码所需要的模块->运行代码




