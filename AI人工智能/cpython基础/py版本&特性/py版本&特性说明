由于python27 已经终止维护了, 最后的版本是python2.7.18;
因此, python2 不再需要担心版本更新带来的各种问题, 
但cpython3 需要担心版本更新带来的差异问题, 本文主要讲述cpython3 应对版本差异带来的各种问题;



1.cpython3 不断更新, 应该更换新版本的cpython3 吗? 旧代码在新版本下跑, 会不会有问题?
答:
	一般情况下, 新版本都会向后兼容, 
	旧版本的代码, 在新版本cpython3 下, 一般都能正常运行, 而且性能更好;
	(除非cpython3 明确, 删除了对部分语法的支持, 但这种操作一般比较少)

	所以, 一般情况下, cpython3 旧版本的代码, 是可以轻松跑在新版本上面的, 而且性能更好;
	虽然cpython3 越更新, 软件越大, 
	但这都是软件模块越来越大而已, 完全不影响python 程序的运行速度;
	相反的, python 程序的运行速度反而会更快, 所以不用担心;



2.更新python 版本, 还有什么好处?
答:
	新版本提供更高速的运行速度, 例如py11 py12 就提供更高的运行速度, 官方对运行速度方面做优化;

	新版本提供更安全的运行环境;

	新版本提供更多新的语法糖; 
	(OOP 语言就是一种'语法糖'语言, 用新特性, 简单几句话就写完功能, 这就是OOP 语言 十分简单方便)



3.为什么linux/freebsd 上面, 没有现成的cpython3 二进制安装包?
	这个, 由于linux/freebsd 版本太多, 又没有利益团体支持, 没有新版本的cpython3 二进制安装包, 很正常的;
	ubuntu 可以更新最新版本的cpython3 二进制安装包,
	debian 根本就没有cpython3 二进制安装包, 需要自己tarball, 这也是c/c++ 程序员的基本功;



4.如何定制cpython3 的tarball 策略?
	由于cpython3 会持续更新, 所以根本不适合定制详细的python 策略, 最简单的即可;
	也不用怎样优化, 直接用, 
	反正一头半个月, 就会更新一次, 你优化也没用, 让官方帮你优化和打补丁;

	linux/freebsd 是没有现成的编译版本的, 都需要自己tarball, 然后创建venv 来运行project,
	tarball 之后, 绝对不能替换系统python, 也不能安装到/usr, /usr/local 中,
	否则跟系统的python 产生冲突, 到时候系统崩溃了, 你吃不了兜着走;



综上所述:
	所以, 你可以放心地: 学习cpython38(38 版本中文文档多), 但把代码跑在cpython311 上面;








