#
# lfs, busybox, buildroot, yocto 的区别:
#
lfs, kernel+buildroot+busybox, yocto 都是linux-bsp 实施方案;
lfs, kernel+buildroot+busybox, yocto 等工具链的本质, 都是为了让我们编译出一个可用的操作系统镜像;
但实际上, 生产环境下, 你得考虑可用性, 实用性, 效率, 准确性, 稳定性;
这种情况下, 自动化程度越高, 可靠性就越高!!
自动化梯度如下:
	lfs < kernel+buildroot+busybox < yocto

因此, 新一代的linux 工具链, 常以yocto 为主; 
也只有Linux 有这么多套工具链系统, 其他系统一推出, 基本上都是全自动化工具链的, linux 这些都是历史遗留导致的问题, 
由于发布得比较早, 还是开源系统, 
因此linux 系统工具链比较多, 比较杂, 这里做一下区分:
	* 交叉编译工具链(仅负责编译器,c/c++运行时库,linux kernel头文件[锁定kernel版本]):
		- 手工制作交叉编译链
		- Crosstool-NG
	* linux kernel
	* 操作系统工具链: 包括系统底软, 系统配套驱动+软件, 文件系统+引导+镜像烧写, c++ 高级语言的编译工具链, 等等;



yocto 新一代全自动工具链:
	新一代的yocto 工具链, 也像openwrt, freertos 一样, 编译完之后, 直接出img 镜像, 非常方便;
	(这样你只需要用grub/uboot 重建引导, 就可能实现img 镜像烧写到设备上面了, 相当于加装一个万能安全引导系统, 加固系统安全而已)
	这样做bsp 开发时, 只需要直接配置编译conf list 即可, 控制需要编译的软件, 编译参数, 部署参数等等, 最终部署好之后, 直接编译出img 镜像;
	这样一来, 目前的bsp 开发工作, 基本上都是直接出img 镜像的了(手工定制时代落幕了):
		* aosp
		* yocto
		* openwrt
		* rt-thread
		* freertos(没有引导系统的)





常见的工具链, 其实有两种:
	* 交叉编译工具链(仅负责编译器,c/c++运行时库,linux kernel头文件[锁定kernel版本]):
		- 手工制作交叉编译链
		- Crosstool-NG

	* linux kernel(根据原始c 语言编译器, 编译出linux kernel)

	* 操作系统工具链: 包括系统底软, 系统配套驱动+软件, 文件系统+引导+镜像烧写, c++ 高级语言的编译工具链, 等等;
		具体如下:
		- lfs 纯手工工具链(自己一个一个软件包, 编译安装, 非常麻烦!!)
		- buildroot + busybox (buildroot文件系统 + busybox系统底软project)
			[busybox系统底软project: 避免你一个一个编译, 这里一次性编译全部低级底软, 常用的linux 命令都有]
		- yocto 新一代全自动工具链(新一代的yocto 工具链, 也像openwrt, rt-thread 一样, 编译完之后, 直接出img 镜像, 非常方便)

		# 其他非linux 的操作系统工具链:
			- aosp: android 系统工具链(需要补充交叉编译工具链)
			- openwrt: openwrt 系统工具链(需要补充交叉编译工具链)
			- freertos: freertos 系统工具链(需要补充交叉编译工具链)[ps: freertos 需要自己重建引导系统]
			- RT-Thread: RT-Thread 系统工具链(需要补充交叉编译工具链)
			...
			(单项目的小型嵌入式操作系统一大堆, 不一一展示了)





