#
# 1.lfs, busybox, buildroot, yocto 的区别:
#
lfs, busybox, buildroot, yocto 等工具链的本质, 都是为了让我们编译出一个可用的操作系统镜像;
但实际上, 生产环境下, 你得考虑可用性, 实用性, 效率, 准确性, 稳定性;
这种情况下, 自动化程度越高, 可靠性就越高!!
自动化梯度如下:
	lfs < busybox < buildroot < yocto

因此, 新一代的linux 工具链, 常以yocto 为主; 
也只有Linux 有这么多套系统, 其他系统一推出, 基本上都是全自动化工具链的, linux 这些都是历史遗留问题, 

由于发布得比较早, 还是开源系统, 因此linux 系统工具链比较多, 比较杂, 这里做一下区分:
	* 交叉编译工具链(仅负责编译器,c/c++运行时库,linux kernel):
		- 手工制作交叉编译链
		- Crosstool-NG
	* 操作工具链(负责交叉编译工具链的三大部分, 操作系统的其他配套驱动+软件, 引导+镜像烧写):






常见的工具链, 其实有两种:
	* 交叉编译工具链(仅负责编译器,c/c++运行时库,linux kernel):
		- 手工制作交叉编译链
		- Crosstool-NG
	* 操作系统工具链(负责交叉编译工具链的三大部分, 操作系统的其他配套驱动+软件, 引导+镜像烧写):
		- lfs 纯手工工具链
		- busybox
		- buildroot
		- yocto 新一代全自动工具链
		# 其他非linux 的操作系统工具链:
			- aosp: android 系统工具链(需要补充交叉编译工具链)
			- openwrt: openwrt 系统工具链(需要补充交叉编译工具链)
			- freertos: freertos 系统工具链(需要补充交叉编译工具链)
			- RT-Thread: RT-Thread 系统工具链(需要补充交叉编译工具链)
			...
			(单项目的小型嵌入式操作系统一大堆, 不一一展示了)
