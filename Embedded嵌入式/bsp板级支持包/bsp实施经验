#
# 0.前言
#
由于yocto 的出现, linux-bsp 开发的历史遗留问题被解决, 
因此目前bsp 开发, 基本上都是conf 配置好之后, 直接一个project, 编译即出img 镜像, 非常方便, 支持直接编译出img 的project 有:
	* aosp
	* yocto
	* openwrt
	* buildroot
	* rt-thread/luatos
	* freertos/nuttx (貌似没有引导系统, 需要自己重建引导系统)

这几个常见的os 都已经囊括了, 包括了大中小操作系统, 包括了实时/分时操作系统;
详细bsp 编译配置, 需要自己手动修改, 例如: 
	我想给Linux os 打入RT实时补丁, 用作车载SoC-OS 的主控OS, 这时候就很有可能会打入RT 实时内核补丁;
	你需要做的是: 
		在yocto 编译之前, 进行conf 配置, 直接配置yocto-linux-kernel 内核相关的参数, 
		最终得出一个具有RT 实时性能的linux OS





#
# 1.bsp 实施策略:
#
大型分时系统(按照纯手工lfs 路线定制):
	* 根据芯片, 搭建原始gcc
	* 编写bios 自检程序, 移植os 系统引导程序
	* 使用原始gcc 编译os kernel
	* 根据原始gcc + os kernel, 编译出c/c++ 运行时库glibc(c/c++两个库是分开编译的), 最后再编译出全功能gcc/g++;
	...
	(以下的工作可以用buildroot/yocto 替代)
	...
	* os 的disk文件系统, 网络协议栈, 进程管理器(包括内存管理器)的重建;
	* 根据全功能gcc 编译工具链 + os kernel, 编译出核心底软(busybox): bash shell, find, ip 等关键软件工具;
	* 根据业务需求, 补全业务所需的关键底软+关键编程sdk 库;
	* initrd/initramfs 镜像的布局(deamon server)
	* dtb 设备树镜像(驱动管理)
	* 重新烧制img 镜像, 准备发布(uboot/grub);
	* 完成设备自检, os 镜像引导, 驱动启动&自检, 底软服务启动&自检等等的测试任务;
	* 整个os 启动, 运行, 服务管理的优化(提升);
	* 信息安全优化(img 镜像安全启动, img 镜像数据安全, 引导锁, 等等);
	- 补全业务应用(略)
	...



小型实时系统(跟编译内核一样, 直接选择好arch, 直接编译, 就会得出: 编程sdk 库 + os 系统img 镜像):
	* 根据芯片, 搭建与芯片匹配的编译工具链(甚至可以根据ubuntu 里面的apt 现有的编译工具链, 直接安装, 省事, 省得自己定制, 贼麻烦);
	* 直接编译整个project, 即可得出编程sdk 库 + os 系统img 镜像;
	* 使用qemu 虚拟机进行模拟运行;
	* 准备img 镜像烧制到disk, 还有disk 引导重建;



一般来说, 如果你没有什么bsp 开发经验, 你是应付不了复杂, 大型的系统的bsp 的, 例如: linux / android, 这种大型系统的bsp 实施, 比较复杂;
(但大型系统一般都有自动化工具帮你生成维护, 你只需要熟练这些工具的使用, 也可以轻松维护os img镜像, 但需要补全很多驱动程序倒是真的)
你可以从比较小型的RT-Thread / openwrt 开始玩bsp, 实际上也是很简单的;





#
# 2.应用程序员how 如何搭建快速交叉编译工具链
#
普通应用程序员, 不需要知道如何搭建快速交叉编译工具链, 
直接在编译好的环境中, 把交叉编译工具链拷贝出来, 直接复制粘帖, 安装到指定位置即可(省事);

但bsp 级别的交叉编译工具链, 实际上就是你之前做的lfs, 如果需要自己重建, 十分麻烦;
就是从gcc 中选择适合的arch, 编译出原始gcc, 然后编译glibc, 然后编译全功能的gcc(包括g++), 这种编译工具链制作, 时间成本很高, 而且还要考虑准确率, 可用性;





#
# 3.my bsp 案例分析:
#
RT-Thread bsp:
	* 根据芯片arch 架构, 选择适合的arch, 编译出原始gcc;
	* 根据原始gcc, 根据RT-Thread 编译出RT-Thread 的各种依赖库;
		(RT-Thread 应该依赖库不多, 一般是c 语言运行时库, 系统核心支持库等, 应该难度不大, 而且自动化程度较高, 看看教程就行)
	* 根据原始gcc + RT-Thread 的各种依赖库, 编译出全功能的gcc (RT-Thread 支持高版本的g++);
	* 根据全功能gcc, 编译出整个RT-Thread img 镜像
	* 利用烧写工具, 把RT-Thread img 镜像, 烧写到存储材料上面, 然后重建引导;
	* 调试RT-Thread img 是否正常启动, 运行;



openwrt bsp:
	* 根据芯片arch 架构, 选择适合的arch, 编译出原始gcc;
	* 根据原始gcc, 根据openwrt 编译出openwrt 的各种依赖库;
		(openwrt 应该依赖库不多, 一般是c 语言运行时库, 系统核心支持库等, 应该难度不大, 而且自动化程度较高, 看看教程就行)
	* 根据原始gcc + openwrt 的各种依赖库, 编译出全功能的gcc (openwrt 支持高版本的g++);
	* 根据全功能gcc, 编译出整个openwrt img 镜像
	* 利用烧写工具, 把openwrt img 镜像, 烧写到存储材料上面, 然后重建引导;
	* 调试openwrt img 是否正常启动, 运行;





