#
# 1.广义上的bsp 开发简介
#
bsp 是一个非常大的话题, 基本上一个系统的bsp 就是一片天地, 内容非常多;
在这种局面下, bsp介绍也只能泛泛而谈, 
不同操作系统的bsp任务, 有一定类似, 相同的特征, 
但实际上, 不同os系统的bsp实施, 差异巨大, 想要一一列举, 简直妄想;
这里只能蜻蜓点水, 说说一些bsp 开发共性的东西;

广义上的bsp, 就是操作系统移植, 适配的工作, 驱动开发的任务较多;
广义上的bsp 开发, 主要包含下面的任务量:
	* bios设备自检系统 + os镜像引导系统;
	* os 编译工具链组建, 调试(gcc+glibc+kernel+make工具);
	* os 内核芯片适配, 内核模块剪裁(先最小化安全移植);
	* os 的disk文件系统, 网络协议栈, 进程管理器(包括内存管理器)的重建;
	* os 驱动进一步适配, 内核模块增减, 调整(驱动层进一步功能拓展移植, 完善驱动层);
	* 完成bios 启动, os 镜像引导, 驱动自检, 三大模块的测试任务;
	...(大部分bsp 工作, 在这一层已经完成了, 下一步都是底软层的工作了)

底软层涉及的bsp 开发任务(这部分严格来说, 不算是bsp 的任务范围, 但小型系统, 没有那么多划分, 例如rtos, 大型系统则不一样了):
	* os 关键底软移植, 优化(shell + find, cat, 等关键shell 工具)
	* os 关键底层sdk 编程库移植, 优化(例如: 面向多媒体开发, ffmpeg bin+lib 移植)
	- 移植后, 底软的二次开发(严格来说, 这是底软程序员的任务了)


	一般来说, 越是大型的操作系统, bsp 和底软的分割线, 会越明显!!
	越是小型的系统,  bsp 和底软的分割线, 会越模糊!!
	例如:
		qnx, 这个中型系统, 就基本上没有应用/驱动的划分的, 应用和驱动同权, 同等对待;
		比qnx 小的rtos 就更是如此了, rtos 的软件开发, 应用开发, 实际上就是嵌入式驱动开发(有区别??)
		因此, 中小型系统, 基本上没有应用/驱动的划分的, RT 实时系统, 更是如此;

		大型分时系统, 就有应用/驱动的划分, 因为分时系统一般较为庞大, 例如: linux, android, openwrt;
		在分时系统中, 最小的openwrt, 也会用lua 脚本机, 来彻底隔绝应用/驱动;
		android 则是用java 脚本机来彻底隔绝应用/驱动;
		linux 则是用: 用户态sdk(posix API)/内核态sdk(syscall) 不能互相调用为由, 彻底隔绝应用/驱动;

	总的来说, bsp 开发基本上也看不同系统来区分, 
	实时系统中, 大部分都是底软+驱动开发; 分时系统中, 一般就是指驱动开发;



bsp 通俗地理解就是:
	给你一块电板, 把android/linux/openwrt/qnx/VxWorks/RT-Thread所需的一切, 都搭建上去; 包括:
		* bios 系统
		* c/c++编译工具链
		* kernel 系统内核适配
		* disk文件系统, 网络协议栈, 进程管理器(包括内存管理器)的重建
		* driver 设备驱动适配 && 编写
		* 完成bios 启动, os 镜像引导, 驱动自检, 三大模块的测试任务;
		* 基础支撑软件的实现;
		...





#
# 2.bsp 开发过程中常见的一些概念
#
bsp的主要功能:
	bsp主要功能为屏蔽硬件, 提供操作系统及硬件驱动, 具体功能包括:
		1.单板硬件初始化, 主要是CPU的初始化, 为整个软件系统提供底层硬件支持
		2.为操作系统提供设备驱动程序和系统中断服务程序
		3.定制操作系统的功能, 为软件系统提供一个实时多任务的运行环境
		4.初始化操作系统, 为操作系统的正常运行做好准备



bsp的作用:
	建立让操作系统运行的基本环境:
		1、初始化CPU内部寄存器
		2、设定RAM工作时序
		3、时钟驱动及中断控制器驱动
		4、串口驱动

	完善操作系统运行的环境:
		1、完善高速缓存和内存管理单元的驱动
		2、指定程序起始运行位置
		3、完善中断管理
		4、完善系统总线驱动



bsp定义:
	硬件层与软件层之间为中间层, 也称为:
		硬件抽象层(Hardware Abstract Layer, HAL)
		板级支持包(Board Support Package, bsp)
	它将系统上层软件与底层硬件分离开来, 使系统的底层驱动程序与硬件无关, 
	上层软件开发人员无需关心底层硬件的具体情况, 根据bsp层提供的接口即可进行开发.
	该层一般包含相关底层硬件的初始化、数据的输入/输出操作和硬件设备的配置功能.



bsp具有以下两个特点:
	硬件相关性:
		因为嵌入式实时系统的硬件环境具有应用相关性, 
		而作为上层软件与硬件平台之间的接口, bsp需要为操作系统提供操作和控制具体硬件的方法.

	操作系统相关性:
		不同的操作系统具有各自的软件层次结构, 
		因此, 不同的操作系统具有特定的硬件接口形式.
		实际上, bsp是一个介于操作系统和底层硬件之间的软件层次, 包括了系统中大部分与硬件联系紧密的软件模块.



bsp和PC机主板上的BIOS区别:
	其实PC机上的windows或linux系统, 也是有bsp的.
	只是PC机均采用统一的X86体系架构, X86-bsp 体系和嵌入式系统有一定区别;

	bsp和PC机主板上的BIOS区别很大, BIOS主要是:
		负责在电脑开启时检测
		初始化系统设备(设置栈指针, 中断分配, 内存初始化...)
		装入操作系统并调度操作系统向硬件发出的指令
	它的Firmware代码是在芯片生产过程中固化的, 一般来说用户是无法修改.
	其实是为下载运行操作系统做准备, 把操作系统由硬盘加载到内存, 并传递一些硬件接口设置给系统.
	在OS正常运行后, BIOS的作用基本上也就完成了, 这就是为什么更改BIOS一定要从新关机开机.

	bsp是和操作系统绑在一起运行在主板上的, 
	尽管bsp的开始部分和BIOS所做的工作类似, 
	可是大部分和BIOS不同, 作用也完全不同.
	此外bsp还包含和系统有关的基本驱动(串口, 网口...), 
	此外程序员还可以编程修改bsp, 在bsp中任意添加一些和系统无关的驱动或程序, 
	甚至可以把上层开发的统统放到bsp中;

	总结:
		实际上bsp 就是主板bios, 只不过功能更多而已, 而且可以根据需求进行修改, 新增(主要是新增驱动和软件);
		现在的PC 智能bios, 也有网卡驱动和管理软件, 方便提供联网更新和bios 管理;

		但由于bsp 一般用在小型芯片上面, 部分小型芯片, bsp 即操作系统, 所以会有更多软件集成到bsp 上面而已;








