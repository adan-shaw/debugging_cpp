#
# * cross交叉编译工具链支持c++的可行性分析:
#
* 如果是使用原始gcc 的芯片平台, 一般都是MCU, 这类芯片基本上不支持glibc, 更不可能支持c++;

* 如果是rtos 这类小型os, 一般情况下, 也会是32bit 芯片, 这类芯片有支持c++ 的可能, 但基本上支持c++ 的版本不会太新, 想什么呢!!
	就算是android 32bit 编译工具链, 支持的c++ 版本, 也不会很高, 何况这些小型os 的编译工具链, 基本上能支持c++ 的, 都算规模比较大的;
	freertos 需要支持8bit 芯片, 因此freertos 可能使用c++ 的可能性其实也不大, 就算有, c++ 版本也不会太新;

* 如果是64 bit 芯片, 一般情况下, 这类芯片上面运行的os 系统, 基本上都支持比较新的c++ 编译工具链, 例如:
		* openwrt
		* linux
		* android



对于芯片是否支持高版本c++, 一般情况下也要看芯片的规格, 还有上面跑什么系统;

是否支持高版本c++, 与芯片架构没有必然关系, 但这里面需要大量c/c++ 编译器程序员去填充, 实现编译工具链, 支持c/c++ 编译器+c/c++ 运行时库;





#
# * 目前市面上, cross交叉编译工具链支持c++的行情分析:
#
其实不用担心太多, 目前新版的cpu 一般都支持c11, 
无论是arm/risc-v 一般都支持c11, 最低也会支持c99!!
cpu 厂商会想尽办法去支持更高级c++ 的, 否则软件市场就会比较狭窄, 很多c++11 的软件没办法移植!! 导致企业用户粘性不高.

你可以参考一下:
	请教一下,海思hi3536的SDK使用C++11的线程,程序运行时提示如下问题.html

海思这种物联网小芯片, 新出的risc-v, 都支持c++11 了, arm 就更不用说了, 一般情况下, 新版的芯片都支持c++11;

如果芯片太小, 不支持, 那再说, 那种一般就不是32bit 芯片, 一般都是8bit 的8051;



不过, 小芯片的资源有限, 有时候不一定会支持c++ 标准库stl 那种狂放的消耗;
对于精简mcu 应用, 一般情况下, 还是会使用比较精简的数据容器的, 因此, 纯c 编写的stl 容器, 仍然是有用的, 别轻易放弃;

虽然现在的小型OS-SDK 不会说很落后, 但仍然会有效率问题, 需要注意高效!!
这些小型芯片, 编写程序就是要非常高效, 代码质量非常高, 否则产品质量会非常堪忧, 高效代码就是mcu 的存在价值;

