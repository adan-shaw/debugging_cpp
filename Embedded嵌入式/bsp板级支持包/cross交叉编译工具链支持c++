#
# * cross交叉编译工具链支持c++的可行性分析:
#
* 直接使用原始gcc 作为编译器的芯片平台:
		一般都是裸片MCU, 这类芯片基本上不支持glibc, 更不可能支持c++;
		(rtos 一般情况下, 也会是32bit 芯片, 这类芯片有支持c++ 的可能, 具体看不同平台的差异;
		 freertos 这种小型rtos, 支持32bit, 但不支持c++;
		 autosar 中间件倒是可以, 支持c++[autosar 也只是一套中间件, 并不是rtos])

* 使用c/c++ 作为编译器的芯片平台:
	* 高级rtos (32 bit 为主)
	* SoC 平台 (32/64 bit 为主)
	注意:
		32bit 的rtos, 这类芯片有支持c++ 的可能, 但基本上支持c++ 的版本不会太新, 而且更新c++ 版本的可能性很低!!
		(不是哪一款都是arm, 有这么大的精力去维护arm 编译器)

* 如果是64 bit 芯片, 一般情况下, 这类芯片上面运行的os 系统, 基本上都支持比较新的c++ 编译工具链, 例如:
		* openwrt
		* linux
		* android

对于芯片是否支持高版本c++, 一般情况下也要看芯片的规格, 还有上面跑什么系统;
(有业务需求, 芯片厂商就会维护c++ 编译器, 也会为芯片加装硬件配置, 以支撑c++ 的运行;
 但这里面需要大量c/c++ 编译器程序员去填充, 实现编译工具链, 支持c/c++ 编译器+c/c++ 运行时库;)





#
# * 目前市面上, cross交叉编译工具链支持c++的行情分析:
#
支持c11:
	目前新版的cpu/mcu 一般都支持c11, 无论是arm/risc-v 一般都支持c11, 最低也会支持c99!!
	cpu/mcu 厂商会想尽办法去支持更高级c++ 的, 否则软件市场就会比较狭窄, 很多c++11 的软件没办法移植!! 导致企业用户粘性不高;

支持c++11:
	你可以参考一下:
		./请教一下,海思hi3536的SDK使用C++11的线程,程序运行时提示如下问题.html
	海思这种物联网小芯片, 新出的risc-v, 都支持c++11 了;
	arm 就更不用说了, 一般情况下, 新版的芯片都支持c++11;
	如果芯片太小, 不支持c++, 那再说(那种一般就不是32bit 芯片, 一般都是8 bit 的8051)

支持c++ 标准容器库stl:
	小芯片的资源有限, 有时候不一定会支持c++ 标准库stl 那种狂放的消耗;
	对于精简mcu 应用, 一般情况下, 还是会使用比较精简的数据容器的, 
	因此, 纯c 编写的stl 容器, 仍然是有用的, 别轻易放弃;

ps:
	虽然现在的小型OS-SDK 不会说很落后, 但仍然会有效率问题, 需要注意高效!!
	这些小型芯片, 编写程序就是要非常高效, 代码质量非常高, 否则产品质量会非常堪忧, 高效代码就是mcu 的存在价值;



