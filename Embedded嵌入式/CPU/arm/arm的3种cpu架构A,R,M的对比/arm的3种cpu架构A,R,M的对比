#
# 1.ARM 芯片架构的发展历史
#
ARM公司自2004年推出'ARMv7架构'时, 摒弃了以往"ARM+数字"这种处理器命名方法;
ARM11 之前的处理器, 统称经典处理器系列;
ARM11 之后的处理器, 启用Cortex来命名;
(标志着ARM 公司正式进军'高端实时MCU'和'高端分时高频cpu', 摆脱'低级实时MCU'的第一步)

以Cortex-M系列微处理器为例:
	Cortex-M1 大于ARM11, ARM11=arm-v6架构, Cortex-M1=arm-v7架构;



新一代ARM 处理器, 启用Cortex来命名, 并将Cortex系列为三大类: 
	Cortex-A系列: 
		面向性能密集型系统的应用处理器内核(手机, 路由器用到的高频分时cpu, 主打频率高, 软件多, 指令集多)

	Cortex-R系列: 
		面向实时应用的高性能内核(车载autosar 用到的高规格MCU, 性能超强的'高级实时芯片')

	Cortex-M系列: 
		面向各类嵌入式应用的微控制器内核(物联网用到的'低级实时MCU')
		Cortex-M 系列主要是用来取代经典处理器ARM7系列(比如基于ARMv4架构的ARM7TDMI), 
		Cortex-M 比ARM7 的架构高了3代, 性能也有较大提升;
		ps:
			Cortex-M系列的芯片, 没有MMU(内存管理单元), 只能叫做MCU(微控制器), 不能运行诸如Linux、WinCE等这些现代的多用户多进程操作系统;
			(这些操作系统都需要使用虚拟内存地址, 内存分页等信息安全特性, 
			 这些系统需要MMU, 才能给每个用户进程分配进程自己独立的地址空间)
			但可以运行多款rtos 实时系统!!
			ucOS、ucLinux这些精简实时的RTOS不需要MMU, 当然可以在ARM7上运行;

		ARM7、ARM9、ARM11, 与Cortex 系列的区别:
			ARM7 = ARMv4架构(没有MMU 内存管理单元)
			ARM9 = ARMv5架构(没有MMU 内存管理单元) 
			ARM11 = ARMv6架构(没有MMU 内存管理单元)
			Cortex-M系列: 'ARMv7架构'(没有MMU 内存管理单元)





#
# 2.Cortex系列的详解
#
Cortex-A处理器
	Application Processors(应用处理器)面向高端智能手机、电视、服务器等市场的高端处理器; 
	Cortex-A处理器运行在超过1GHz时钟频率, 支持Linux, Android,  Windows, iOS等操作系统的复杂应用; 
	这些应用需要强大的处理能力, 支持存储管理单元MMU等虚拟存储系统, 可选的增强java支持和安全的程序执行环境; 

Cortex-R处理器
	Real-time Processors (实时处理器)面向实时应用的高性能处理器系列, 例如: 硬盘控制器, 汽车传动系统和无线通讯的基带控制; 
	多数Cortex-R实时处理器不支持MMU, 不过通常具有MPU、Cache和其他针对工业应用设计的存储器功能; 
	实时处理器运行在比较高的时钟频率(例如200MHz 到 >1GHz ), 响应延迟非常低, 支持FreeRTOS, UCOS等大量的实时操作系统(RTOS); 

Cortex-M处理器
	Microcontroller Processors(微控制器处理器), 微控制器处理器通常设计成面积很小和能效比很高; 
	通常这些处理器的流水线很短, 最高时钟频率很低(100Mhz左右); 
	新的Cortex-M处理器家族设计的非常容易使用; 
	ARM 微控制器处理器特别适合低功耗应用和物联网应用; 





#
# 3.关于ARM 芯片是哈佛-架构, 还是冯诺尔曼-架构的争论
#
ARM 芯片是哈佛-架构, 还是冯诺尔曼-架构, 主要看场合:
	* 如果是实时应用, Cortex-R处理器/Cortex-M处理器, 大概率是哈佛-架构, 以提高其CPU 运算实时性, 
		无论指令读取, 还是数据读取都是双线同步, 提高实时性;

	* 如果是分时应用, Cortex-A处理器, 大概率是冯诺尔曼-架构, 以提高其CPU 的高性能复杂运算能力;

	关于这个问题, 其实没有什么好争论的, ARM 芯片设计商, 通过调整CPU 架构来实现CPU 的功能而已,
	是哈佛-架构, 还是冯诺尔曼-架构, 问题都不大!! 不影响你的使用;







