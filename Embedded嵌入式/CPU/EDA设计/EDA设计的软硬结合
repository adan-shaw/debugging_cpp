单纯的cpu 硬件设计, 就是: 芯片设计, 包括指令集设计, 芯片架构设计, 芯片功耗设计, 芯片制程等等, 这些都是偏硬件设计;

但实际上, 芯片行业如果单纯做硬件设计, 最后都比较悲剧:
	20年前, intel 市值3000 亿美元, 微软市值6000 亿美元, nvidia 40亿美元;
	今天, intel 市值3000 亿美元, 微软市值2w 亿美元, nvidia 6000亿美元;
	这样一对比, intel 似乎做了车间主任了;

所以有时候, 不是你做得不够优秀, 而是市场现实, 具体商业分析, 不便透露, 但: 
	nvidia 给人们提供了一个非常好的软硬结合的可行方案, 让芯片公司可以实现产能保值的方案;
	nvidia 比较出名的就是cuda 软件库, 算法加速库;
	intel 近些年, 也搞了一个dpdk 算法加速库, 但可能产值比较低, 只能做高性能防火墙, 没有人工智能硬件加速市场火热;



总的来说, EDA 设计的软件部分, 就是EDA 设计的护城河!!

只有软硬结合的产品, 才会在时代的潮流中, 屹立不倒!!



EDA 设计的软件部分:
	* kernel, windows/linux/freebsd OS内核;
	* 芯片驱动
	* gcc/clang 编译器
	* glibc/llvm c/c++ 运行时库

	* 最终的跨平台算法加速软件库!!
		(前面的三项, 都是为了支撑最后一步, 算法硬件加速库!! 买芯片, 就是高速运算的, 软件, 硬件搭配销售, 才能真正保值, 也不容易被时代淘汰)



要实现一个芯片硬件算法加速软件库(能不能跨平台另外再说), 就离不开dll/so 动态链接库的封装, 还有:
	编译选项的新增, 
	编译器解析, 
	编译优化, 
	kernel 改造, 
	芯片驱动, 
	芯片驱动与算法加速库联动
	...

最终完成软硬结合, 这样操作系统商, app 应用软件商, 就可以直接调用你的硬件加速接口, 这样才会让软件市场的代码, 一直保留自己的设计痕迹, 不至于u被市场淘汰;


