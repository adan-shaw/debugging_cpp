bsp的主要功能:
	bsp主要功能为屏蔽硬件, 提供操作系统及硬件驱动, 具体功能包括:
		1.单板硬件初始化, 主要是CPU的初始化, 为整个软件系统提供底层硬件支持
		2.为操作系统提供设备驱动程序和系统中断服务程序
		3.定制操作系统的功能, 为软件系统提供一个实时多任务的运行环境
		4.初始化操作系统, 为操作系统的正常运行做好准备



bsp的作用:
	建立让操作系统运行的基本环境:
		1、初始化CPU内部寄存器
		2、设定RAM工作时序
		3、时钟驱动及中断控制器驱动
		4、串口驱动

	完善操作系统运行的环境:
		1、完善高速缓存和内存管理单元的驱动
		2、指定程序起始运行位置
		3、完善中断管理
		4、完善系统总线驱动



bsp定义:
	硬件层与软件层之间为中间层, 也称为:
		硬件抽象层(Hardware Abstract Layer, HAL)
		板级支持包(Board Support Package, bsp)
	它将系统上层软件与底层硬件分离开来, 使系统的底层驱动程序与硬件无关, 
	上层软件开发人员无需关心底层硬件的具体情况, 根据bsp层提供的接口即可进行开发.
	该层一般包含相关底层硬件的初始化、数据的输入/输出操作和硬件设备的配置功能.



bsp具有以下两个特点:
	硬件相关性:
		因为嵌入式实时系统的硬件环境具有应用相关性, 
		而作为上层软件与硬件平台之间的接口, bsp需要为操作系统提供操作和控制具体硬件的方法.

	操作系统相关性:
		不同的操作系统具有各自的软件层次结构, 
		因此, 不同的操作系统具有特定的硬件接口形式.
		实际上, bsp是一个介于操作系统和底层硬件之间的软件层次, 包括了系统中大部分与硬件联系紧密的软件模块.





bsp和PC机主板上的BIOS区别
	其实PC机上的windows或linux系统, 也是有bsp的.
	只是PC机均采用统一的X86体系架构, bsp 体系和嵌入式系统有一定区别;

	bsp和PC机主板上的BIOS区别很大:
		BIOS主要是:
			负责在电脑开启时检测、
			初始化系统设备(设置栈指针, 中断分配, 内存初始化...)、
			装入操作系统并调度操作系统向硬件发出的指令, 
		它的Firmware代码是在芯片生产过程中固化的, 一般来说用户是无法修改.
		其实是为下载运行操作系统做准备, 把操作系统由硬盘加载到内存, 并传递一些硬件接口设置给系统.
		在OS正常运行后, BIOS的作用基本上也就完成了, 这就是为什么更改BIOS一定要从新关机开机.

		bsp是和操作系统绑在一起运行在主板上的, 
		尽管bsp的开始部分和BIOS所做的工作类似, 
		可是大部分和BIOS不同, 作用也完全不同.
		此外bsp还包含和系统有关的基本驱动(串口, 网口...), 
		此外程序员还可以编程修改bsp, 在bsp中任意添加一些和系统无关的驱动或程序, 
		甚至可以把上层开发的统统放到bsp中;

	总结:
		实际上bsp 就是主板bios, 只不过功能更多而已, 而且可以根据需求进行修改, 新增(主要是新增驱动和软件);
		现在的PC 智能bios, 也有网卡驱动和管理软件, 方便提供联网更新和bios 管理;

		但由于bsp 一般用在小型芯片上面, 部分小型芯片, bsp 即操作系统, 所以会有更多软件集成到bsp 上面而已;





bsp 开发意思就是:
	给你一块电板, 把linux/openwrt/qnx/VxWorks/RT-Thread所需的一切, 都搭建上去;
	包括:
		kernel 系统内核适配
		driver 设备驱动适配 && 编写
		c/c++ 编译工具链, 编译依赖库的移植
		disk文件系统, 网络协议栈, 进程管理器(包括内存管理器)的重建
		镜像固件烧写工具&&引导重建
		* 基础支撑软件的实现 *(这个不一定是必要的, 具体看需求)

	注意:
		不同系统的bsp 实现是不一样的, 复杂的地方就在这里;
		当然linux 系统规模最大, linux bsp 应该是最复杂的, 但linux bsp 现成的方案很多, 可供参考的很多,
		小型系统虽然规模小, 但要自己适配的场合更多;

	ps:
		android 也是基于Linux 的, 做bsp 支持, 基本上也是做linux bsp 支持;
		只不过android 规模太大, android 文件系统重建, 进程管理, 内存管理, jdk 重建, 基本上都是由偏软件的bsp 软件系统程序员实现的(也叫操作系统重建);





bsp 和SDK 的区别, 为什么会有bsp 大厂提供SDK:
	实际上当一个操作系统商, 发布一款操作系统的时候, 会提供该款操作系统的编程SDK 给bsp 开发的程序员使用;
	这些SDK, 一般只有一层, 只有linux 这样的大型系统, 才会把SDK 分成:
		内核态SDK
		用户态SDK

	一般来说, 实时系统如qnx/VxWorks/RT-Thread, 基本上只有一套SDK, 这套SDK 也是内核态的, 以提高系统实时性;
	linux/android/openwrt 这种大, 中型系统, 会有两套SDK,
	不过android, openwrt 都移植了虚拟机到系统中, 这两个系统不一定支持glibc, bsd-libc,
	但一定支持Linux 内核编码, 因为都是基于/仿照linux 实现的内核(openwrt 是根据linux 内核进行仿照重写的);
	因此, 这两个系统可能不支持posix API, 但会支持java/lua 虚拟机API, 这实际上也是一种SDK, 只不过是脚本SDK而已;

	想要移植posix API, 其实是有难度的!!
	(不要抱有幻想, 只有linux 支持比较多, android/openwrt 可能都不支持posix API)

	因此, bsp 是bsp, SDK 是SDK, 两个完全不同的概念;


