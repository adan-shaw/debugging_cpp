声明:
	大部分嵌入式芯片, 都不具备跑linux 系统的条件;
	最低, 最低, 也要是openwrt 那种规格, 具备64MB 内存, 至少32 MB内存, 才能跑一个改造过的linux 压缩内核;
	ps:
		openwrt 使用的是uclibc 运行时库, 重编linux 内核, 并不是glibc 运行时库;


	因此, 通常情况下, 嵌入式芯片, 内存只有几百KB, 2MB 以下的芯片, 基本上都是跑小型实时系统, 如: RT-Thread, μClinux等;
	但由于openwrt 是一个分时系统, 网络系统, 这里不做深究, 只做对比;

	这种小型系统, 也有进程线程概念, 也有tcp/ip 协议栈, fs文件系统, 三大操作系统基础组件;
	但详细有多少内容, 不得而知,
	具体不可能完全支持posix 线程库, 也不可能完整支持tcp/ip 协议栈, 或者fs文件系统,
	一般情况下, 只有一种, 两种使用选择而已, 能凑合着用, 写出'可调度多线程/进程的网络程序', 已经可以满足设计需求了;

	具体每种嵌入式实时系统, 支持什么样的功能, 支持什么样的API, 支持什么样的组件, 你得去对应的官网详细了解一下才行;
	这些API 都是OS 作者自己实现的, 接口不一定都是posix 标准, 不一定都是Linux 标准;
	但肯定会根据tcp/ip 协议标准, 封装协议栈AF_INET/AF_INET6;
	但肯定会根据can 协议标准, 封装AF_CAN;
	肯定会...

	至于多线程/多进程/fs文件系统的实现, 这方面看OS 作者自己的想法, 他是怎样实现的, 你就得怎样用;
	但一般都以posix 标准去实现, 比较符合行业规定, OS 作者也会优先考虑向posix 标准看齐;


	由于cpu芯片设计限制, 看一块芯片, 是否支持'多线程/多进程',
	主要看芯片是否有MMU, 也即存储管理单元, 
	如果没有MMU存储管理单元, 就没办法简历虚拟内存, 只能使用直写内存;
	'实时系统-RTOS类/实时系统-非RTOS类的最小型系统', 能不能支持直写内存, 需要详细阅读一下os系统官网的信息, 才知道;








常见的嵌入式系统:
	分时系统-openwrt:
		具备完整的AF_INET/AF_INET6 协议栈(应用级), 
		具备常见的多线程/多进程能力, 
		具备较为完整的linux 内核, 可以支持设备驱动二次开发, 也支持软件'驱动'如iptables 防火墙等二次开发;
		(堪称小型linux, 与普通pc 无异, 差异不算很大)



	实时系统-RTOS类:
		RT-Thread:
			RTOS的一种, 具备一个IoT OS平台所需的所有关键组件, 例如GUI、网络协议栈、安全传输、低功耗组件等等, 
			是一个组件完整丰富、高度可伸缩、简易开发、超低功耗、高安全性的物联网操作系统


		μClinux:
			RTOS的一种, 继承了Linux操作系统的主要特性, 
			包括良好的稳定性和移植性、强大的网络功 能、出色的文件系统支持、标准丰富的API, 以及TCP／IP网络协议等.
			因为没有MMU内存管理单元, 所以其多任务的实现需要一定技巧.


		VxWorks:
			RTOS的一种, 具有一个高性能的操作系统内核Wind(实时性好、可裁减)友好的开发调试环境、较好的兼容性、支持多种开发和运行环境;
			支持可预测的任务同步机制、支持多任务间的通信、存储器优化管理、操作系统的(中断延迟、任务切换、驱动程序延迟等)行为是可知的和可预测的.
			实时时钟服务+中断管理服务.


		Huawei LiteOS: 
			RTOS的一种, 面向IoT领域, 构建的轻量级物联网操作系统, 
			以轻量级低功耗、快速启动、互联互通、安全等关键能力, 为开发者提供"一站式"完整软件平台;


		ROS:
			一个面向机器人的开源的元操作系统(meta-operating system),
			提供类似传统操作系统的诸多功能:硬件抽象、底层设备控制、常用功能实现、进程间消息传递、程序包管理等.
			并且提供相关工具和库, 用于获取、编译、编辑代码以及在多个计算机之间运行程序完成分布式计算.



	实时系统-非RTOS类的最小型系统:
		RTOS需占用一定的系统资源(尤其是RAM资源),
		只有μC／OS-II、embOS、salvo、FreeRTOS等少数实时操作系统能在小RAM单片机上运行;


		μC／OS-II:
			μC／OS-II是在μC/OS的基础上发展起来的, 是用C语言编写的一个结构小巧、抢占式的多任务实时内核.
			μC／OS-II能管理64个任 务, 并提供任务调度与管理、内存管理、任务间同步与通信、时间管理和中断服务等功能, 
			具有执行效率高、占用空间小、实时性能优良和扩展性强等特点.


		FreeRTOS:
			相对于C／OS-II、 embOS等商业操作系统, 
			FreeRTOS操作系统是完全免费的操作系统, 具有源码公开、可移植、可裁减、调度策略灵活的特点, 
			可以方便地移植到各种单片机上运行, 
			FreeRTOS提供的功能包括:
				任务管理、时间管理、信号量、消息队列、内存管理、记录功能等, 可基本满足较小系统的需要.

			FreeRTOS内核支持优先级调度算法, 每个任务可根据重要程度的不同被赋予一定的优先级, CPU总是让处于就绪态的、优先级最高的任务先运行.
			FreeRT0S内核同时支持轮换调度算法, 系统允许不同的任务使用相同的优先级, 在没有更高优先级任务就绪的情况下, 同一优先级的任务共享CPU的使用时间.

			FreeRTOS的不足:
				相对于常见的μC／OS—II操作系统, FreeRTOS操作系统既有优点也存在不足.
				其不足之处,  一方面体现在系统的服务功能上, 
				如FreeRTOS只提供了消息队列和信号量的实现, 无法以后进先出的顺序向消息队列发送消息;
				另一方 面, FreeRTOS只是一个操作系统内核, 
				需外扩第三方的GUI(图形用户界面)、TCP／IP协议栈、FS(文件系统)等才能实现一个较复杂的系统, 
				不像μC／OS-II可以和μC／GUI、μC／FS、μC／TCP-IP等无缝结合.


