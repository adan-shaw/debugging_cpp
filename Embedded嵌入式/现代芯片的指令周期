现代的主控芯片CPU, 执行一个指令需要多少个机器周期?
答:
	现代的主控芯片CPU, 基本上都采用多级指令流水线设计, 跟旧时代的8051 有比较大的差异;
	例如:
		在ARM7中有3级流水线,     "取指令------>译码(分析是哪条指令)-------->执行"
		在ARM9中有5级流水线,     "取指令------>译码---------------------->执行-------->LS1----->LS2"
		在S5PV210中有13级流水线, "取指令------>译码---------------------->执行......"



	无论再先进的cpu, 都至少需要'取指令+译码+执行' 这三步, 也就是至少需要3 个时钟周期;
	而8051 单片机, 一个机器周期 = 12个时钟周期(这相当慢了, 有可以提升的空间);
	也就是说, 现代cpu 可以将单机器周期, 从12 个时钟周期, 压缩为3 个始终周期;

	现代的cpu 基本都有'指令预取机制', 
	即cpu 运行一个函数, 首先初始化所有变量, 
	然后再执行预取, 只有碰到if/while/for/switch 等逻辑判断语句的时候, 才会中断'指令预取机制';
	这种'指令预取机制', 相当于有多个取指器, 可以压缩'取指令+译码+执行' 这三步, 实现一步运行, 一个时钟周期!!
	(但需要程序员配合, 才能正确使用, 编写程序时, 要有编写规范才能用)



	不同的指令, 机器周期不一样, 例如加法指令, 赋值指令, 是1个机器周期, 乘法指令, 是3个机器周期;
	dsp 就是将乘法指令, 压缩成1 个周期;
	相信大型的现代cpu, 基本上都可以模仿dsp, 将大部分指令, 压缩到1个机器周期, 以提高cpu运算效率;
	(一般可以安装Linux 的大型cpu 都会这么干)

	一般可以安装Linux 的大型cpu, 为了更好地兼容c/c++ 编程,
	所以这种大型cpu 不可能把所有的指令, 都压缩到1个机器周期(为了兼容c/c++ 编程逻辑),
	所以, 集成新的指令集, 提高cpu 运算效率, 也成为提高'大型cpu性能'的关键因素之一;



	总结:
		现代cpu 执行一个指令需要多少个机器周期?
			* '取指令+译码+执行' 这三步, 如果'指令预取机制'生效, 则只需一个机器周期;
			* 将所有指令, 都集成专用的指令集, 压缩成统一: 一个机器周期, 一个指令;

		如果这两个都没问题, 那么cpu 执行一个指令, 只需一个机器周期;





时钟周期、机器周期、指令周期:
	时钟频率:是指为单片机提供时钟信号的振荡源的周期(也叫时钟周期), 
					当采用12MHz晶振时, 一个振荡周期是1/12M秒(1/12000000s);
	机器周期:对于标准51架构而言, 1个机器周期为12个时钟振荡周期, 即1微秒;
					具体计算为:时钟周期 X cycles。如果单片机是12T的话, 那么机器周期就是时钟周期×12;
	指令周期:执行一条指令的时间, 是机器周期的倍数。不同的CPU, 执行不同的指令, 所需要的指令周期不同;


