freertos 简介:
	freertos 是一个粒度范围, 规模比rt-thread 更大的系统, 
	freertos 可以一个系统兼容8/32 bit, 但基本上freertos 也是跑在32bit 芯片上面的, freertos 跑在8 bit 芯片上面, 意义不大;
	(一般跑在8bit 芯片上面的, 都是'ucosii/ucosiii')

	freertos 跑在8 bit 芯片上面, 并没有什么优势, 因此, freertos 也算是32bit 的rtos, 跟rt-thread 类似;



	freertos 和rt-thread 都支持多线程模式的, 也就是可以创建简单的线程执行任务, 完美支持SMP 对称多核32 bit 芯片;



	freertos / rt-thread 都是比较成熟的rtos 系统, 有较多的开发配套方案, 而且技术成熟;
	但是面对近年来新崛起的rtos, 还有新型物联网, 供电网, 新能源, 海陆空装备, 卫星, 机器人, 智能电话, IPC 摄像头, 等等新需求,
	老式的rtos 也面临着巨大的技术冲击,
	新型的rtos 如潮水般涌来, 更多专用新需求, freertos / rt-thread 都将面临新的考验!!



	事实上, freertos 的规模比较大, 比较老, 比较成熟, 配套多;
	但rt-thread 的好处是: 纯国产的系统, 自主化程度高, 规模不小, 比较成熟, 配套也多;





支持8bit 芯片的rtos:
	* ucosii
	* ucosiii
	* freertos(不推荐, 性能较差, 吃力)





freertos 的代码风格:
	freertos 一般适用于低级MCU, 不带界面, 不带USB, 不带文件系统的应用场景!!
	(单片机风格, 单片机管理, 直接一个文件夹一个主板的风格, 跟单片机keil 软件很像, 支持的主板也很多, 主板差异性太大, 也是没办法)

	nuttx 一般适用于高级MCU, 带界面, 带USB, 带文件系统的应用场景!!
	(接近linux, 风格更像linux, 对高级程序员非常友好)

	freertos-plus 可以挽留一部分应用场景, 部分高级一点的物联网MCU, 也可以用(信息安全);
	(freertos 低级版kernel, 一般用于工控的应用场景, 或者低级dsp 电源之类的, 根本不需要考虑通信, 信息安全, 只需要考虑工控即可)

	但核心部分: 带界面, 带USB, 带文件系统的应用场景, freertos 表示无能为力!!
	只要是这种高级MCU 的应用场景, 必须是nuttx!!



ROM/RAM 体积:
	RTOS 内核二进制映像通常介于6K 到 12K 字节之间; 
	nuttx 最小运行体积是: 16K/32K





