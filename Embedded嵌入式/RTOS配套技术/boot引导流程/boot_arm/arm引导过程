1.在arch级初始化
_start---->reset(关闭中断) ['arm主板复位'会重定向到这里]
.....|
.....----->cpu_init_cp15(关闭MMU,TLB)
.....|
.....----->cpu_init_crit,lowlevel_init(关键寄存器的配置和初始化)
.....|
.....----->_main(进入'板级初始化')





2.板级初始化的流程
_main----->board_init_f_alloc_reserve(堆栈、GD、early malloc空间的分配)
....|
.....----->board_init_f_init_reserve(堆栈、GD、early malloc空间的初始化)
....|
.....----->board_init_f(uboot relocate前的板级初始化以及relocate的区域规划)
....|
.....----->relocate_code,relocate_vectors(进行uboot和异常中断向量表的重定向)
....|
.....----->旧堆栈的清空
....|
.....----->board_init_r(uboot relocate后的板级初始化)
....|
.....----->run_main_loop(进入命令行状态, 等待终端输入命令以及对命令进行处理)





3.U-Boot工作过程
	大多数Boot Loader 都包含两种不同的操作模式(这种区别仅对于开发人员才有意义):
		* "启动加载"模式
		* "下载"模式

	但从最终用户的角度看, Boot Loader 的作用就是:
		用来加载操作系统
	而并不存在所谓的启动加载模式, 与下载工作模式的区别; 


	(一)启动加载(Boot loading)模式:
		这种模式也称为"自主"(Autonomous)模式; 
		也即Boot Loader 从目标机上的某个固态存储设备上将操作系统加载到RAM 中运行, 整个过程并没有用户的介入; 
		这种模式是Boot Loader 的正常工作模式,
		因此在嵌入式产品发布的时侯, Boot Loader 显然必须工作在这种模式下; 

	(二)下载(Downloading)模式:
		在这种模式下, 目标机上的Boot Loader 将通过串口连接或网络连接等通信手段从主机(Host)下载文件, 比如:
			下载内核映像和根文件系统映像等; 
		从主机下载的文件通常首先被Boot Loader保存到目标机的RAM 中, 然后再被BootLoader 写到目标机上的FLASH类固态存储设备中; 
		Boot Loader 的Downloading 模式通常在第一次安装内核与根文件系统时被使用;
		(系统更新也会使用Downloading 模式/嵌入式系统调试时, 一般也工作在Downloading 模式下)

		Downloading 模式下的Boot Loader, 通常都会向它的终端用户提供一个简单的命令行接口; 


	U­Boot 这样功能强大的Boot Loader 同时支持这两种工作模式, 而且允许用户在这两种工作模式之间进行切换; 
	大多数 bootloader 都分为阶段1(stage1), 阶段2(stage2)两大部分, u­boot 也不例外; 
	依赖于CPU 体系结构的代码(如CPU 初始化代码等)通常都放在'阶段1'中, 且通常用汇编语言实现;
	而'阶段2'则通常用C 语言来实现, 这样可以实现复杂的功能, 而且有更好的可读性和移植性; 





4.U-Boot启动内核的过程可以分为两个阶段, 两个阶段的功能如下: 

	(1)第一阶段的功能
		Ø 硬件设备初始化
		Ø 加载U-Boot第二阶段代码到RAM空间
		Ø 设置好栈
		Ø 跳转到第二阶段代码入口
	(2)第二阶段的功能
		Ø 初始化本阶段使用的硬件设备
		Ø 检测系统内存映射
		Ø 将内核从Flash读取到RAM中
		Ø 为内核设置启动参数
		Ø 调用内核

	* 代码真正开始是在_start, 设置异常向量表, 这样在cpu发生异常时就跳转到/arch/arm/lib/interrupts中去执行相应得中断代码; 
	* 在interrupts文件中大部分的异常代码都没有实现具体的功能, 只是打印一些异常消息, 其中关键的是reset中断代码, 跳到reset入口地址; 
	* reset复位入口之前有一些段的声明; 

	因为我们用的是cortex-a8 的cpu 架构, 在CPU复位后从iROM地址0x00000000取它的第一条指令, 
	执行iROM代码的功能是把flash中的前16K的代码加载到iRAM中, 系统上电后将首先执行u-boot 程序; 

	1.stage1: 
			cpu/arm_cortexa8/start.S
	2.stage2: 
			当系统启动时, ARM CPU 会跳到 0x00000000去执行,一般 BootLoader 包括如下几个部分: 
			1> 建立异常向量表
			2> 显示的切换到 SVC 且 32 指令模式
			3> 设置异常向量表
			4> 关闭 TLB, MMU, cache, 刷新指令 cache 数据 cache
			5> 关闭内部看门狗
			6> 禁止所有的中断
			7> 串口初始化
			8> tzpc(TrustZone Protection Controller)
			9> 配置系统时钟频率和总线频率
			10> 设置内存区的控制寄存器
			11> 设置堆栈
			12> 代码的搬移阶段
			13> 跳到 C 代码部分执行

			代码的搬移阶段: 
				为了获得更快的执行速度, 通常把stage2加载到RAM空间中来执行, 
				因此必须为加载Boot Loader的stage2准备好一段可用的RAM空间范围; 
				空间大小最好是memory page大小(通常是4KB)的倍数, 一般而言, 1M的RAM空间已经足够了; 

	flash中存储的u-boot可执行文件中, 代码段、数据段以及BSS段都是首尾相连存储的, 
	所以在计算搬移大小的时候就是利用了用BSS段的首地址减去代码的首地址, 这样算出来的就是实际使用的空间; 

	程序用一个循环将代码搬移到0x81180000, 即RAM底端1M空间用来存储代码; 
	然后程序继续将中断向量表搬到RAM的顶端; 
	由于stage2通常是C语言执行代码, 所以还要建立堆栈去; 
	在堆栈区之前还要将malloc分配的空间以及全局数据所需的空间空下来, 他们的大小是由宏定义给出的, 可以在相应位置修改; 



