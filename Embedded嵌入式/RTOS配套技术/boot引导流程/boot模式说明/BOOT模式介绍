所谓boot 引导, 一般来说就是:
	我们下载好程序到Flash 后, 重启芯片时(复位), SYSCLK的第4个上升沿, BOOT引脚的值将被锁存; 
	用户可以通过设置BOOT1 和BOOT0 引脚的状态, 来选择在复位后的启动模式; 



复位后的三种启动模式:
	* Main Flash memory(Flash主闪存-寄存器):
		是STM32内置的Flash, 一般我们使用JTAG或者SWD模式下载程序时, 就是下载到这个里面, 重启后也直接从这启动程序; 

	* System memory(ISP:In-System Programming, 系统存储器):
		从系统存储器启动, 这种模式启动的程序功能是由厂家设置的(这种启动方式用的比较少); 
		系统存储器是芯片内部一块特定的区域, STM32在出厂时, 由ST在这个区域内部预置了一段BootLoader, 也就是我们常说的ISP程序, 这是一块ROM(出厂后无法修改);
		一般来说, 我们选用这种启动模式时, 是为了从串口下载程序, 
		因为在厂家提供的BootLoader中, 提供了串口下载程序的固件, 可以通过这个BootLoader将程序下载到系统的Flash中; 
		但是这个下载方式需要以下步骤: 
			Step1: 将BOOT0设置为1, BOOT1设置为0, 然后按下复位键, 这样才能从系统存储器启动BootLoader;
			Step2: 最后在BootLoader的帮助下, 通过串口下载程序到Flash中;
			Step3: 程序下载完成后, 又有需要将BOOT0设置为GND, 手动复位, 
						 这样, STM32才可以从Flash中启动可以看到, 
						 利用串口下载程序还是比较的麻烦, 需要跳帽跳来跳去的, 非常的不注重用户体验; 

	* Embedded Memory(内置SRAM):
		既然是SRAM, 自然也就没有程序存储的能力了, 这个模式一般用于程序调试; 
		假如我只修改了代码中一个小小的地方, 然后就需要重新擦除整个Flash, 比较的费时, 
		可以考虑从这个模式启动代码(也就是STM32的内存中), 用于快速的程序调试, 
		等程序调试完成后, 在将程序下载到SRAM中; 



总的来说: 
	个人觉得就是三种存储形势的启动模式:
		Flash = Main Flash memory、
		ROM = System memory、
		RAM = Embedded Memory、

	Main Flash memory(Flash)最常用;
	Embedded Memory(RAM)掉电丢失数据, 不稳定;
	System memory(ROM)触发引脚最麻烦; 



