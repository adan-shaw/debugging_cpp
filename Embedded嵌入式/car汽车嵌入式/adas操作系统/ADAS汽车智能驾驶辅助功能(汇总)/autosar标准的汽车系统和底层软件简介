ADAS汽车智能驾驶辅助功能开发, 常见的技术简介:

	car智能驾驶辅助系统(人工智能):
		自动驾驶AI, 一般分为: L2 L3 L4 等级, 等级越高, 自动驾驶AI 越强大(功能越多, 可靠性未知)
		常见的car智能驾驶辅助系统(人工智能)平台有:
			Apollo
			Momenta
			...



	car智能驾驶解决方案(ap-autosar中间件平台):
		这种中间件平台, 一般是做数据通信, 主要做工业总线管理调度的;
		这种中间件平台, 一般是一个以太网程序群, 跟互联网差不多, 只不过是实时的而已;
		其实和互联网的系统, 并没有太大区别, 也是分布式的, 相当于一个小型局域网实时系统(只不过是实时系统的而已)

		目前中间件平台, 主要有:
			AUTOSAR 标准的中间件平台(很出名), 基于AUTOSAR 标准实现的方案有:
				adaptive autosar(AP-AUTOSAR):
					德国推出的汽车专用的AUTOSAR 中间件解决方案;
					AP -- 偏向于Soc 硬件平台(一般在RTE之上, 应用层), 一般常见于整车系统集成, 这个是未来的方向, 因为芯片工艺会越来越好;

				classic platform autosar(CP-AUTOSAR):
					CP -- 偏向于MCU(也叫BSW层, 在RTE之下, MCU之上), 一般是MCU 供应商常用的, 去迎合AUTOSAR 做的;
					也有基于CP-AUTOSAR, 自己实现的AUTOSAR 中间件解决方案;

			ROS2:
				从机器人演变过来的实时工业系统, 根据汽车行业的要求, 进行二次改造的系统(旧版ROS1 不适合汽车行业);
				常见的改造: DDS/SomeIP 等协议栈改造;

			Cyber RT:
				百度Apollo 开发的中间件, 对Apollo 智能自动驾驶框架, 有特殊优化;
				(Cyber RT 是百度自己搞的, 旧版Apollo 使用基于ROS1 改造的系统, 后期自研出Cyber RT[也有可能是基于ROS2的])

			Autoware 系列软件:
				世界上第一个自动驾驶all-in-one的开源软件, 基于Apache2协议, 在ROS机器人操作系统基础上开发而来;
				主要有Autoware.ai、Autoware.Auto、Autoware.Universe三个版本;
				(目前, Autoware已经推出了基于ROS2的 Autoware.Auto)
		ps:
			中间件实际上是一个软件app 群, daemon server 群(后台程序群), 为自动驾驶软件提供通讯和资源管理的服务;



	car汽车操作系统:
		QNX, Linux, VxWorks(少用)
		但由于Linux 默认是一个并行异步服务器系统, 实时性不高,
		如果选定linux 作为汽车操作系统, 必须进行实时性增强剪裁/改造, 需要重新编译linux 内核!!
		目前大部分车企, 都会用QNX, 因为比较成熟, 而且费用不高;
		使用Linux 作为汽车操作系统, 需要改造的地方很多, 而且改造之后可靠性不一定很强, 
		但也有好处: 
			有大量的软件可供修改, 可供使用, 可供参考的软件很多(需要也要从异步软件改为强实时软件, 但可参考的软件库很大, 很多, 也不错);

		一般地:
			adaptive autosar支持:         QNX, Linux
			classic platform autosar支持: QNX, Linux
			ROS2/Cyber RT/Autoware支持:   Linux



	car传感器&MCU(cp-autosar):
		摄像头(自动驾驶/车辆防盗监控摄像头)
		微波雷达(放碰撞)
		CAN 系列的车辆底盘总线
		各种设备MCU
		...



	SOA面向服务设计:
		互联网常见的都是面向对象设计, 汽车行业比较多的就是面向服务设计, 即一个服务解决一个功能问题;
		这方面跟操作系统, 跟QNX 也有很大的关系(跟实时性要求也有很大关系)
		操作系统本身的设计, 就是面向对象服务设计, 比如说: 操作系统大量的服务, 都是通过daemon server 来实现的;
		(但操作系统同时支持大量非daemon server 的工具, 还有客户端app)
		QNX 系统, 是小内核, 驱动&应用等价处理的强实时系统, 这种系统也是面向服务设计的, 一个驱动, 一个应用, 都是一个daemon server, 一个服务;



	realtime工业总线:
		AF_CAN:can
		AF_CAN:canfd
		AF_CAN:CANopen
		AF_CAN:lin

		DDS协议 (常见的DDS 中间件框架: fastDDS/openDDS)
		SOMEIP协议

		EtherCAT
		EtherNET










