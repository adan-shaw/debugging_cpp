1.车载多媒体数据流分析:
	* 坐舱音乐/电影, 数据流走向是: 
		- disk to tbox-android, 本地file(不需要网络)
		- 5G network to tbox-android, 网络点播(走5G network 线路)

	* 行车记录仪, 数据流走向是: 
		camera to disk, 独立线路, 独立系统, 不属于车载系统的一部分, 不占用车载ETH 网络, 不会占用网络带宽/系统资源;
		(行车记录仪一般是android/linux/rtos 系统+软件);

	* 自动驾驶摄像头, 数据流走向是: 
		camera to qnx/ros/linux 的子虚拟机(一般是linux 系统);





2.自动驾驶摄像头的数据流走向:
	自动驾驶摄像头数据是多媒体数据, 数据流量较大较重, 一般不通过ETH 网络传递, 更不可能会通过vsomeip/fastdds/opendds 框架传递!!
	(数据流太大, 负担不起, 也没有必要, vsomeip/fastdds/opendds 主要复杂高速控制信号的传输);

	但一般情况下, 由于自动驾驶系统的摄像头数据比较重要, 影响着自动驾驶的行驶路径, 轨迹, 甚至是紧急事件, 特发事件;
	如果自动驾驶的过程中, 黑客突然把摄像头弄黑, 可能导致自动驾驶系统崩溃;
	(或者摄像头突然损坏, 突然被染黑, any case to kill the camera, it will kill the auto driving system too)


	* 更便捷的自动驾驶摄像头数据流走向:
		qnx/ros/linux 系统直接打穿虚拟机底层代码, 把camera 设备直接'当成虚拟设备', 接入虚拟机, 
		这样kvm 的linux 子主机就直接从/dev 中, 获取到摄像头数据, 相当于自动驾驶摄像头数据流向等于:
			qnx/ros/linux 内存 -> kvm-linux 内存
		这样内部内存拷贝一次, 就能满足设计需求, 减轻ETH 网络的带宽压力, 绝对是目前的主流方案!!





3.自动驾驶摄像头是否需要转码, 才把数据转发到linux 自动驾驶系统?
	自动驾驶摄像头一般不会转码, 也没必要转码!!
	自动驾驶摄像头, 一般会根据车厂的要求: 导出指定分辨率, 帧率的码流, 直接输送到视觉计算算法层, 减少转码带来的系统内耗;
	(摄像头驱动是qnx 驱动; 视觉计算-算法层是linux 子主机)

	如果有视频流处理的需求, 那就通过硬件进行转码, 有专门进行硬件转码的模块, 主控cpu 直接获取转码结果即可;
	(一般是linux 硬件解码/转码/... 等硬件加速, nvidia 方案)

	总之, 车载系统一般不会进行转码, 而是直接转发多媒体数据流到视觉计算-算法层;





