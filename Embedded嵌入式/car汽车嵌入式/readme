# adas操作系统:
	* 车规芯片(车规SoC + 车规MCU + 安全专用芯片[一般只是小型存储芯片])
	* 编译工具链(以: bazel/cmake 为例)
	* 操作系统(以: soc=qnx/ros/linux, bsw=autosar/osek 为例)
	* 虚拟化技术(以: qnx/ros/linux的kvm/qemu 为例)
	* tbox终端+ota服务+信息安全框架
	* 通信层(vsomeip/fastdds/opendds)
	* bsw 信号控制层(autosar/osek)
	* bsw 信号控制层的'仿真&诊断'软件(以vector/etas/eb 工具链为例)
	* 座舱(MCU + 虚拟机android 改造版)
	* 行车记录仪

	ps:
		soc os:
			一般以qnx/linux 为主(linux 可以打rt 补丁, 应用齐全), 但貌似实时性, 便捷性达不到要求, 用得不多;
			(ros 也是基于linux 进行改造的unix 实时变种系统, 当然qnx 也是unix 实时变种系统, 但用在车载系统中, 应用比较少)
			android 为什么不能成为车载soc os?
				* 首先google 公司貌似放弃了汽车市场;
				* 其次是: android 本身是一个被剪裁的比较多的分时系统, 而且socket 套接字默认也是不支持原始套接字的, 如果要改成车载os, 改造压力较大;
					因此, 与其将android 改成车载os, 还不如直接用linux 改成车载os(android 只适合于座舱系统);
		bsw os:
			rtos 的种类就更多了, freertos 等一系列物联网rtos 都被抛弃, 汽车行业一般使用autosar/osek;
			(bsw 层os 的信号'仿真&诊断'软件, 一般情况会绑定autosar, 但应该也有支持osek 的仿真方案)
		座舱 os:
			MCU + 虚拟机android 改造版(也有部分厂商使用linux + qt?[这种可能性较小]);
			MCU 主要控制门, 窗, 空调, 车后门, 灯, 喇叭等, 有一个主控, 支持socketcan;
			虚拟机android 改造版, android 需要重新移植tcp/ip 底层socket 协议栈, 至少需要支持原始套接字和链路层套接字, 
			否则android 默认是不支持socket 原始套接字的, 可能还需要就实时性进行改造增强;
			否则汽车仪表(速度显示仪, 灯光状态, 门状态)等, 没办法做到实时同步, 也是麻烦, 需要对aosp 进行重新剪裁, 制作一个完美符合kvm/qemu 标准的android img 才行;

	疑问:
		为什么不用一个系统集成所有功能, 为什么需要使用kvm/qemu 虚拟出那么多虚拟机, 跑不同的系统?
		这里面涉及到的实时系统需求, 分时系统需求, 人工智能计算需求, 将在: ./adas操作系统/ADAS-OS整车系统框架 中详细叙述



# adas自动驾驶AI:
	* 机器学习框架
	* 传感器数据采集分析
	* 视频数据
	...(略, 作者本人不太熟悉AI 人工智能)



# adas后端支援(V2X[Vehicle to X]车联网数据后端服务群):
	... 系统层server
	* OTA(严格来说OTA也属于V2X的一部分)
	* tbox终端
	... 应用层server
	* 交通数据(道路是否阻塞, 交通繁忙情况等, 包括收费站收费路段, 容易拍照罚款的路段等等)
	* 天气数据(能见度, 是否下雨等)
	* 市政数据(是否在修路)
	* 公安数据(是否发生交通事故, 造成阻塞)
	...



# 政府监管系统:
	...(略, 不做深入介绍)



# 汽车仿真模拟软件(驾驶撞击模拟, 姿态模拟, 物理模拟, 仿真测试):
	...(略, 不做深入介绍)
