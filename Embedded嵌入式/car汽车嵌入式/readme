# adas操作系统:
	* 车规芯片(车规SoC + 车规MCU + 安全专用芯片[一般只是小型存储芯片])
	* 编译工具链(以: bazel/cmake 为例)
	* 车控系统(以: soc=qnx/ros/linux, bsw=autosar/osek 为例)
	* 虚拟化技术(以: qnx/ros/linux的kvm/qemu 为例)
	* 通信层(vsomeip/fastdds/opendds)
	* bsw 信号控制层(autosar/osek)
	* bsw 信号控制层的'仿真&诊断'软件(以vector/etas/eb 工具链为例)
	* tbox终端+ota服务+信息安全保障技术服务+远程遥控业务(实际就是V2X 前端, 做一些远程遥控+信息安全保障服务)[linux/android]
	* 座舱系统(MCU + android 改造版[通过aosp 重新编译, 重新将完整的tcp/ip 协议栈, 实现重新定制aosp 镜像])
	* 行车记录仪

	ps:
		soc os:
			一般以qnx/linux 为主(linux 可以打rt 补丁, 应用齐全, 但貌似linux 的实时性, 便捷性达不到设计要求, 市场份额不大);
			(ros 也是基于linux 进行改造的unix 实时变种系统, 当然qnx 也是unix 实时变种系统, 但用在车载系统中, 应用比较少)
			[ps: 只要ros 支持Hypervisor 虚拟化技术, 应该也可以用的]
			最终车控系统, 可能采用的方案只会是:
				qnx/ros/linux

		android 为什么不能成为车控soc os(车控系统)?
			* 首先google 公司貌似放弃了汽车市场;
			* 其次是: android 本身是一个被剪裁的比较多的分时系统, 突然改造成实时车控系统, 改造难度太大, 没必要!!
				而且socket 套接字默认也是不支持原始套接字的, 如果要改成车控os, 改造压力较大;
				因此, 与其将android 改成车控os, 还不如直接用linux 改成车控os(android 只适合于座舱系统);

		为什么需要Hypervisor 虚拟化技术?
			无论qnx/ros/linux 作为车控母系统, 都需要Hypervisor 虚拟化技术, 都必须使用kvm 虚拟化技术, 虚拟出linux 系统来跑AI 自动驾驶-机器学习框架;
			因为原则上, 车控母系统是99.9999% 不能出错的, 而AI 自动驾驶-机器学习框架可能会崩溃, 出错;
			为了汽车驾驶安全考虑, 万一自动驾驶系统出问题, 车控系统还能人工接管, 
			因此, 车控母系统是100% 不能出问题的, 做一下虚拟机隔绝, 是再自然不过的事情了;
			因此, 不只是qnx/ros 会需要Hypervisor/kvm 虚拟化技术, linux 自身也需要Hypervisor/kvm 虚拟化技术!!
			而且使用Hypervisor/kvm 虚拟化技术来跑Linux 虚拟机, 是再平常不过的事情了, 早就是老技术了, 很成熟;

		车载系统具体的结构框架是怎样划分的?
			目前2024 年主流的方案是:
				* 车控系统: 
						由qnx/ros/linux 作为车控母系统, 使用Hypervisor/kvm 虚拟化技术, 跑linux 镜像, 用来运行AI 自动驾驶-机器学习框架;
						这个系统跑在车控主板上面, 是比较核心的主板, 主板用料, 抗电磁干扰, 抗温度干扰, 主板用料等, 要求都比较高(详细可以了解一下车规和商规标准的区别);
				* 座舱系统:
						由android 改造版镜像, 作为座舱母系统, 承接android 系统的OTA 技术, 多媒体技术, android app 技术, 远程遥控应答业务, 
						同时加插can/lin 技术, 对门, 窗, 灯, 后门, 空调, 喇叭等做控制,
						座舱系统比较偏向于android 应用, 熟悉aosp 的人可以无缝衔接, 只需学会can/lin 就可以无缝切入了;
			车控系统+座舱系统=车机系统, 目前还有更省材料的'舱驾一体'方案;
			后续智能汽车行业, 对目前的操作系统格局改造的可能性不大, 基本上会维持现有的框架, 因为这个框架已经算是比较成熟可靠的了, 设计比较好;

		bsw os:
			bsw 层的rtos 的种类就更多了, freertos 等一系列物联网rtos 都被抛弃, 汽车行业一般使用autosar/osek;
			(bsw 层os 的信号'仿真&诊断'软件, 一般情况会绑定autosar, 但应该也有支持osek 的仿真方案)

		座舱 os:
			MCU + android 改造版(老式的是: wince/linux+qt);
			MCU 主要控制门, 窗, 空调, 车后门, 灯, 喇叭等, 有一个主控, 支持socketcan;
			android 改造版需要重新移植tcp/ip 底层socket 协议栈, 至少需要支持原始套接字和链路层套接字, 否则android 默认是不支持socketcan;
			座舱不需要打实时补丁, 不需要很强的实时性, 况且android 本身就是一个分时系统, 打rt-linux内核补丁可能会出现bug, 把完整的tcp/ip 协议栈重新移植回去, 应该就安全了;
			但由于android 是一个分时系统, 导致汽车仪表(速度显示仪, 灯光状态, 门状态)等, 没办法做到实时同步, 这是座舱系统的一个大麻烦, 软件工程上可能需要特殊手段解决这个问题才行;

	疑问:
		为什么不用一个系统集成所有功能, 为什么需要使用kvm/qemu 虚拟出那么多虚拟机, 跑不同的系统?
		这里面涉及到的实时系统需求, 分时系统需求, 人工智能计算需求, 将在: ./adas操作系统/ADAS-OS整车系统框架 中详细叙述

	车厂6大业务板块:
		* 车控系统(通信层+信号控制层)
		* 座舱系统(提供座舱所需的仪表, can/lin MCU控制, 多媒体/娱乐app, 5G 联网, OTA, 信息安全等功能)
		* V2X 后端server 群(前端是tbox 实体, 提供OTA, MAP, GPS, 多媒体广播, 信息安全校验, 5G 入网校验等各类数据后端支援服务)
		* 自动驾驶系统(AI 人工智能, 跑在kvm-linux 虚拟机里面)
		* tbox 前端(一般是linux/android, 主要做高强度信息安全管控, OTA, V2X 前端, 远程控制, 远程监控等任务) -- ps: 这部分业务大概率会直接购买第三方的方案
		* android/MacOS 远程监控app(V2X 的一部分, 主要提供部分远程遥控tbox 的功能)



# adas自动驾驶AI:
	* 机器学习框架
	* 传感器数据采集分析
	* 视频数据
	...(略, 作者本人不太熟悉AI 人工智能)



# adas后端支援(V2X[Vehicle to X]车联网数据后端服务群):
	... 系统层server
	* OTA(严格来说OTA也属于V2X的一部分, OTA 只是V2X 的其中一个服务功能而已)
	* tbox终端
	* 信息安全校验(5g 入网, 身份认证, 安全校验等)
	... 应用层server
	* 交通数据(道路是否阻塞, 交通繁忙情况等, 包括收费站收费路段, 容易拍照罚款的路段等等)
	* 天气数据(能见度, 是否下雨等)
	* 市政数据(是否在修路)
	* 公安数据(是否发生交通事故, 造成阻塞)
	...



# 政府监管系统:
	...(略, 不做深入介绍)



# 汽车仿真模拟软件(驾驶撞击模拟, 姿态模拟, 物理模拟, 仿真测试):
	...(略, 不做深入介绍)
