QNX 简介:
	QNX是业界公认的X86平台上最好的嵌入式实时操作系统之一;
	它具有独一无二的微内核实时平台, 建立在微内核和完全地址空间保护基础之上, 实时、稳定、可靠, 
	已经完成到PowerPC、MIPS、ARM等内核的移植, 成为在国内广泛应用的嵌入式实时操作系统;
	虽然QNX本身并不属于UNIX, 但由于其提供了POSIX的支持, 使得多数传统UNIX程序在微量修改(甚至不需修改)后即可在QNX上面编译与运行;



QNX内核简介:
	QNX的微内核结构是它区别于其它操作系统的显著特点;
	* 平板式内存结构, 所有的程序都使用同一个地址空间, 不加保护;
		应用程序可以自由访问所有空间, 效率较高,
		但任何应用程序指针错误都可能会导致内核崩溃;

		大内核内存结构, 操作系统内核和各种驱动程序、 网络协议在同一个地址空间, 应用程序在单独空间;
		内核模块同处于一个保护空间, 运行效率高, 应用程序无法直接访问保护空间, 系统稳定性大大提高;
		缺点是:
			由于内核模块(例如网络驱动)处于保护空间, 因此调试困难, 任何驱动程序的修改都要重新编译内核, 无法做到驱动的动态加载和卸载;
			QNX的微内核结构, 内核独立自处于一个被保护的地址空间;
			驱动程序、网络协议和应用程序处于程序空间中;

		在具有高可靠性内核的基础上, QNX的创新设计使它同样具有很高的效率;
		QNX最为引人注目的地方是, 它是UNIX的同胞异构体, 保持了和UNIX的高度相似性, 
		绝大多数UNⅨ或LINUX应用程序可以在QNX下直接编译生成;
		这意味着为数众多的稳定成熟的UNIX、LINUX应用, 可以直接移植到QNX平台上面, 从而提高实时性;
		(ps: 
			移植时, 需要考虑应用的实时效率的问题, 这个必须由程序员, 根据业务要求作出动态编码调整;
			毕竟大部分linux 软件, 都是互联网爆发期开发出来的, 基本上都是异步应用,
			而QNX 大部分情况下, 是面向实时业务的, 这里面有很多需要调整的地方;
		)



	* QNX网络子系统由三个部分组成: 
		网络管理模块(io-net)、网络协议模块、网络设备驱动模块;
		每个模块各自具有不同的功能, 但是它们具有一些相同的属性;如: 
			网络设备驱动、TCP/IP协议栈分别对上层io-net模块和应用程序产生数据, 两者都可以被看作数据源;
			同时它们也接受上层发来的数据, 又可以同时被看作数据的消费者;
			过滤模块对向上的数据进行筛选, 分协议进行处理;
			对向下的数据则进行相应的转换, 如进行网络地址转换NAT;
			转换模块负责不同协议帧结构的转换, 在以太网的工作环境下, 它就负责对IP数据报进行以太网帧的封装和解包;

		和QNX其它服务进程一样, QNX的网络子系统也在内核外部空间运行;
		应用程序面对的是一个统一的网络接口, 硬件相关的内容被完全包装在网络子系统内;

		QNX 网络子系统的三个子模块按层次分开, io-net模块处于中心, 是QNX网络的核心和重点, 其它模块都挂接在它上面;
		数据和信息的流动都必须经由io- net调度与转发, 所有其它模块所面对的就是一个单一主体;
		这样的中心交换结构, 屏蔽了各个模块间相互协调的复杂细节, 在很大程序上方便了模块的编写工作;
		同时, io-net还是QNX的网络管理中心;
		任何网络协议和网络设备驱动程序都必须向io-net注册, 由它来加载, 并接受io-net的配置和管理, 用户对网络状态的查询和管理也是通过io-net来实现的;



