autosar开发编写代码少的优势:
	首先, 不是说写代码多, 就是优秀的, 相反的, 任何人写出来的东西, 可靠率都比较低, 还是那个梗最好:
		超音速飞机里面, 最容易坏的零件, 就是人!!

	目前在一些大型软件工程里面, 都推崇工具化处理了, 一来节约时间, 二来提高命中率, 准确率, 效率, 也节省金钱;
	现在互联网项目, 都开始提倡低代码了, 更别说:
		* bsp 产业:
			- aosp(这个项目诞生得比较晚, 设计出来的时候已经是比较高自动化了)
			- openwrt(这个项目诞生得比较晚, 设计出来的时候已经是比较高自动化了)
			- lfs(现在有yocto 这个高度自动化的工具链, 替代老式的裸奔lfs, 或者是buildroot 半自动化工具链)
		* MCU 产业:
			- keil(让单片机/mcu 设计, 更加简单, 主打征服8bit/32bit 芯片的快速开发设计)
			- autosar(专门针对汽车行业的MCU 高级工具链, 通过配置自动生成OS, 程序, 更高效, 更准确, 更节约时间)
		* 互联网:
			- odoo(低代码的大型openERP 供应商)
			- ...
	...

	这些例子太多, 就不一一列举了, 反正现在信息产业的发展趋势就是这样子;
	所以说, autosar 开发时, 写代码的场合可能不会很多, 主要是通过工具配置, 解决开发需求;
	但是解决这些需求的时候, 其实只是实现手段不一样而已, 需求还是一样的;
	我需要autosar 给我提供引擎温度, 每5 秒向算法层提交一次, 
	那么你通过配置实现, 还是通过编码实现, 都不会对最终结果产生任何影响;
	当然, 需求还是这个需求, 还是一样的需求, 只是解决办法不一样了而已;
	(但别以为编码才是好的, 准确的, no!! 实际上配置才是更高效, 更准确, 更节约时间的办法)

	当然, 更高级的技术员, 就是去实现AUTOSAR 工具链这种程序员, 这个肯定是更高级了, 神人!!
	实现AUTOSAR 工具链的程序员, 需要对autosar 实时系统非常熟悉, 需要对汽车行业开发非常熟悉, 对cp-autosar/ap-autosar 非常熟悉, 
	还得有很强的c/c++ 编码能力, 能做PC 应用开发, 可视化开发;
	还得对虚拟化技术有一定了解, 如果autosar 可以在PC 端跑起来仿真的话
	(这个一般很难, 没有周边电路, 单纯跑autosar-os 没什么意义, 如果连电路也要仿真, 那软件工程规模就得更更更上一个级别, 难度太大!!)



总结:
	autosar开发编写代码少, 是合理的, 也是最好的, 能解决开发需求就行, 你管它是黑猫还是白猫, 能解决问题就是好猫;
	当autosar/osek 工具链, 没办法解决开发需求的时候, 还是需要写代码解决问题的, 想什么呢?
	autosar/osek 工具链不一定能匹配到所有的问题, 但大部分问题都可以通过配置来解决;
