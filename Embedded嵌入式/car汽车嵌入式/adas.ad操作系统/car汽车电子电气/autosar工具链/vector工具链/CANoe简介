1.CANoe 仿真器简介:
	负责可视化仿真的现实, 有仿真画布, 仿真各种子组件, 仿真线路(电线), 仿真信号等等, 
	功能十分多, CANoe 仿真器的基础功能, 和大部分仿真器的功能都一样, 没有什么大的差别;





2.CANdb++ 数据库对于CANoe 仿真器的重要性: 
	一个类似SQLite3 的arxml 文档型数据库, 主要负责记录信号仲裁;
	因为虚拟机是没有信号标准的, 需要一个DBC 来模拟信号仲裁, 这个虚拟仲裁就通过DBC 来实现;
	ps:
		物理机器的信号仲裁, 是通过物理机上面跑的程序来进行的, 
		但minerva 有现成的自动化工具, 可以根据DBC 来自动生成信号处理程序, 这也是厂家的一种方便的设计;

	信号仲裁的概念:
		由于CANoe 仿真器并没有真的发信号, 信号都是计算机虚拟出来的数据,
		因此判断接收, 发送, 数据校验等, 需要一个绝对标准的仲裁标准, 判断虚拟操作的有效性, 判断虚拟数据的有效性;
		因此, 这个arxml 就用来实现这个功能;
		vector 工具链做得比较完善, 目前已经做到了: 
			根据这个arxml 信号仲裁记录文件, 自动生成信号接收/发送的cpp 程序代码, 功能比较强大;
		因此, minerva 供应商编译project, 其实也是有两个主要的arxml 文件:
			一个是记录系统硬件info 的arxml
			一个就是信号仲裁arxml





3.CANoe 仿真器详细介绍:
	CANoe 仿真元件:
		* Ethernet Networks: 仿真网络(画布级别, 网络类型未确定), 模拟以太局域网/CAN网络;
		* Node 节点元件:      仿真各种node 节点设备, 具体设备类型不限, 但以信号类型为标准进行区分[依赖CANdb++ 信号仲裁]
		* CANoe test节点:     主要编写测试逻辑, 主要做整个系统的测试逻辑[依赖CANdb++ 信号仲裁]
		* Database:          编写依赖CANdb++ 信号仲裁的细节, 生成arxml 文件
		* Switched 元件:      仿真网络'管理器', 确定仿真网络的具体网络类型;

	CANoe 仿真元件细节编辑器:
		* Ethernet Networks 仿真网络编辑器(画布级别, 网络类型未确定):
			这个编辑器就是添加, 删除, 元件节点, 没有啥细节编程;
		* Node 节点元件编辑器:
			CANoe Browser浏览器, 实际上就是一个Node 节点元件的编码器, 负责编写Node 节点元件的逻辑代码的;
			编辑使用文本编程, 是仿c 语法脚本, 后缀名: *.can
			最终生成: *.cbf 执行文件, 最后装载进CANoe 仿真环境中;
		* CANoe test节点编辑器:
			也是使用CANoe Browser浏览器编辑的, 只是语法与Node 节点元件编辑器有些区别, 主要编写测试逻辑;
		* Database 编辑器:
			在CANoe Browser浏览器中, 有详细的可视化编辑按钮;
			也可以使用CANdb++ 进行编辑;
		* Switched 元件编辑器:
			简单编辑选择网络参数即可, 其实很简单;





4.CANoe 仿真器的简单使用套路:
	* 添加CANoe 仿真网络画布, 确定整个仿真环境(右键可添加元件: node/network/arxml)
	* 添加CANoe 仿真网络设备, 确定整个仿真网络的具体参数类型(右键可添加元件: node);
	* 添加CANoe 仿真节点, 添加仿真设备, 进行信号处理编码;
	* 最终汇总处理arxml 信号仲裁文件, 查看信号是否正常, 是否可用;












