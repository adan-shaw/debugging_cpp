1.车载主机软硬件的发展趋势:
	目前的车控, 座舱, 自动驾驶, 往后发展到舱泊一体、舱驾一体;
	One Box、One Board、One Chip;

	其实目前的车载系统, 就已经出现了One Board 了;

	One Chip, 基本上不太可能, 一来不安全, 车控系统是要绝对安全的, 
	如果使用One Chip 实现, 万一系统出现意外, 驾驶员能否通过人工接管系统, 成为大问题;
	而且, 从计算机系统设计来看, 把分时系统和实时系统, 集合在One Chip 上面, 
	那么实际上, 你就需要花更多的时间去设计One Chip, 
	实际上也只是在芯片里面, 再画图案, 实现分时系统+实时系统而已, 只不过, 这么高精度的集成, 把两套系统打印到One Chip上面, 的确很高级, 可靠率会更高;
	但必然的, 如果要实现One Chip, 需要的设计能力, 设计复杂度, 要翻几翻!!
	One Board 还是比较容易实现, 可靠率高, 非常合理, 成本节约和可靠性两不误的选择!!





2.目前座舱系统和adas 合并的趋势(已经势不可挡了):
	在座舱相关功能不断地被集成的过程中, 我们还看到了一种趋势: 座舱与ADAS类功能的融合; 
	最开始是环视摄像头接入到车机系统来实现360环视功能; 
	再往后, 环视摄像头和超声波雷达传感器同时接入到座舱域控制器, 由座舱来实现360环视以及APA等泊车功能的控制, 即所谓的"舱泊一体"; 

	智能座舱整合基本的泊车功能有以下几点好处: 
		一是, 可以降本, 至少可以把原来泊车的控制器省掉, 进而节省一定的物料成本; 
		二是, 把泊车功能整合到座舱, 能够更好地做泊车场景下的人机交互设计; 
		三是, 座舱主控SoC芯片上的算力也能得到最大程度的有效利用; 
	再往后发展, 智能座舱将进一步整合L2级别的行车ADAS功能, 甚至是更高阶的智能驾驶功能, 即所谓的"舱驾一体"; 

	从"舱驾一体"的实现形式上来看, 目前有三种: One Box、One Board 和 One Chip; 
	目前, 特斯拉采用了One Box的方案, 并在2019年实现量产应用; 
	One Board 和 One Chip的方案也有相关企业正在规划, 据相关媒体透露, One Chip的方案可能将会在2025年左右量产; 





3.目前的主流方案: One Board 方案;
	采用qnx/linux 作为母系统, 使用Hypervisor 技术, 虚拟出android 座舱系统, linux 智驾系统;
	同时母系统既作为Hypervisor 虚拟机的母系统, 也作为车控系统autosar/osek 的母系统, 
	把车控MCU-os 当成一个非常重要的设备, 接入SoC 母系统, 同时为车控MCU-os 预留物理硬件;
	tbox 通信驱动, 信息监管应用, 等等, 也会直接寄生在母系统中(这部分驱动/应用, 大部分是qnx/linux);

	土豪一点的, 可能会采取车控系统+座舱系统分离的设计, 这样会有两块SoC, 车控系统会虚拟出: ADAS 自动驾驶linux 机;
	信息监管app 应用, qt仪表app 应用, 同时控制门, 窗, 灯, 空调, 灯, 这些都会寄生在母系统中;
	座舱系统则跑各类座舱app 应用(支持座舱多android-os 虚拟化, 为每个乘客提供一个触控大屏);
	座舱系统和车控系统, 通过以太网进行通信;

	舱驾一体发展过程中, 深度依赖Hypervisor硬件虚拟化技术, 这样一来, 系统稳定安全, 成了一个非常核心的问题;





4.由于汽车软硬件方案, 经常变动, 实际上你也不能掌握, 具体哪些硬件上面, 跑什么系统, 跑哪些应用;
	你应该要做的就是: 
		按实现功能划分, 这样可以无视硬件变动和迁移!!(这样才能真正无视软硬件平台的升级, 实现业务层剥离)

	autosar/osek:
		mco-os, 基本上, 必须有独立的电板, 芯片集, 一般会以host 的形式接入ETH 以太网;

	车控系统:
		一般直接寄生在母系统中, 基本不跑在虚拟机里面;

	座舱系统:
		一般跑在虚拟机里面, 土豪会独立出来, 给每一个乘客虚拟一个android-os;

	自动驾驶系统:
		一般跑在虚拟机里面, 虽然自动驾驶系统基本都是Linux 软件, 
		但为了系统安全, 一般都会独立虚拟一个虚拟机来跑, 毕竟自动驾驶系统的机器学习框架, 有崩溃风险;
		大型软件框架的可靠性, 一般没有小型傻瓜软件可靠;
		再说了, 如果母系统是qnx, 这就基本跑不了linux 那种大规模机器学习框架软件;

	仪表:
		一般直接寄生在母系统中, 用qt 实现qnx/linux 应用, 因为这类应用有非常高的实时需求;

	控制门, 窗, 灯, 空调, 灯:
		大概率是纯android 应用(做成linux-qt, wince 应用的基本上都是老式车载系统);
		一来为了车控大屏幕中显示, 触屏输入输出;
		二来为了远程V2X, 进行远程操作, 显示;

	监管应用/监管os:
		一般直接寄生在母系统中, 做信息安全监管: 入网验证, ETH 以太网监管, 等等;

	OTA:
		一般直接寄生在母系统中, 方便对整个系统进行升级, 同时做较强的硬件级信息安全校验;

	5G 联网驱动:
		一般直接寄生在母系统中, 如果座舱os 独立, 则座舱os 自己带一个5G 联网驱动, 主要负责通信功能的支撑实现;

	传感器驱动:
		一般直接寄生在母系统中, 然后直接以驱动的形式, 接入智驾linux 虚拟机;
		(如果座舱应用需要在屏幕上显示传感器警告动作, 传感器状态, 这种实现比较少, 
		 就算实现了, 也难以像仪表一样准确, 如果非要实现, 一定是在仪表中一并实现)

	tbox:
		一般直接寄生在母系统中, tbox 一般都是linux 系统, tbox 上面的应用应该可以轻松移植到qnx/linux 母系统上面;

	多屏幕输出:
		* 虚拟机android-os 的display 屏幕输出, 可以输出到车载大屏上面;
		* 母系统的仪表qt应用界面, 可以输出到仪表屏幕上面; 
		* 其他座舱系统的屏幕, 例如一个座位一个屏幕, 这种方案大部分需要两块SoC, 用另外一块SoC 专门为每个座位虚拟一个android-os 供其娱乐;






