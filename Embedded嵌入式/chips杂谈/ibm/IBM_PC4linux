IBM 2010 年时候的大型机产品, 差不多等于今天的E7 极限性能(大型机殴打小型机)

**********************************************************************
周二的Hot Chips 2010大会上, IBM开始讨论起z196处理器, 
这款产品最早在7月29日发布, 出货日期在9月份, 
IBM并没有太多地谈及作为系统核心的新四核处理器的技术和性能等信息, 
只是表示新型主机的处理器主频为5.2GHz, 是“全球最快的微处理器”. 
确实是这样的——如果你单看原始主频的话. 但是, 除了高主频之外, 还有更多关于z196处理器的信息. 

四核z196处理器与4.4GHz的四核z10处理器有某些相似之处. 
z196处理器采用了45nm制程工艺(z10芯片采用的是65nm), 
这意味着IBM可以将所有东西都集成到这个芯片上, 
事实上IBM确实是这么做的, 就像它在今年二月公布8核POWER7时所表示的那样. 

据了解, Z196处理器有14亿个晶体管, 面积为512.3平方毫米, 
这使其在晶体管数量和面积上都要大于POWER7芯片, z196芯片采用了IBM的触点陈列封装, 
被称为C4的金属触点封装取代了以往的针状插脚——其触点数量惊人: 8093个电源触点和1134个信号触点. 



z196芯片每个核心都有64KB的L1指令缓存和128KB的L1数据缓存, 这一点和Z10非常相似. 
但是z196有100个新指令和超 标量通道允许指令重新排序, 这样Z196通道就比z10的更有效, 
而且其编辑代码是不可见的, 除此之外, Z196的每个核心都有1.5MB的L2缓存. 

z196引擎的超标量通道可以在每个时钟周期内解码3个z/Architecture CISC指令并执行多达5个操作. 
每个核心有6个执行单元: 2个整数单元, 1个浮点单元, 2个加载/保存单元和1个小数单元. 
IBM表示, 这浮点单元要比 z10芯片中的更好, 但是没有透露它在每个时钟周期内可以做多少flops. 
之前的一些z/Architecture CISC指令已经被分割成块, 
使其能够更有效地分散在通道中, 让z196更像是RISC. 


与POWER7芯片一样, z196在芯片中采用嵌入式的DRAM(eDRAM)作为L3缓存. 
这种eDRAM比经常用作缓存的静态 DRAM(SRAM)速度更慢, 你可以将其指定到一个特定的区域. 
对很多工作负载来说, 让更多内存接近于芯片要比使用高速内存更加重要. 
z196处理器有 24 MB的eDRAM L3缓存, 被划分为2个存储体, 并由2个片上L3缓存控制器进行管理. 


每个z196芯片可以作为一个GX I/O总线控制器——这种方法同样被用于POWER系列芯片中, 
用于连接主机通道适配器和其他外围设备, 
每个插槽分配得到一个与受RAID保护的DDR3 主内存相连接的内存控制器. 
此外, z196芯片还有2个加密和压缩处理器, IBM大型机采用了这种第三代电路设计. 


z196芯片采用两个核心共享其中一个协同处理器方式, 且每个核心有16KB的缓存空间. 
最终达到每个z196芯片有一个可连接SMP Hub/共享缓存芯片接口. 
有2个芯片被集成到一个z196多芯片模块(MCM)上, 
提供了交叉耦合允许MCM上所有6个插槽通过40GB /s相连接. 
Z196提供的是交叉耦合访问方式, 在MCM上提供了六个插槽以40GB/s的速度连接到各芯片上,
zEnterprise 196 SMP Hub/共享缓存.

在IBM大型机中, z196处理引擎相当于中央处理器(CP), 而CP的互连芯片称为共享缓存(SC). 
每个SC有6个CP接口相互连接, 其中有3个架构接口连接到全加载的z196系统中其他3个MCM. 

从上面的架构图来看, SMP Hub的一个优点就是可以加载到带有L4缓存的组件上, 
这是大多数服务器所没有的——几年前IBM曾向至强处理器的EXA芯片组上增加了一些L4缓存
(即采用了eX4架构的IBM X3850M2/3950M2平台, 可通过扩展组建升级为16路系统. 
 对应的CPU为Xeon 7400系列). 
L4缓存之所以重要, 其原因在于大型机引擎的主频要远高于主内存速度, 
但是如果只通过增加一个缓存层来满足Z196的引擎需求是非常昂贵的. 
不管怎样, 这种SMP Hub/共享缓存芯片和CP一样也是采用45nm制程工艺, 
有15亿个晶体管, 面积为478.8平方毫米, 封装中有8919个触点. 

每个MCM上部署6个CP和2个SC, MCM是一个边长96毫米的正方形, 功耗1880瓦. 
每个处理器板有一个MCM, 这使得一个完全连接的系统可以达到96个CP, 
十几个控制器可以访问多达3TB RAID内存, 32个I/O Hub接口最高可实现288 GB/s的I/O带宽. 
顶架式zEnterprise 196 M80设备中的80个CP可用于运行工作负载, 
其他可以使用Parallel Sysplex集群来耦合系统、管理I/O和热备份等等 
**********************************************************************





1.ibm 芯片:
  别以为IBM 大型机芯片会有很多核心, 才4个核心, 呵呵.(不过这是2010 年的产品)
  不一样的是, 每个核心有6个执行单元(这点很重要), 一个时钟周期可以做三个解码指令.

  intel 都是一个核心一个执行单元的, 通过超线程模拟出两个执行线程. 
  x86 是12个时钟周期=1个机器周期, 6个机器周期组成一个节拍, 也就是指令周期;
  一个指令周期在汇编里面, 就是一条mov 指令, 乘法计算需要4个指令周期;
  8051是这样, 但x86 架构是沿用8086 的指令集的, 所以几乎也差不多.
  
  IBM 大型机的设计, 与x86 架构完全不一样.
  x86 架构, 运算全靠的武功秘籍, 全靠指令集,
  (虽然IBM 也有指令集, 但是这方面没有X86 多, 因为ibm 有专门的浮点计算单元, 
   省去了很多专门强化浮点计算的指令集.
   IBM 芯片分工明确, 单核内部指令流水线多, 不需要做太多指令集做强化运算.
   intel x86 则是需要指令集, 在整形与浮点计算中切换/增强)

  由于x86 指令流水线永恒不变(只有一条), 所以在执行单元只有一个的情况下, 
  执行单元需要计算整形, 计算浮点, 寻址操作, 逻辑操作, 位操作等基本依赖于'指令集'来工作.
  但是IBM 貌似一个核心内就五脏俱全.
  每个核心有6个执行单元: 2个整数单元, 1个浮点单元, 2个加载/保存单元和1个小数单元. 
                   '整形运算'单元 '浮点运算'单元  '寻址'单元     '浮点辅助运算'单元
  如果按照时钟周期比, ibm 设备1个时钟周期3个指令,
  intel 完成3个指令, 需要3*6*12 个时钟周期.
  (2018 年)intel e7 有22个核心么?那就是22个执行单元, 数量决定胜负, 海量垃圾干倒IBM.




  但是IBM 产能比较低, 虽然相信IBM 的品质, 但是费用还是太贵.
  ibm 收了redhat, 估计也是瞄准那些技术实力不厚的商业团体, 
  还有计算量很大的云服务器机群, 虚拟化, 云计算, 区域链？？
  要更换设备估计很贵, 不过IBM 机器基本没啥问题出,
  不过初笔购入价, ibm 设备的购买价真是, 很不可爱.
  你看看报价就知道Intel 一万多两万一个服务器CPU, 在IBM 面前, 显得多么便宜, 
  e7 貌似才一万多, x86主板, 一般新的就几千, 当然IBM 主板造工很好, 还有很多安全硬件设计,
  intel 主板反正你坏了还能在市场上随便买一块新的, 烂大街就这样.






2.ibm 编译器:
  ibm 核心内部的指令流水线被设计得这么复杂, 
  x86 那个傻瓜'单一流水线'架构已经够Intel 吹100年了,就像ak47 一样,简单就好,数量决定胜负.

  现在IBM 芯片工厂早就卖了, 但是芯片设计部分还在, 工厂卖掉但签订了合作协议, 呵呵. 
  产能不足呀, 吹这么牛, 软件跟不上, 群众不买账, 
  而且unix 还是闭源系统, 用户群不放心.



  关于估计IBM 芯片编译器, 编译优化选项, 跟intel x86 的编译优化选项很不一样,
  gcc 上面也有IBM 架构的编译器吧, 自能依赖o2 自动优化了.

  IBM 也有自己的编译器, gcc 可以照抄IBM 编译器公开的部分,
  至于不公开的部分没法玩了, Intel ICC 编译器也有开源部分和闭源部分,
  开源部分都是c 语言部分, 因为工业标准嘛, ieee 强制要求, 大家都按照标准来做, 
  c++部分就不一样咯, 就像Intel ICC 编译器一样, 提供c++ 编译优化商业服务, 能捞钱就多捞点.


  所以说, gcc 是一个基本上, 纯c 的编译器, 就是这样子C++ 部分效率很低, 
  你看安装包就知道了, c 部分是60mb,, c++只有15mb.
  估计就是将C++语法扭转成c 语法, 然后再编译.
  GCC 是通用免费编译器, 不可能获取到芯片厂商的编译优化策略的, 
  GCC 除了照搬公开c 部分之外, 还做做语法检索和c++ 翻译成c 的那种, 蹩脚的效率转换.
  (但是想办法将C++ 翻译成C, 再以C 标准去编译, 是一种硬方法!!
   GCC 编译器也只有这样做, 才能兼容绝大部分的芯片, 成为通用编译器老大.)





关于IBM 设备的软件偏向:
  发展也是有战略的, ibm 芯片架构跟x86 不一样, 
  在软件支持优化方面, ibm 肯定不能跟x86 比, 
  x86 架构有那么多的用户, IBM 根本无能为力.
  ibm 就挑重点的软件生态来发展, 比如: Python + php.
  Python 的低效率+ibm 机器的豪华运算能力, 加上IBM 本来在科学运算上的造诣,
  python 绝对是IBM 的大本营呀.

  Ubuntu linux 目测会被IBM 渐渐抛弃, 项目前期的垫脚石而已.
  现在redhat 已经是自家人了, ubuntu linux马上就会被踢入冷宫.
  以后ibm linux 设备都会围绕着centos 来工作.





