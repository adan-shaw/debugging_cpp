一个cpu 内核, 一个MMU;
一个进程, 一个进程内存管理器;
一个进程, 一个独立的虚拟地址空间;



#
# 1.MMU 的功能list
#
* 虚拟地址到物理地址的转换(这是MMU的核心功能): 
	当CPU需要访问内存中的数据时, 它使用的是虚拟地址, 而不是实际的物理地址; 
	MMU通过查找页表(Page Table)等数据结构, 将虚拟地址转换为物理地址, 然后CPU才能实际访问内存中的数据; 

* 内存保护(MMU还负责保护内存不被非法访问): 
	它通过检查访问权限, 确保每个进程只能访问其被分配的内存空间, 而不能访问其他进程的内存空间; 
	如果某个进程试图访问未经授权的内存地址, MMU会触发异常, 从而保护系统的安全性和稳定性;
	(其实就是内存访问保护, 禁止非法访问进程内存, 禁止越权)

* 缓存管理: 
	MMU通常与CPU的缓存(如L1、L2缓存)紧密合作, 以优化内存访问性能; 
	它可以管理缓存的替换策略和一致性, 确保数据在缓存和主存之间的正确同步; 
	L1 L2 L3 cache 高速缓存映射, 实现高速读取数据/指令;
	管理线程栈(大部分数据, 会被L1 L2 L3 cache 缓存系统, 完成映射命中)

* 支持虚拟内存: 
	虚拟内存是现代操作系统中的一个重要概念, 它允许程序使用比实际物理内存更多的内存空间; 
	MMU是实现虚拟内存的关键组件之一, 它负责将虚拟内存地址映射到物理内存地址, 并在需要时将数据从磁盘加载到内存中; 





#
# 2.MMU 的组成部分:
#
* TLB(Translation Lookaside Buffer)
	table walk unit

* TLB 是一种地址转换cache;
	table walk unit在不同的CPU架构上有不同的叫法, 
	但其作用是相同的, 就是把内存页表走一走进行查表, 完成虚拟地址到物理地址的转换;





#
# 3.MMU 如何实现一个cpu 内核一个MMU, 并共享主板总线, 物理内存
#
MMU 是一个高度迎合操作系统中的进程内存管理器的计算单元(进程内存管理器还有一套内存重用池ptmalloc, jemalloc/tcmalloc);
但实际上, 系统总线, 主板系统总线, DDR内存条是唯一的, 
而每个CPU内核都集成了一个MMU, 访问时会有冲突, 所以会加锁(内核自旋锁);

这是多核时代的CPU设计, 你读2008年之前的文章, 文档, 他们都会告诉你, mmu内存管理器只有一个, bullshit(我以前也认为只有一个MMU的);
AMD开启多核CPU时代, mmu已经被集成到CPU内核中了, 
Intel早就将北桥收归CPU管理我2004年玩PC的时候, 北桥芯片还在主板上的, 现在没有了, 全部被Intel收归内核管理了, 实现了模块化设计;
一个CPU内核一个MMU, MMU 就跟CPU内核一样, 共同访问系统硬件资源, 有冲突, 内核就加锁解决冲突, 没冲突, 就并行访问;

内存映射表, 实际上是唯一的, MMU 通过共享主板总线, 来访问物理内存, 
但MMU在切换进程的时候, 可以不用管内存映射如何, 
反正进程内的数据, 都跑在虚拟内存空间中, 
当进程'申请/访问'内存的时候, MMU才开始与内核进行沟通:
	* 询问指定的部分数据在哪(内存映射);
	* 询问是否还有空余内存(申请内存);
	* 通知释放内存;

MMU 相当于是集成一个计算单元, 专门处理内存申请, 映射, 数据保护等问题
多个MMU, 多套虚拟内存空间, 但实际上共享一套'虚拟内存->物理内存映射表', 物理内存地址映射表, 各个MMU 是一致的, 同步的;

集成多个内核中集成MMU, 只是为了提高并发处理能力;
冲突数据加锁访问, 非冲突数据, 并行访问, 这样也凸显多核SMP 系统的并发能力;


创建线程/进程, 调用new/malloc, 实际上都会触发操作系统在物理内存中, 查找空闲内存, 建立映射;
这两个api 都会触发空闲内存查找和分配的过程, 实际上, 操作时长比栈内存的出栈入栈要慢很多, 
因此不要觉得new/malloc 变量方便, 就频繁调用, 高性能场合, 是不需要的;
不过创建完成之后, 重新索引映射, 效率也不低, 只是不能频繁创建/删除而已;





#
# 4.MMU 一般出现在那些系统中, 那些系统不需要MMU ?
#
MMU 一般出现在:
	android/MacOS/
	linux/freebsd/windows/unix
	openwrt(openwrt还是使用Linux kernel, 应该100%需要MMU)
	QNX
	ROS

不需要MMU 的OS:
	freertos
	rt-thread
	...
	大部分实时RTOS 小型系统, 都不需要MMU, QNX/ROS 除外(主要因为规模比较大, 这种情况下, 估计会需要MMU)







