#
# 1.WebAssembly 技术简介
#
WebAssembly(简称Wasm)是新一代web 浏览器引擎的重要组件, 
WebAssembly 是一种web 浏览器的通用虚拟机(纯软件虚拟机, 未来可能会推出专用的硬件加速功能);
ps:
	WebAssembly 既然可以轻松集成在web 浏览器中, 也可以轻松运行在服务器上面;

WebAssembly 在生产中具有广泛的应用:
	高性能计算:
		WebAssembly 是一种高性能的虚拟机, 可以用于执行密集型计算任务, 例如: 科学计算、数据分析、图形处理和密码学操作; 
		它提供了直接的底层机器码执行, 通常比JavaScript更快; 

	浏览器端性能优化:
		Wasm可以用来加速Web应用程序, 特别是在处理大规模数据、图形和游戏方面; 
		通过将计算密集型部分编译为Wasm模块, 可以提高前端性能; 

	跨平台应用:
		Wasm不仅在Web浏览器中运行, 还可以在多种平台上运行, 包括桌面应用程序、移动应用程序、服务器端应用程序和嵌入式系统; 
		这意味着开发人员可以共享相同的Wasm模块, 实现跨平台的一致性; 

	浏览器插件替代:
		Wasm可以替代浏览器插件, 以实现复杂的客户端功能, 而无需依赖特定插件技术(如Flash或Java Applets), 这提高了安全性和可移植性; 

	云计算和边缘计算:
		Wasm可以在服务器端用于云计算和边缘计算, 实现多租户隔离和性能优化, 它可以用于托管用户自定义代码、函数计算等场景; 

	跨语言开发:
		Wasm可以与多种编程语言集成, 允许开发人员使用他们熟悉的语言来开发Wasm模块, 这促进了跨语言的合作和开发; 

	安全性:
		由于Wasm在隔离的沙箱环境中运行, 它提供了一定程度的安全性; 代码不会直接访问主机操作系统的API, 减少了恶意代码执行的风险; 

	WebAssembly系统接口(WASI):
		WASI是一个标准化的系统接口, 允许Wasm模块访问主机操作系统的底层功能, 从文件系统到网络套接字, 这增加了Wasm的能力, 使其更适合服务器端应用; 





#
# 2.WebAssembly 技术的实现原理
#
WebAssembly 通过以web 浏览器插件的方式, 可以是外部插件, 也可以是web 浏览器内部插件的方式, 植入web 浏览器, 实现web 浏览器加插一个纯软件虚拟机的功能;

WebAssembly 主要是用来跑二进制代码的, 比Web 浏览器沙盒sandbox, 具有更强的独立性, 对标qemu;

这样WebAssembly 就可以跑一些go/rust/c/c++ 编译出来的二进制程序, 从而执行更多任务;

ps:
	sandbox 一般是跑javascript 脚本, 防止html+css+js 前端页面, 有越权操作;
	但sandbox 是不允许运行二进制程序的, WebAssembly 可以!!





#
# 3.WebAssembly在物联网中的应用
#
WebAssembly 在互联网中的应用, 就不说了, 主要说说WebAssembly 在物联网中的应用;
(尽管我觉得这项技术未来的发展动力不是很足, 但仍然有很大的空间, 主要看研发端是否给力, 研发端给力, 市场看到利润空间, 就会有投入)

WebAssembly + luatos 都是适用于低速物联网设备, 而且需要带屏幕, 最好带触屏, 

这种情况下, WebAssembly 虚拟机, 才有更大的用武之地, WebAssembly 不是flash player, 但功能比flash player 更强大!!

WebAssembly 基本上等于sandbox + flash player + javascript 的总和, 基本上等于qemu 纯软件虚拟机, 只不过是集成到web 浏览器中而已;

WebAssembly 的详细用途, 还有待开发, 具体用在什么场合, 还要看市场的反馈;

如果互联网市场持续饱和, WebAssembly 可能会被雪藏到下一个时代, 才会被启用;



物联网中植入web 浏览器的可能性:
	目前web 浏览器极限可以压缩到1MB, 加上WebAssembly 模块, 可能整个软件包才几MB, 
	这种情况下, 一些带屏幕的物联网设备, 是可以跑的, 彻底实现跨平台, 省事;
	因此, 物联网发展WebAssembly, 并不是没有可能的(只不过市场可能会不太给力, 主要还是看市场反馈);



