#
# 1.为什么抛弃boost::thread
#
boost::thread 线程调度总结:
	'boost::thread 线程调度策略'是默认的, 固定的, 根据系统而定, 如果想修改'boost::thread 线程调度策略', 比较麻烦, 会用到c++ 里面的pthread_attr_setschedpolicy() 函数;
	boost::thread 默认是不能修改'boost::thread 线程调度策略', 
	因此boost::thread 线程的实用意义, 实际不大, boost::thread_pool + std::thread 的实用意义更大, 更实际;

因此, 你并不需要关注太多boost::thread 库, 意义不大;
还不如直接去搞std::thread;





#
# 2.c++线城池应该怎么实现?
#
boost 库也没有实现标准的threadpool, 但有非常多的threadpool 开源版本代码, 比较出名的有:
	* https://threadpool.sourceforge.net/
	* openharmony->threadpool


c++11虽然加入了线程库thread, 然而c++ 对于多线程的支持还是比较低级, 稍微高级一点的用法都需要自己去实现;
比如备受期待的网络库至今标准库里还没有支持, 常用acl或asio替代;
鸿蒙OpenHarmony源码中的网络栈模块部分, 也是十分漂亮的实现, 值得学习研究;

c++的ThreadPool实现, 网上有很多个版本, 文章的末尾就有两种不同的实现;
然而经过对比发现, 还是OpenHarmony源码的实现最优雅;
只是使用起来稍麻烦些, 比如不支持lambda的写法;
后续可基于此改造, 使其支持lambda函数的调用;
