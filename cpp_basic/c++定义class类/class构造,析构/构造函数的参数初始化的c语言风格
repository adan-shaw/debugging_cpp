#
# 1.构造函数参数传递的等价写法(更简单, 更接近c 语言的风格)
#
class srv_rep
{
public:
	/*
	srv_rep (bool tmp_use_static_routing) : 
		someip_app (vsomeip::runtime::get ()->create_application ()), 
		isRegistered (false), 
		use_static_routing (tmp_use_static_routing), 
		isBlocked (false), 
		isRunning (true), 
		pth_offer (std::bind (&srv_rep::run, this))
	{}
	*/
	//等价写法(这种写法更加清晰明了)
	srv_rep (bool tmp_use_static_routing){
		use_static_routing = tmp_use_static_routing;

		someip_app = vsomeip::runtime::get ()->create_application ();
		isRegistered = false;
		isBlocked = false;
		isRunning = true;
		pth_offer = std::thread(std::bind (&srv_rep::run, this));
	}
	~srv_rep(){}

private:
	std::shared_ptr <vsomeip::application> someip_app;
	bool isRegistered;
	bool use_static_routing;

	std::mutex mtx;
	std::condition_variable cond;
	bool isBlocked;
	bool isRunning;

	// isBlocked must be initialized before the thread is started.
	std::thread pth_offer;
};





#
# 2.构造函数参数传递的调用方式
#
srv_rep x1(false);
srv_rep *p = new srv_rep(false);
std::shared_ptr <srv_rep> p2 = new srv_rep(false);





