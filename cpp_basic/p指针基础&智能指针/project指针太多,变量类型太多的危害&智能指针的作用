1.指针数量多的危害:
	当一个程序的指针数量到达200w, 那么就算你使用的是智能指针, 会自动释放也好, 
	但程序的'可靠性'和'性能', 都会成为棘手的问题;

	这也是为什么大规模堆叠程序, 都需要用java or python 来实现,
	因为java or python 底层都是c 模块封装,
	java or python只是在调用一个又一个的c 模块, 
	类似于打开一个又一个的c 安全盒子, 其安全性, 稳定性, 很高;

	什么情况下会使用到智能指针??
		整个程序指针数量不超过10W, 应该都不需要用到智能指针;
		也就是:
			智能指针适合的场合是: 10W-200W 个指针区间;

		所以写c 程序的时候, 能用'本地实体变量'来实现的, 千万不要使用指针来造!! 
		那怕牺牲一点点压栈性能(64bit以内的char buf 都可以考虑用'本地实体变量'来实现)
		能用const 的常量, 直接用const, 将变量buf, 定义到静态常量区(只有一分存储空间消耗), 这样可以节省内存;





2.程序的'变量类型'太多的危害:
	当一个程序的'变量类型'超过20 个的时候, 这个程序的'变量类型'就会成为: 
		'编码实现'和'代码维护'的屎山

	所以, 尽量少定义新的'变量类型', 你想想有20 个不同的类, 这会导致程序十分臃肿, 难以维护;





3.简单堆叠, 复用率高, 可靠性高:
	利用安全, 稳定的c 模块(大神写的c 模块, 脚本语言官网公开的模块), 来实现大型软件project
	牺牲一些性能, 减少出错的可能, 提高可靠性, 这是目前大部分互联网软件的做法

	简单即最好, 可复用, 可堆叠,
	那么编程轻松, 设计便捷,
	编写出来的程序, 可靠性也很高(简单即最好);





4.cpp 优化指针的唯一要绝就是:
	消灭指针, 少用;
	智能指针, 可以消灭一半的指针使用, 至少不用你手动释放, 减少了一半的释放代码;





5.智能指针的作用
	多人团队编码的时候, 为了防止内存泄漏, 防止组员的技术不一;
	使用智能指针很正常, 方便团队协作编程, 减少团队内耗, 加速项目开发进度;

	大型项目, 性能倒是其次, 
	少关注一件事, 团队的进度会加速推进很多;

	反正你看自己的代码, 肯定没问题,
	但你看别人的代码的时候, 到底有没有释放内存, 或许一时半会, 你也看不出来;
	所以c++ project, 为了规模更大, 为了团队协作, 为了代码回溯, 用智能指针是很常见的;



