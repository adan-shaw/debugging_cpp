RPC 简介:
	RPC 的全称是Remote Procedure Call 是一种进程间通信方式; 
	它允许程序调用另一个地址空间(通常是共享网络的另一台机器上)的过程或函数, 而不用程序员显式编码这个远程调用的细节; 
	即无论是调用'本地接口/服务'的还是'远程的接口/服务', 本质上编写的调用代码基本相同; 
	比如两台服务器A, B, 一个应用部署在A服务器上, 想要调用B服务器上应用提供的函数或者方法, 而且由于不在一个内存空间, 不能直接调用, 这时候需要通过就可以应用RPC框架的实现来解决; 



	常用的RPC框架
		- gRPC
			gRPC 是Google公布的开源软件, 基于最新的HTTP2.0协议, 并支持常见的众多编程语言; 
			我们知道HTTP2.0是基于二进制的HTTP协议升级版本, 目前各大浏览器都在快马加鞭的加以支持; 
			这个RPC框架是基于HTTP协议实现的, 底层使用到了Netty框架的支持; 

		- Thrift
			Thrift 是Facebook的一个开源项目, 主要是一个跨语言的服务开发框架; 
			它有一个代码生成器来对它所定义的IDL定义文件自动生成服务代码框架; 
			用户只要在其之前进行二次开发就行, 对于底层的RPC通讯等都是透明的; 
			不过这个对于用户来说的话需要学习特定领域语言这个特性, 还是有一定成本的; 

		- Dubbo
			Dubbo 是阿里集团开源的一个极为出名的RPC框架, 在很多互联网公司和企业应用中广泛使用; 
			协议和序列化框架都可以插拔是及其鲜明的特色; 
			同样的远程接口是基于Java Interface, 并且依托于spring框架方便开发; 
			可以方便的打包成单一文件, 独立进程运行, 和现在的微服务概念一致; 





RPC 的优势:
	RPC 设计模式, 可以屏蔽编程语言差异, 服务器只使用一种语言实现, 这样可以统一业务需求;
	server 链接引擎可以实现多种语言支撑, 不同的语言, 实现不同的语言链接引擎;
	最终这些语言, 都使用一种or 多种固定的序列化语言, 跟服务器进行互交, 现实RPC 功能;

	这种设计模式, 可以很好地实现:
		* 屏蔽client 的多样性, 兼容复杂性, 服务器清一色采取一种语言, 搭建复杂业务, 统一语言业务;
			但客户端却是多样的, 支持各种语言, 只要实现一个多种语言链接引擎即可(目前大部分互联网大公司, 都使用这种设计模式, 做公开API 接口);

		* 屏蔽server 业务的复杂性, 可以让server 只用一种语言就实现所有的复杂业务, 非常舒服;

		* 极大地提高开发效率



RPC 的劣势:
	一般情况下只适合于互联网, 但有时候工业ETH 以太网程序, 偶尔也会用到类似的设计, 可以用来降低设计复杂性, 提高效率;
	但缺点是: 有一定调用延时(局域网延时1-10ms, 互联网普遍延时: 50-200ms)





一个典型的RPC实现结构:
	RpcServer:    负责导出(export)远程接口
	RpcClient:    负责导入(import)远程接口的代理实现
	RpcProxy:     远程接口的代理实现
	RpcInvoker:
	客户方实现:     负责编码调用信息和发送调用请求到服务方并等待调用结果返回
	服务方实现:     负责调用服务端接口的具体实现并返回调用结果
	RpcProtocol:  负责协议编/解码
	RpcConnector: 负责维持客户方和服务方的连接通道和发送数据到服务方
	RpcAcceptor:  负责接收客户方请求并返回请求结果
	RpcProcessor: 负责在服务方控制调用过程，包括管理调用线程池、超时时间等
	RpcChannel:   数据传输通道

