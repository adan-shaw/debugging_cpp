io 零拷贝技术, 一般分为:
	* disk 磁盘io
	* socket 网卡io

计算机设备中, 存储数据吞吐量最大的两个部件, 就是disk磁盘 / net网卡,
因此, 大部分情况下, io 零拷贝技术, 也是主要面向这两种设备而设计的;

传统的disk 读写过程:
	读: 文件->内核态缓冲区->用户态缓冲区(需要拷贝两次)
	写: 用户态缓冲区->内核态缓冲区->文件(需要拷贝两次)

mmap 节省的过程:
	读: 文件->[内核态缓冲区 == 用户态缓冲区(mmap() 可以共享内核态缓冲区&用户态缓冲区)]
	写: [内核态缓冲区 == 用户态缓冲区 -> 文件

传统的socket io读写文件过程:
	读: 网卡->socket内核态缓冲区->用户态缓冲区->disk内核态缓冲区->文件
	写: 文件->disk内核态缓冲区->用户态缓冲区->socket内核态缓冲区->网卡

sendfile() 节省的过程:
	读: 网卡->socket内核态缓冲区->disk内核态缓冲区->文件
	写: 文件->disk内核态缓冲区->socket内核态缓冲区->网卡
	ps:
		为什么sendfile() 不是节省了两次内存拷贝?
		因为用户态的disk 缓冲区, socket 缓冲区, 是可以二合一的, 
		本身就是二合一, 一个buf 既可以是disk 缓冲区, 也可以是socket 缓冲区, 因此sendfile() 只是节省了一次内存拷贝]





1.<socket io 类函数解析(从小到大排列)>: 
	read()/write() 是通用io:
		绑定缓冲区的数量(只有一个), 无地址信息. 
		ps: 地址信息指struct sockaddr *src_addr; 主要是:协议类型 + ip + 端口

	readv/writev() 是通用io:
		可一次发送多个数据缓冲区, 或者接收多次数据到多个缓冲区(并非<一次接收>, 然后分缓冲区存放)
		(readv/writev() 属于0零拷贝技术的一种, 可以直接重新指定io 缓冲区, 减少内存拷贝)

	send()/recv() TCP socket 专用的io:
		可以修改io 函数的工作状态(flags=io 标志);
		绑定缓冲区的数量(只有一个), 无地址信息. 
		io 操作之后, 接受者[recv]要发送<确认报文>给发送者[send].

	sendto()/recvfrom() socket 通用io:
		绑定缓冲区的数量(只有一个), 需要填入地址信息.
		tcp/udp/raw 都可以用, 但是不能进行tcp/ip 报头解包.
		可以修改io 函数的工作状态(flags=io 标志).
		[接受者[recv] 不 需要发送<确认报文>给发送者[send]]

	sendmsg()/recvmsg() socket 通用io:
		可发送多个数据缓冲区, 可接收多次数据到多个缓冲区中.
		需要填入地址信息, 可以修改io 函数的工作状态(flags=io 标志).
		可以进行tcp/ip 报头解包.
		[接受者[recv] 不 需要发送<确认报文>给发送者[send]]
		(sendmsg()/recvmsg() 属于0零拷贝技术的一种, 可以直接重新指定io 缓冲区, 减少内存拷贝)

	sendfile() 特殊io:
		file to 网卡缓冲区, 直接发送, 减少内部拷贝, 提高性能;

	总结:
		socket 的io 零拷贝技术, 主要是减少用户态拷贝到内核态的内存拷贝操作, 进而提高程序性能, 减少操作系统内部的内耗;
		socket 的io 零拷贝技术, 并不需要做特殊的改造, 只是在io 操作时, 选择符合io 零拷贝的io 操作, 就拥有io 零拷贝技术;
		符合io 零拷贝的操作有:
			* readv/writev()
			* sendmsg()/recvmsg()
			* sendfile() -- 特殊: 还能减少系统读disk 操作的时间消耗, 减少1次(you know 读disk 是一个慢操作right ?)





2.<disk io 类函数解析(从小到大排列)>: 
	* mmap()+write():
		通过mmap() 共享了内核态缓冲区&用户态缓冲区, 节省了一次内存拷贝;

	* splice():
		splice调用和sendfile非常相似, 用户应用程序必须拥有两个已经打开的文件描述符, 一个表示输入设备, 一个表示输出设备; 
		与sendfile不同的是, splice允许任意两个文件互相连接, 而并不只是文件与socket进行数据传输; 
		对于从一个文件描述符发送数据到socket这种特例来说, 一直都是使用sendfile系统调用, 而splice一直以来就只是一种机制, 它并不仅限于sendfile的功能; 
		也就是说sendfile是splice的一个子集; 

		splice()是基于Linux的管道缓冲区(pipe buffer)机制实现的, 
		所以splice()的两个入参文件描述符要求必须有一个是管道设备; 













