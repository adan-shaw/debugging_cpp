1.mmap 几个重要的基础概念:
	0.mmap 创建映射区时, 映射区大小不能为0, 否则会报错, 错误参数;
		mmap 创建映射区时, 写操作不能溢出(不能超出mmap映射区max, 否则需要重新分配mmap);

	1.mmap 最小分配一页, 4096;
		# 查看linux 页大小
		getconf PAGE_SIZE

	2.mmap 可以回写到被绑定的file 中的(打开哪个file,就回写到哪个file中);
		内存不足的时候, 操作系统首先会将被淘汰的mmap内存(使用率低就会被淘汰), 回写到file 中;

	3.mmap 只有在使用MAP_SHARED 属性的时候, 才能回写到file 中;
		MAP_PRIVATE 是只读关系, 能读文件, 但不能回写到file 中;
		MAP_ANONYMOUS 只是一块共享内存, 并不会绑定任何file;

	4.MAP_PRIVATE 只读映射一个空文件夹, 是没有意义的;

	5.mmap 支持file 部分映射(如果你不想映射整个文件, 只想映射这个文件一部分内容, 这点很常用);
		也支持拆分映射(一个文件多个映射);
		例如: 前4096只读映射, 后4096 只写映射;(不过这种奇怪的mmap 映射可能会报错!!一般不推荐这样用);

	6.mmap 是将文件地址, 通过进程的'虚拟地址空间的概念', 映射到'物理内存'中,
		进程对'虚拟地址空间'的访问, 就相当于直接对'物理内存'访问, 从而加快了读操作的效率;
		mmap 还支持将数据交换到file 中, 这样可以提高file 写操作的效率;
		一般说来, 进程在映射空间的对共享mmap的内容做任何改变, 并不会直接写回到磁盘文件中, 
		只有在使用MAP_SHARED 属性创建的mmap, 并且在调用munmap()/msync()后, 才能真正将数据写入到磁盘file 中;

	7.MAP_SHARED 共享的mmap映射, 可以通过:


	8.mmap 比unix socket 还要快很多;
		unix socket 还要read()/write(), 或者send()/recv();
		这些io 操作的性能, 跟mmap 相比, 根本没有可比性;

	9.mmap同样需要设计数据帧, 按照固定的帧大小读取数据;
		也像tcp 一样, 没有消息保护边界;

	10.mmap 在本机操作, 没有大小字节序的差异问题, 可以传输整形和浮点;

	11.mmap 在发生多进程竞争冲突的情况下, 也需要多进程同步手段;
		 使用信号灯/自旋锁


mmap 的主要作用是: 
		* 防止内存峰值期造成系统瘫痪.
		* 防止断电丢失数据
		* 减少内存的使用
		* 直接磁盘->网卡, 减少中间double copy !





2.映射关系可以分为两种:
	1.文件映射
		磁盘文件映射进程的虚拟地址空间, 使用文件内容初始化物理内存. 
	2.匿名映射(MAP_ANONYMOUS)
		初始化全为0的内存空间. 

	而对于映射关系是否共享又分为:
		1.私有映射(MAP_PRIVATE)
			多进程间数据共享, 修改不反应到磁盘实际文件, 是一个copy-on-write(写时复制)的映射方式. 
		2.共享映射(MAP_SHARED)
			多进程间数据共享, 修改反应到磁盘实际文件中. 

	因此总结起来有4种组合:
		1.私有文件映射(MAP_PRIVATE)
			多个进程使用同样的物理内存页进行初始化, 
			但各个进程对内存文件的修改不会共享, 也不会反应到物理文件中

		2.私有匿名映射(MAP_PRIVATE | MAP_ANONYMOUS)
			mmap会创建一个新的映射, 各个进程不共享, 
			这种使用主要用于分配共享内存(malloc分配大内存会调用mmap, mmap 也可以设置为private 不对其他进程共享). 
			例如:
				开辟新进程时, 会为每个进程分配虚拟的地址空间, 
				这些虚拟地址映射的物理内存空间各个进程间读的时候共享, 写的时候会copy-on-write. 

		3.共享文件映射(MAP_SHARED)
			多个进程通过虚拟内存技术共享同样的物理内存空间, 
			对内存文件的修改会反应到实际物理文件中, 他也是进程间通信(IPC)的一种机制. 

		4.共享匿名映射(MAP_SHARED | MAP_ANONYMOUS)
			这种机制在进行fork的时候不会采用写时复制, 
			父子进程完全共享同样的物理内存页, 这也就实现了父子进程通信(IPC).


	这个标志和以上标志是互斥的, 只能使用其中一个;





3.读写权限控制
	PROT_EXEC:  映射区域可被执行
	PROT_READ:  映射区域可被读取
	PROT_WRITE: 映射区域可被写入
	PROT_NONE:  映射区域不能存取





4.进程终止时, 也会自动解除映射[即自动调用munmap()];
	当某个mmap 映射没有任何属主的时候, munmap()将会将它释放;



