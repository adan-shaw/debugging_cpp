#
# 1.前言
#
/proc/sys/vm/ 里面的东西, 
本质上还是使用sysctl -p 使其生效, 
也就是, 本质上也是修改linux 内核参数.
jemalloc 或者是一个自动对接unix/linux 内核参数并进行优化的第三方内存管理器,
jemalloc 不一定就不能修改linux 内核参数, 来迎合自己的需求.
所以, ptmalloc, jemalloc 其实都是差不多的.





#
# 2.修改/proc/sys/vm/overcommit_memory内存分配策略, 只有一个数字, 参数含义如下:
#
vim /proc/sys/vm/overcommit_memory
参数可选值: 0、1、2

	0, 表示内核将检查是否有足够的可用内存供应用进程使用; 
		 如果有足够的可用内存, 内存申请允许; 
		 否则, 内存申请失败, 并把错误返回给应用进程.
		 (这个选项可以减少OOM 内存耗尽时, 操作系统强逼关闭部分进程的几率)

	1, 表示内核允许分配所有的物理内存, 而不管当前的内存状态如何.

	2, 表示内核允许分配超过所有物理内存和交换空间总和的内存





#
# 3.
#
在Linux系统下, 我们一般不需要去释放内存, 因为系统已经将内存管理的很好. 
但是凡事也有例外, 
有的时候内存会被缓存占用掉, 导致系统使用SWAP空间影响性能, 
此时就需要执行释放内存(清理缓存)的操作了. 

Linux系统的缓存机制是相当先进的, 
他会针对dentry(用于VFS, 加速文件路径名到inode的转换)、
Buffer Cache(针对磁盘块的读写)和Page Cache(针对文件inode的读写)进行缓存操作. 

但是在进行了大量文件操作之后, 缓存会把内存资源基本用光. 
但实际上我们文件操作已经完成, 这部分缓存已经用不到了. 
这个时候, 我们难道只能眼睁睁的看着缓存把内存空间占据掉么?

所以, 我们还是有必要来手动进行Linux下释放内存的操作, 其实也就是释放缓存的操作了. 



要达到释放缓存的目的, 我们首先需要了解下关键的配置文件"/proc/sys/vm/drop_caches"
这个文件中记录了缓存释放的参数, 默认值为0, 也就是不释放缓存. 
他的值可以为0~3之间的任意数字, 代表着不同的含义:(操作立即生效)
0 – 不释放
1 – 释放页缓存pagecache
2 – 释放回收slab分配器中的对象(包括目录项缓存和inode缓存)
		[slab分配器是内核中管理内存的一种机制,其中很多缓存数据实现都是用的pagecache.]
3 – 释放所有缓存(pagecache和slab分配器中的缓存对象)

