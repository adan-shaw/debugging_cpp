//pth线程池的设计思路
/*
	实际上, 实现怎么样的线程池, 具体要看业务需求;
	实时业务线程池, 分时业务线程池, 差异性很大;
	甚至, 单拿分时业务也说: 重数据流和轻数据流的线程池设计, 也有很大区别;

	因此, 没有那一种线程池, 是可以通用的, 具体不同业务, 就需要不一样的线程池, 这里只做个简单demo和分析;
*/



//fork() 多进程池(分时系统)
/*
	应用场景:
		分时系统, 业务量不大, 且每个任务之间的数据交换不多, 这种情况下, 可以考虑fork() 多进程线程池;
		如果对安全性要求很高, 要求子任务崩溃, 也不互相影响, 更不能影响服务器系统的情况下, 
		这种情况下, 也可以考虑用fork() 多进程线程池, 只不过性能消耗非常巨大;

	使用fork() 执行子任务, 数据共享, 由'void*共享内存'/redis 实现;
	其中:
		void*共享内存, 存储一个全局结构体, 共享比较频繁操作的小量数据, 主要是fork_pool的关键运行数据;
		redis, 存储业务数据;

	socket() + select() 异步设计:
		sfd_li, 单个select() 异步监听, 有io事件, 就fork()一个子进程去执行任务, 
						由子进程执行accept/read/write, 主线程永不阻塞, 用不进行io操作;
		sfd_cli,单个select() 异步/同步监听, 有io事件, 就在子进程中解决, 
						可阻塞, 可不阻塞, 反正io 操作性能也很慢(关键业务, 可非阻塞操作);
						也可以与redis(回环网络), mysql(局域网)等tcp/ip server 进行数据共享;
						最终, 在子进程中跑逻辑业务, 完成业务操作;

	ps:
		fork() + select() + socket(), 可以实现跨平台(cygwin, freebsd 应该都可以实现);
		跨平台能力强, 也是这个模型的优点之一;

	ps2:
		由于fork() 共享fd, sfd, 也就是sendfile() 也可以轻松共享;
		所以, 实际上流媒体服务器也有可能使用fork() 多进程池框架, 为什么?
			因为主机的资源丰富, 而流媒体服务器的io数据流压力大, 计算资源空闲, 网卡资源繁忙;
			这种情况下, 任务之间是互不影响的, 而且业务也不复杂(单纯下发数据),
			这种情况下, 使用fork() 多进程池框架, 也很适合;
*/



//pthread 多线程池(分时系统)
/*
	应用场景:
		分时系统, 业务量大, 业务量复杂, 但崩溃风险少, 可以使用;

	使用pth多线程池, 一定是追求性能的, 所以必须实现以下几点:
		* 固定线程数量, 通过条件变量'唤醒&等待休眠', 减少线程创建和销毁;

		* 使用普通线程即可, 分时系统不需要使用'内核轻进程';

		* 减少群惊问题, 尽量多地让线程忙起来, 只有在忙不过来的情况下, 才唤醒第二个线程;
			(为了保证实时性, 一般接8个任务, 就喂饱, 唤醒第二个线程, 开始工作, 如此类推;
			 具体设置多少个任务喂饱一个线程, 看业务类型, io操作时间是否很长, 等等, 具体业务, 具体分析)

		* 既然是多线程, 必然使用epoll 性能更好, 反正每个任务之间可以共享CLONE_VM内存(这也是设计初衷);
			使用epoll, 就只有一个epoll 了, 避免了一个子进程一个select() 的情况;

		* 由于共享CLONE_VM内存, 访问共享数据的时候, 非阻塞使用CAS乐观锁, 阻塞使用互斥锁/读写锁;

		* 重点: 避免任何可能触发系统崩溃的情况出现;

		...
*/



//pthread 多线程池(实时系统)
/*
	应用场景:
		因为需要使用'内核轻进程', 提高优先级, 提高响应速度, 提高实时响应速度;
		也一定要固定线程的数量, 通过条件变量'唤醒&等待休眠', 否则线程创建和销毁速度很慢, '内核轻进程'的创建和销毁更慢;
		所以说, 实时系统, 一定是使用多线程池的;

	使用pth多线程池, 必须实现以下几点(pthread 多线程池都差不多, 一样的):
		* 固定线程数量, 通过条件变量唤醒和休眠等待, 减少线程创建和销毁;

		* 减少群惊问题, 尽量多地让线程忙起来, 只有在忙不过来的情况下, 才唤醒第二个线程;
			(为了保证实时性, 一般接8个任务, 就喂饱, 唤醒第二个线程, 开始工作, 如此类推;
			 具体设置多少个任务喂饱一个线程, 看业务类型, io操作时间是否很长, 等等, 具体业务, 具体分析)

		* 既然是多线程, 必然使用epoll 性能更好, 反正每个任务之间可以共享CLONE_VM内存(这也是设计初衷);
			使用epoll, 就只有一个epoll 了, 避免了一个子进程一个select() 的情况;

		* 由于共享CLONE_VM内存, 访问共享数据的时候, 非阻塞使用CAS乐观锁, 阻塞使用互斥锁/读写锁;
			(实时线程执行任务过程中不能阻塞, 不能切换线程, 与分时多线程池, 有点不一样)

		* 重点: 避免任何可能触发系统崩溃的情况出现;

		...
*/



//进程池or 线程池的其它细节:
/*
	设计线程池的重点, 是根据:
		* 单次任务的计算时长(或者说操作时长), 
		* 是否允许抢占(优先权值), 
		* 是否有优先队列, 
		...
		等因素来决定的, 具体常见的问题有:
			* 群惊问题:		无论分时业务/实时业务, 都有群惊问题的困扰, 需要做到每次任务, 尽量少的唤醒worker线程;
			* 批量操作:		主要用在分时系统中, 在分时允许的情况下, 让单个线程一次处理几个任务, 提高线程利用率, 减少线程切换&&启动唤醒的消耗;
									(不过这样做需要业务支持, 数据io切片量大的业务可以考虑);
			* 线程检活:		分时业务/实时业务中都经常使用, 但实时业务检活汇报不会准时, 所以检活汇报如果要拿来作为重启线程的判断, 需谨慎;
			* 操作量统计:	统计线程接待任务的次数, 数据io总量, 存活时间, 起始时间, 休眠次数, 休眠时长等信息, 有助于后期维护, 调整业务;
			* io非阻塞:	线程池基本上都要使用io非阻塞, 因为一旦阻塞, 就会切换线程, 陷入休眠; 实时系统不允许切换线程, 分时系统切换线程也需要谨慎;
			* 抢占:			一般存在于实时系统中, 需要设置实时抢占权值, 才能实现抢占功能;
			* 优先队列:		任务队列中, 提供优先插入的操作, 实现优先队列(并不是通过构建两种不同优先级的线程实现优先队列);
			* 运行优先级:	worker线程的运行优先级, 绑定cpu 子内核等操作, 需要处理好, 提高线程池的效率;
			* 内核进程:		实时系统需要使用内核进程, 绑定轻进程, 提高优先级, 提高实时性;
*/
