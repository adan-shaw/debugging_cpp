# , , , , ,,, , , , ,,, ,,, , , ,  , , , ,, ,  , , ,, , , , , , ,, , ,, ,, ,
# text rules simple version for public:
# !_1.'行-字符长度'测试(how many char in one line):
# 1111111111111111111111111111111111111111111111111111111111111111111111111
# 邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵
# *************************************************************************
# !_2.标题命名规则(headline named rules):
# 		!_1.xxx:	'level 1' headline
# 		!_2.xxx:	'level 1' headline
# 		!_3.xxx:	'level 1' headline
# 			@_2.xxx:	'level 2' headline
# 				#_3.xxx:	'level 3' headline
# !_3.统一使用english US(英文)的标点符号, 作为编码统一标点字符.
# !_4.文件更改日志(file changed log):
# 		...
# , , , , ,,, , , , ,,, ,,, , , ,  , , , ,, ,  , , ,, , , , , , ,, , ,, ,, ,

#!/bin/sh

#
# 1.posix shell 函数定义的规则:
#
:<<!
*1.参数传入:
	 shell 函数不需要定义形参, 有多少实参直接传进去即可.
	 $0 = 函数名/shell 脚本自身的名字, 
	 $1 = 第一个实参, 
	 $2 = 第二个实参, 
	 如此类推.


*2.函数返回值:
	 通过内建宏变量'$?', 获取最近一次函数调用/子进程的结束返回值!!

	 '$?'的返回值,必须为'数字'字符串,不能为英文字母or其它任何类型的返回值.
	 而且数字范围必须为[0,255], 一共8bit.
	 正常返回"0"
	 异常返回值[-128,0)(0,128]; -1=255=全1


*3.通过'echo回显'返回字符串(可用于返回一串/多串复杂的结果返回):
	 你可以通过'echo回显', 返回任何你想返回的'特殊字符串'.
	 具体怎么分析这个"echo回显字符串", 那是一种技巧;
	 建议你不要打印太多复杂字符串, 清晰简单最好.
	 只有一串字符串最好.

	 "echo回显字符串"返回, 标准的调用方式是: tmp=$(func_name)
	 在遇到多串字符串的时候, 容易出现丢失的情况.
	 或者是for i in $tmp; 循环分析结果的时候, 出现各种问题!!
	 所以, "echo回显字符串"返回, 一般最好, 只有一串字符串!


*4.超复杂, 多串字符串返回:
	 如果返回结果, 过于复杂, 你可以直接echo "" > tmpfs 内存文件中,
	 然后再通过tmpfs 内存文件的读写操作, 分析结果.
	 这种存放函数执行结果, 到tmpfs文件, 再读出来分析的做法.
	 比"echo回显字符串"可靠.
	 但是牺牲了效率, 而且代码也很复杂, 容易造成多进程冲突(不过shell一般不需要用到多进程)



*5.function 关键字:
	 posix shell function 不支持function 关键字!!
	 所以, 只有bash shell, 都可以带关键字定义函数.
	 因此, 函数定义方式如下:
		 # bash shell
		 function func_name() {};
		 # posix shell
		 func_name() {};

*6.空函数
	posix or bash shell 都不允许存在空函数!! 会报错的

!



#
# 2.posix shell 的函数定义样板:
#
ftest() {
	# 显示输入的第1,2,3 个参数
	echo $1 $2 $3

	# 显示输入的所有参数
	echo $*

	# 显示输入参数的个数
	echo $#

	# 返回常量字符串
	return "123"
}






# 普通shell 函数, 通过8bit 数字字符返回.(在shell_source.sh 中做测试)
shell_func1() {
	echo "hello there, i'm shell_func_lib()."
	echo "调用函数时, 传入什么实参, 我就将实参'原封不动'返回.(测试返回:$ 1 = $1)"
	echo "因此, 传入实参的值范围, 必须是[-128,255], 8bit 所有可能的数字!! 数字only !!"
	return $1
}



# 通过'echo回显'返回字符串, 可以返回任意字符, 但一定要简洁, 而且不能多串.
echo2STDOUT() {
	# 为了清空std_out, 不出现杂乱字符串, 影响返回值, 所以将std_out 重定向到/dev/null
	ping 127.0.0.1 -c 4 > /dev/null
	
	# 通过'echo回显'返回, 传入什么, 返回什么;
	echo "$1"

	return "0"
}



# 空函数测试(会报错的)
:<<!
function empty_func_test() {
};
!

