# 0.什么叫'后台运行模式'(daemon 运行模式):
# 	控制台tty 运行程序的时候, 正常来说是前端执行的, 
# 	即占用tty 的输入输出, 也就是tty 阻塞;

# 	当'运行程序的命令'的最后加上 & 符号的时候, 
# 	<该程序>就会被拉到<后台运行>,
# 	此时tty 的'显示输出'和'命令输入'不会被影响,
# 	这就是: daemon 运行模式, 也叫'后台运行模式'.

# 	后台程序为当前tty 所有, 一个tty 可以运行多个后台程序.
# 	如果后台程序崩溃, 并不影响整个tty 继续运行.
# 	你可以直接关掉tty, 那么tty 内所有的后台程序都会结束.





# 1.常用的tty 管理查询命令($$ 表示tty 自身的pid)
cat /proc/$$/status | grep NSsid	# 查看会话会长id
cat /proc/$$/status | grep NSpgid	# 查看进程组长id
cat /proc/$$/status | grep PPid		# 查看父id

cat /proc/$$/status | grep Uid		# 查看进程属主
cat /proc/$$/status | grep Gid		# 查看进程属主组

cat /proc/$$/status | grep Threads # 查看进程一共有多少条线程

pstree -p $$ # 查看自身tty的pid 进程树关联





# 2.shell tty 的作业控制:
# 	shell tty 会为'每个后台进程'赋予一个<唯一作业号>
# 	%1 = 1 号作业进程,
# 	%2 = 2 号作业进程, 
# 	...(如是之)
# 查看当前tty 所有'后台作业进程'命令: jobs. 
# (现在的tty 已经有优化了, 你可以省略掉% 号, 直接用作业号表达也行)

# 2.0: 查看tty 控制太自身的pid
echo $$

# 2.1: 后台模式运行ping 程序
ping 127.0.0.1 &

# 2.2: 设置'后台作业进程'禁止向tty 输出, 
#      这样tty 就不会有任何字符显示了.(每个tty只能设置一次)
stty tostop

# 2.3: 显示所有'后台作业进程'
jobs
jobs -l # 查看'后台作业'的详细信息

# 2.4: Ctrl + Z = 挂起'当前作业进程'
#      Ctrl + C = 结束'当前作业进程'
#      (直接键盘操作, 都是指: 当前tty 前台作业进程)

# 2.5: 重新启动'已经暂停'的'后台作业进程', 并提到前台继续运行
fg %1 # 1 是作业编号

# 2.6: 重新启动'已经暂停'的'后台作业进程', 并提到后台继续运行
bg 2

# 2.7: 暂停某个'作业进程'运行(等同于Ctrl + Z)
kill -STOP %1

# 2.8: 结束某个'作业进程'运行(等同于Ctrl + C)
kill %1
kill -9 %1 # 慎用, 强制杀死'作业进程'命令, 有一点遗留问题.

# 2.9: 查看进程的演变树
# pstree -p $__pid





# 3.作业状态:
# +        # 最近第一个停止运行的'作业程序'
# -        # 最近第二个停止运行的'作业程序'
# Stopped  # '作业程序'已经暂停
# Running  # '作业程序'正在工作
# Done     # '作业程序'已经结束(正常完成任务)







