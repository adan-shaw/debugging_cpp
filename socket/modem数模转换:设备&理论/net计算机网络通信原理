#
# 1.数-模转换(数据0/1 与模拟信号的互相转换)
#
一般情况下, 无论是电信号, 还是无线电信号, 都是利用高低峰值, 来表示1/0的,
然后利用高频,高敏感,高精度的信号发射器, 高频,高敏感,高精度的接收器, 
来识别电信号/无线电信号, 进而解析出数据.





#
# 2.router/switcher 的实现
#
router/switcher 都有一个cpu, 高端的用FPGA, 低端的用单片机, 
CPU 有一个重要的参数, 即时钟频率(Ghz).



其实只是多了一个滤波电路, 本质上还是单片机io 口.
8051 有p0,p1,p2,p3 四组io口, 每一组8个io口
有的有4组, 有的只有两组. 常见的长方形的, 只有2组, 四方型的有4组
拓展io 口转为i^2c 进行二次转换不可能, 路由器, 单片机都是一级转换的.
所以, 每4个口, 一个芯片, 8 个口就要两个芯片了.
两个芯片之间传输, 那还要数据互相传输(这个两io口就行,而且不是传输数据, 而是进行同步操作, 数据缓冲在内存里面, 这两芯片可以互相访问.)

断网后仍然可以通电, 是因为网线中的电压电流, 都是单片机io 口.
所以如果网线过长, 信号衰减会很严重,必须使用中继器


无线电, 也是两块电池板, 组成一个信号铁棍的. 至少2 条棍以上, 组成全双工io 信号.
所以买无线电的时候, 如果只有一条棍, 很可能是: 半双工的.
3 条棍的, 我就不明白是什么意思了

无线电, 与电信号不一样. 无线电真的就是正负峰波发送数据的
电信号, 就是锯齿状峰波
光信号, 峰波??



其实正确的方向应该是:
	滤波器, 
	io 芯片组(处理基础io数据), 
	路由器主控芯片(这个芯片复杂linux 系统运行, 毕竟router 也是一个linux)




只要电平线下降了, 才通知cpu 有数据要读, 
于是紧急启动数据接收器, 然后再接受数据




信号发射器DAC, D/A 转换器
信号接收器ADC, A/D 转换器
这DAC, ADC是如何实现的?
答:
	一般计算机通信, 都有时钟信号线CLOCK, 数据信号线DATA, 至少两条线.
	发射数据时:
		网卡先拉低'时钟信号线CLOCK总线'(总线占用原则), 
		然后局域网内, 所有'数据信号线DATA'上'信号接收器ADC'都开始工作了.
		(不断感应接收_-__--__--_-_-_-_-__电波)

		网卡发送完毕, 再次拉高'时钟信号线CLOCK总线',
		最后局域网内, 所有'数据信号线DATA'上'信号接收器ADC'都停止工作了.


	发射数据时:
		一旦从主机, 感应到'时钟信号线CLOCK总线'被拉低, 
		就马上启用'数据信号线DATA'上'信号接收器ADC';

		一旦从主机, 感应到'时钟信号线CLOCK总线'再次被拉高,
		就马上关闭'数据信号线DATA'上'信号接收器ADC'.


	信号发射器DAC, 信号接收器ADC, 这两者的工作频率约定:
		信号发射器DAC的工作原理: 高频向线路触碰, 注入电信号波峰
		信号接收器ADC的工作原理: 高频感应线路的电信号波峰
	DAC && ADC, 是在入网的第一瞬间, 就约定了工作频率(10M/100M/1000M自适应)
	两个对应的网口, 工作频率自适应;
	不同的网口, 工作频率可以不一致, 具体需要看: router/switcher 的实现


(信号线)数-模波峰:
	电信号比较简单, 一般都是锯齿装波峰: _-__--__--_-_-_-_-__
	因为电信号比较容易控制,
		电信号发射器, 不停输出电冲击波即可
		电信号接收器, 不停解析电冲击波即可
	电信号, 比较简单直观.

	光信号, 也是比较简单, 类似电信号, 一般都是锯齿装波峰: _-__--__--_-_-_-_-__
	只不过光信号发射的不是电流, 而是光波,
	也不是采用高低峰波, 而是
	
	这下知道中继器都有什么作用了没?  信号放大.
	
	光中继, 中继增强信号, 必须接收信号了, 再重新转发.
	不能一边接收, 一边增强, 没有那么智能
	所以, 中继是有损耗的

	








