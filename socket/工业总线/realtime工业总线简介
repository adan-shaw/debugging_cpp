i2c总线: 
	双线串行, 带始终线, 最高64个接收器, 
	线路最高400Kbps, 最大容量是400pF, 最大值3mA电流, 电平: 0=[0,+1.5]V, 1=[3,5]V
	线路长度非常短, 小于200mm～300mm, 
	需要有信号放大电路辅助, 才能长距离传输, 但一般不顶用, 一般长距离传输, 不选i2c;





can总线:
	高速can标准:
		即CAN-ISO11898 标准, 线路速度在125kbps~1Mbps;
		双线串行, 带时钟线, 最高30个接收器, 高速线路少于40米(1Mbps), 超远线路10KM(5Kbps);

	lin标准:
		即CAN-ISO11519 标准, 线路速度在125kbps以下;
		双线串行, 带时钟线, 最高20个接收器
		最低配置, 可以做到单线模式;



can控制器与can接收器之间通信:
	一般使用符合UART 串行异步的通信标准, 进行通信;
	(最高集成30个can接收器)

can接收器与线路上面的元件之间的通信:
	一般使用时钟线+数据线, 双线通信, 串行实时, 协议的实现, 类似i2c;
	最低配置下, 直接去掉始终线, 协议不变;



最终:
	can控制器与can接收器之间, can接收器与线路上面的元件之间, 都使用一套协议;

	can控制器与can接收器之间:
		使用UART 标准的串行异步的通信标准, 与tcp/ip类似, 但不支持双通道, 半双工(2线);
		因此, can控制器与can接收器之间的通信, 也是载波帧听, 冲突检测;
		因此, socket编程中, 才有一个AF_CAN 协议簇;
		can接收器, 类似于电话线转网线的model;
		can控制器, 类似于一个专业交换机, 专门解析can协议, 还有can业务数据;

	can接收器与线路上面的元件之间:
		can接收器负责将can控制器发来的信号, 翻译成线路信号;
		can接收器负责将线路信号, 根据tcp/ip协议, 封装成数据包, 发送给can控制器;

	总的来说, can控制器 & can接收器, 都采用同一套协议;

	can同一套协议的优劣:
		虽然can接收器在处理数据的时候, 处理庞大的can协议, 有一定的压力, 
		但系统整体的性能更好, 更方便;
		只是地址位需求量比较大而已, 但也一般够用了(30 个地址位);

	can域网络中, 地址位太多, 是不行的, 
	主要是因为can协议是半双工的, 地址位太多, 载波帧听, 冲突检测, 地址占用线路导致的冲突会剧增;


