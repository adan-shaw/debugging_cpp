NATS分布式MQ消息队列系统:
	这种系统, 其实就是MQ类的基础应用, message queue;
	跟IBM-MQ, ActiveMQ 类似, 只不过是Go 语言实现的而已;

message queue服务器产品简介:
	ActiveMQ   (Java编写)
	Jafka/Kafka(Java编写, 同样是apache的项目, 没有大哥active MQ好)
	KafKa      (Scala编写)
	RabbitMq   (Erlang编写)
	Nats       (之前是Ruby编写, 现已修改为Go)
	Redis      (C语言编写)
	Kestrel    (Scala编写不常用)
	NSQ        (Go语言编写)
	ZeroMQ     (c++语言编写)
	IBM MQ     (c++语言编写)

message queue的区别:
	redis     没有消息到达确认;
	ZeroMQ    没有持久化, 有潜质的'非持久性MQ队列', 断电数据会丢失, 但并发量大, 同样也没有消息到达确认;
	active MQ 综合性能的apache软件, 功能最强;
	IBM MQ    综合性能的IBM软件, 功能最强, 付费软件;

	ZeroMQ/Redis 都没有实现消息到达确认, 
	redis 比ZeroMQ 功能多一点, ZeroMQ比redis 性能好一点;
	(所以, 一般情况, 不会出现ZeroMQ/Redis 联合使用的情况, 只需要用一个即可)

	使用Redis 的好处:
		方便, 神奇的, 持久性MQ队列, 持久性功能, 利用的是redis 持久化功能, 
		有一定间隔, 可能丢失命中[缺陷: 没有消息到达确认]

	redis的性能:
		数据量-每条消息-不应超过4k, 否则可能会带来性能地狱.
		详细看测试报告, 10K 的时候, 速度简直就是龟速, 其它时候, 速度一流!



大型MQ 的开发优势:
	* 节省时间, 节省项目成本, 提高项目完成的可能性, 便捷性, 可维护性;
	* 可以轻松搭建大型app 应用群, 负载能力, 速度, 有序, 可靠性, 可拓展性都非常高;
		[active MQ 也是apache hadoop 框架的'基础组件'之一]
	* MQ 产品已经成形, 社区强大, 稳定安全;

	ps:
		MQ 一般只是用于app 应用server, 也可以用作web app;
		但对于web 网站, 资源型server, 不太适用;



message queue的功能:
	一般mq 都有4种模式, 订阅模式只是其中一种;
	功能弱的开源mq, 可能就没有那么多模式了, 毕竟很多模式需要付费;

	四种常见的MQ队列模式:
	1.direct模式(直接模式)
		生产者将消息发送到交换器; 
		MQ队列根据routing_key接收消息, 消费者消费queue接收到的消息.
		生产者也可以直接将消息发送给queue, 而不设定Exchange以及路由键; 

	2.fanout模式(广播/组播)
		生产者将消息发送到交换器; 
		MQ队列接收所有消息, 消费者消费指定queue接收到的消息; 
		(取代udp 组播)

	3.topic模式(匹配/订阅)
		生产者将消息发送到交换器; 
		MQ队列根据routing_key接收消息, 没有对应的routing_key则消息丢失; 
		消费者消费queue接收到的消息; 

	4.header模式(匹配)
		生产者将带有header消息发送到交换器; 
		MQ队列根据交换机接收消息, 并根据header消息与MQ队列匹配; 
		消费者消费queue接收到的消息;

	此外还有[消息到达确认, 消息完整性校验, 消息对称加密等功能];
	此外还有: MQ 客户端登录验证功能, 基本上就是: 一个MQ, 网络app 开发全无忧, 要学;



message queue的实用意义:
	由于目前的应用规模十分巨大, 已经不可能自己编写网络传输接口了, 
	所以直接使用MQ, 其实是更可靠的办法, 也兼容更大型的网络应用;

	传统网络编码, 正在被这种MQ消息队列产品取代, 
	实际上自己手写网络编码, 也不一定安全稳定;
	目前大量的网络应用, 都是基于MQ队列快速实现的, 可以节省开发时间, 最快的速度实现软件功能, 上线;

	就算你会网络编码, 也是套MQ消息队列比较安全, 
	现在解决问题, 都是在MQ 的基础上, 再做业务拓展的;
	所以, 学习如何使用MQ, 是一个比较重要的任务;

	一般app 服务器, 如微信, 支付宝之类的, 都会使用MQ 的;
	所以, MQ 技术可以说是网络app 应用的未来趋势, 做app 应用必学;





