MQ时代的介绍(为什么说现在是MQ 时代):
	计算机的发展, 在1990 年开始, 自从tcpip 完善之后, 在1990-2010 年的时代里面, 互联网(http) 一直是计算机发展主命脉;
	但由于人类的计算机:
		* 越来越先进, 
		* 设备越来越小, 
		* 芯片越来越小, 
		* 规模越来越大, 
		...
	因此, 老式的http 协议, 已经不能满足人类的需求了, 新型的应用服务, 越来越复杂, 要求越来越多!!
	老式的http 及其衍生协议, 基本上, 停留在传统互联网业务中了,
	新型的app 应用服务, 基本上都会用MQ 系统来替代, 无论是互联网应用, 还是工业应用;



为什么需要MQ?
	因此老式tcpip 的传输控制过于复杂, 使用MQ 框架简化传输细节, 提高开发效率, 让更多程序员参与到基于MQ 的网络应用app 开发中, 
	这种打法, 也是借鉴http 协议的打法, 参考http 在互联网中的成功经验!!

	因此, 目前无论是互联网MQ, 还是工业网MQ, 都有大量新型的协议, 来填充各种不同行业的业务;





老式http 的拓展方案():
	HTTP
	websocket  (基于nginx, apache 这类http 的网关支持, 也需要http server 的支持)



常见的互联网MQ:
	ActiveMQ   (Java编写, 支持订阅模式)
	Jafka/Kafka(Java编写, 同样是apache的项目, 没有大哥active MQ好, 支持订阅模式)
	KafKa      (Scala编写, 但Scala 类似于java, 支持订阅模式)
	RabbitMq   (Erlang编写, 支持订阅模式)
	Kestrel    (Scala编写不常用, 但Scala 类似于java)

	NSQ        (Go语言编写)
	NATS4Golang(之前是Ruby编写, 现已修改为Go)

	IBM MQ     (c++语言编写)

	Redis      (c/c++语言编写)
	ZeroMQ     (c/c++语言编写)



常见的工业网MQ:
	Redis      (c/c++语言编写)
	ZeroMQ     (c/c++语言编写)

	MQTT       (前端是跨平台库, 支持多种语言; 后端c/c++; 数据密集量较大, 对终端设备的cpu 性能有一定要求)
	COAP       (c/c++语言编写; 数据密集量较小, 对终端设备的cpu 性能要求较低)
	LwM2M      (基于MQTT/COAP)

	SOMEIP     (c/c++语言编写; 数据密集量非常大, 对终端设备的cpu 性能要求很高)
	DDS        (c/c++语言编写; 数据密集量非常大, 对终端设备的cpu 性能要求很高)





