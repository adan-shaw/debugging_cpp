* vsomeip 支持跨平台, 支持android/linux/qnx;
	这样导致vsomeip 可能在航空业, 机器人行业, 可能用得不多, 但vsomeip 在汽车行业一定用得很多,
	因为vsomeip 可以跨平台编译, 而且代码质量较浅c++, 可靠性高;

	目前的普通商业乘用车, 基本都是ADAS 系统的车辆, 在车控系统部分, 使用vsomeip 应该可以比较好的满足设计需求;
	后期如果需要做AD 纯自动驾驶车辆, 那是后续发展所需要考虑的情况, 但就目前而言, 可能更偏向于先实现ADAS 商业乘用车;

	vsomeip 和libzmq 差不多, 也是一个库, 这也为了vsomeip 跨平台开发做准备的, 既然它是一个库, 才好跨平台嘛;



* vsomeip 使用的是回调函数注册的方式, 实现mq 功能, 这里面会有弊端:
		- 回调函数触发之后, 在回调函数内部如何跟外部进行数据共享:
				static静态/全局变量? 多线程访问会有冲突
			回调函数的格式又是固定的, 所以进行数据共享会有问题, 编码的时候要想想办法进行数据共享;
			至少需要共享的变量:
				~ vsomeip app 实体变量
				~ vsomeip runtime 实体变量



* vsomeip 支持:
		* req-rep 模式, 
		* 订阅发布模式(vsomeip叫'notify通知 & sub订阅'模式, 一样的), 
		* 管道模式(应该也支持),
	这些常见的mq 模式, 也可以照样在vsomeip 上面复制粘贴;



* vsomeip 运行配置json 文件, 很多配置是和编程过程中的参数对齐的, 需要调整vsomeip 运行策略的时候, 注意与*.cpp 代码进行联动修改;
	关于vsomeip 的运行配置文件, 其实和opendds, fastdds 的模式, 也是一样的, 类似的;
	高性能实时MQ 应用, 基本都是这个套路;



* vsomeip 的二进制序列化工具(类似google protobuff, 有待深入探讨)



* someip 协议官网, 有english 版本的协议细节描述, 具体版本有:
		* R23-11 (最新)
		* R22-11
		* R21-11
		...
		(更老的版本不再展示)





总结:
	vsomeip 和普通的实时MQ 应用开发, 没有多大区别, 只是换了一个框架, 换了一个侧重点而已, 套路都是差不多的, 横向拉通这部分相关技术不难, 都是通信MQ;





