#
# 1.三种服务质量 (QoS): 
#
* 最多一次Sender 发送的一条消息, Receiver 最多能收到一次, 
	也就是说Sender 尽力向 Receiver 发送消息, 如果发送失败, 也就算了; 

* 只有一次Sender 发送的一条消息, Receiver 确保能收到而且只收到一次, 
	也就是说Sender 尽力向 Receiver 发送消息, 如果发送失败, 会继续重试, 直到 Receiver 收到消息为止, 
	同时保证 Receiver 不会因为消息重传而收到重复的消息; 

* 最少一次Sender 发送的一条消息, Receiver 至少能收到一次, 
	也就是说Sender 向 Receiver 发送消息, 如果发送失败, 会继续重试, 直到 Receiver 收到消息为止, 
	但是因为重传的原因, Receiver 有可能会收到重复的消息; 





#
# 2.MQTT协议
#
MQTT协议中有三种身份: 
	发布者 (Publish)、
	代理 (Broker)(服务器)、
	订阅者 (Subscribe); 

其中:
	* 消息的发布者和订阅者都是客户端, 
	* 消息代理是服务器, 消息发布者可以同时是订阅者; 

MQTT 传输的消息分为: 主题(Topic) 和负载(payload) 两部分, 其中:
	* Topic: 可以理解为消息的类型, 订阅者订阅 (Subscribe) 后, 就会收到该主题的消息内容(payload)
	* payload: 可以理解为消息的内容, 是指订阅者具体要使用的内容

MQTT协议一般适用于:
	* 设备数据采集到端 (Device->Server, Device->Gateway), 
	* 集中星型网络架构 (hub-and-spoke), 

MQTT协议一般不适用设备与设备之间通信, 设备控制能力弱, 另外实时性较差, 一般都在秒级; 

总体来说:
	MQTT 适合一些慢速终端设备, 如: 物联网终端, 响应速度不需要那么快, 反倒需要节约能量, 节约通信带宽的设备, 物联网终端就很适合;





#
# 3.DDS协议
#
以下是DDS 协议的特点:
	• 它是一种无代理协议, 主要用于M2M 和IoT 应用程序; 
	• 它是会话层协议; 
	• 它不使用代理, 而是使用数据写入器和数据读取器; 
	• 与MQTT 一样, 它也是没有代理的发布/订阅协议; 
	• 它有23 个 QoS 级别, 包括安全性、优先级、可靠性、紧急性、持久性等; 
	• 让我们看看DDS 协议的工作情况:
			- 发布者分发要传递的感官数据; 
			- 数据写入器部分与发布者交互, 并将任何更改发送给订阅者; 
			- 数据阅读器读取发布的数据并传送给订阅者; 
			- 订阅者需要订阅的主题只是感官数据; 

总体来说:
	DDS 高度实时性, 数据密度非常高, 非常小的控制信号数据, 而且是通过ETH 以太网传输的(非CAN/LIN), 这时候就需要DDS;
	DDS 一定程度上, 就是用来取代CAN/LIN 的新型ETH 以太网实时总线(伪实时总线);
	ps:
		只要ETH 以太网的设备的波特率(或者说线速度)上去了, 响应速度加快(调到最快), 不一定就比CAN/LIN的实时性要差;
		当然的, 把ETH 以太网的设备的波特率(或者说线速度)调上去, 那么其网络吞吐量肯定会下跌, 肯定不如分时ETH 以太网那样大的网络吞吐量, 
		但实际上实时ETH 以太网设备的网络吞吐量, 也不会比分时ETH 以太网设备的网络吞吐量差太多;



