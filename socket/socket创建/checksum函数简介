#
# checksum()函数简介:
#
TCP/IP 的 checksum()函数通常是由操作系统或网络库提供的, 而不是由应用程序开发者自己实现的; 
不同的操作系统和网络库可能有不同的实现方式(主要是cpu 架构和效率问题);

//unsigned short csum(const unsigned short *ptr, int nbytes);//不知道为什么这个函数已被删除了
extern __wsum ip_fast_csum(const void *iph, unsigned int ihl);//这个函数可以代替csum

该函数接受一个指向数据缓冲区的指针和数据长度, 并返回计算得到checksum 值(unsigned short); 
这个函数是在 <netinet/in.h> 头文件中定义的;


checksum()函数[16 位校验和计算]:
	IP/ICMP/IGMP/TCP/UDP等协议的校验和算法都是相同的, 
	采用的都是将数据流视为16位整数流进行重复叠加计算; 

	* 为了计算检验和, (必须)首先把检验和字段置为0;(因为计算字段, 也是数据的一部分, 所以必须先置0)
	* IP/ICMP/IGMP/TCP/UDP等协议, 都有一个unsigned short 数据位, 所以, 都需要算一次检验和;

	checksum 简单计算方法:
		ip checksum = csum(ip头) + csum(ip负载)
		icmp checksum = csum(icmp头) -- icmp 一般没有报body, 所以只算报头
		igmp checksum = csum(igmp头) -- igmp 一般没有报body, 所以只算报头
		tcp checksum = csum(tcp头) + csum(tcp负载)
		udp checksum = csum(udp头) + csum(udp负载)

	checksum 详细结算方法:
		然后, 对有效数据范围内中每个16位进行二进制反码求和, 结果存在检验和字段中, 如果数据长度为奇数则补一字节0; 
		当收到数据后, 同样对有效数据范围中每个16位数进行二进制反码的求和; 
		由于接收方在计算过程中包含了发送方存在首部中的检验和, 因此:
			如果首部在传输过程中没有发生任何差错, 那么接收方计算的结果应该为全0或全1(具体看实现了,本质一样); 
			如果结果不是全0或全1, 那么表示数据错误; 



#
# checksum()函数的效率需求:
#
由于每一帧网络数据, 都会算校验和, 
因此校验和算法效率, 服用率非常高, 是比较重要的, 
cpu 可能会对齐进行硬件加速优化, 因此普通c 语言算checksum()函数, 可能都不适用了, 得用汇编硬件加速;

当然, 如果用汇编语言实现计算速度会快得多, 对于不同的CPU体系, 需要各自对应编写不同的汇编, 在Linux内核源代码中有各种CPU体系的IP校验和计算源代码; 





#
# 这部分可能是无效的, 没用的[主要还是看<netinet/in.h> 里面的csum()]
#
在Linux内核中进行网络编程时, 可以使用checksum函数来计算校验和; 该函数位于include/linux/net.h头文件中的__wsum类型定义下面; 

#define __force_memcpy(dst, src) \
    do { memmove((void *) dst, (const void *) src, sizeof(*src)); } while (0)

static inline unsigned short csum_fold(unsigned int sum);

/* Compute the checksum of a memory block at buff with length len */
extern __wsum ip_fast_csum(const void *iph, unsigned int ihl);

/* Compute the checksum of a packet header and data buffer */
extern __wsum tcp_v4_check(struct tcphdr *th, struct sk_buff *skb,
                           const struct net_protocol *prot,
                           unsigned char *rawpkt, int rawlen);

/* Compute the checksum of an IP datagram fragment */
extern __wsum frag_check(int hlen, u32 saddr, u32 daddr, u8 protocol,
                         struct sk_buff *frags[], int nfrags, int offset);

/* Compute the checksum of a TCP segment */
extern __wsum tcp_segmentation_point(u16 mss, u32 seq, u32 endseq,
                                      u32 win, u32 tsval, u32 tsecr,
                                      bool is_syn, bool is_fin, bool is_urg,
                                      bool is_ecn, bool is_ack, bool is_psh,
                                      bool is_reset, bool is_strict,
                                      bool is_dummy, bool is_retransmit,
                                      bool is_partial, bool is_last,
                                      bool is_first, bool is_data,
                                      bool is_tcpdump, bool is_ipv6,
                                      bool is_icmp, bool is_udp,
                                      bool is_igmp, bool is_esp,
                                      bool is_ah, bool is_gre,
                                      bool is_pppoes, bool is_l2tp,
                                      bool is_vrrp, bool is_hsr,
                                      bool is_mpls, bool is_geneve,
                                      bool is_stp, bool is_cfcp,
                                      bool is_llc, bool is_sctp,
                                      bool is_arp, bool is_rarp,
                                      bool is_ether, bool is_loopback,
                                      bool is_fragmented, bool is_multicast,
                                      bool is_broadcast, bool is_unicast,
                                      bool is_local, bool is_forwarding,
                                      bool is_inbound, bool is_outbound,
                                      bool is_routable, bool is_unroutable,
                                      bool is_nonroutable, bool is_discard,
                                      bool is_error, bool is_drop,
                                      bool is_duplicate, bool is_reserved,
                                      bool is_invalid, bool is_unknown,
                                      bool is_ignored, bool is_notrack,
                                      bool is_noexpire, bool is_deprecated,
                                      bool is_obsolete, bool is_expired,
                                      bool is_special, bool is_private,
                                      bool is_shared, bool is_linklocal,
                                      bool is_site, bool is_global,
                                      bool is_wellknown, bool is_benchmark,
                                      bool is_example, bool is_test,
                                      bool is_reserved_by_rfc,
                                      bool is_reserved_for_system,
                                      bool is_reserved_for_user,
                                      bool is_reserved_for_internal,
                                      bool is_reserved_for_futureuse,
                                      bool is_reserved_for_assignment,
                                      bool is_reserved_for_testing,
                                      bool is_res);
