typedef unsigned long size_t
typedef unsigned long int ssize_t


typedef int socklen_t


uint32_t htonl(uint32_t);		//host字节序->net字节序  unsigned long int
uint16_t htons(uint16_t);		//host字节序->net字节序  unsigned short

uint32_t ntohl(uint32_t);		//net字节序 ->host字节序 unsigned long int
uint16_t ntohs(uint16_t);		//net字节序 ->host字节序 unsigned short





不同的CPU有不同的字节序类型, 这些字节序是指整数在内存中保存的顺序, 这个叫做主机序, 最常见的有两种:
	1.Little endian: 将低序字节存储在起始地址
	2.Big endian: 将高序字节存储在起始地址

	LE little-endian(小端):
		最符合人的思维的字节序
		地址低位存储值的低位
		地址高位存储值的高位
		怎么讲是最符合人的思维的字节序, 是因为从人的第一观感来说
		低位值小, 就应该放在内存地址小的地方, 也即内存地址低位
		反之, 高位值就应该放在内存地址大的地方, 也即内存地址高位
	BE big-endian(大端):
		最直观的字节序
		地址低位存储值的高位 
		地址高位存储值的低位
		为什么说直观, 不要考虑对应关系 
		只需要把内存地址从左到右按照由低到高的顺序写出
		把值按照通常的高位到低位的顺序写出
		两者对照, 一个字节一个字节的填充进去

