tcp 端口概述: 
	传输层采取16 位端口号来区分同一主机上的应用程序的通信服务.
	0-1024:      特权端口, 只有CAP_NET_BIND_SERVICE 进程可以绑定到这个端口上面
	1024-41951:  应用程序可注册的端口
	49152-65535: 临时端口, 即是INADDR_ANY

	你可以修改/proc/sys/net/ipv4/ip_local_port_range 来改变临时端口的区域;
	显示当前临时端口命令:
		cat /proc/sys/net/ipv4/ip_local_port_range





udp 端口概述:
	udp 端口实际上和tcp 都是一样的用法的, 就算是udp 组播, 组播只跟组播ip 地址有关, 接收端口, 跟tcp 是一样的;
	这是af_inet 协议簇的特点, 
	因此, 上面的端口范围, 实际上在udp 端口中也适用;





端口重用:
	由于网卡网口的混杂模式技术的出现, 所以就会出现地址重用, 端口重用的问题;
	(由于网络程序群集上限, 网络数据分析, 网络流量监测等需求的出现, 地址重用/端口重用的功能场景, 会增多)

	跟raw 原始套接字和packet 链路层套接字的区别一样,
	开启地址重用, 端口重用, ip 报文填充, 通过修改socket 属性setsocktop() 就可以实现;
	但要实现混杂模式, 就必须使用af_packet 协议簇进行操作;

	高端的网络群集分发,
	网络数据分析, 
	网络流量监测,
	...等等,
	这些操作都离不开最基本的af_packet 混杂模式, 即0.0.0.0;

	一个网卡网口, 可以开启混杂模式, 但一个网卡网口, 只能开启一次混杂模式;
	而混杂模式, 也只能对具体某个网卡网口实施, 不能跨两个or 两个以上的网卡网口实现,
	也就是混杂模式与网卡网口, 是一对一的关系;





socket addr 重用的意义:
	sfd close(), 一般不会立即关闭, 而是需要经历TIME_WAIT的过程后, 才会关闭socket;

	sfd shutdown(), 可以蔑视TIME_WAIT的过程, 直接通知client 不用等了, 直接关闭socket;
	但shutdown() 使用起来非常麻烦, 不可能每个失败操作, 都可以shutdown(), shutdown() 是主动的, 不应该常用;


	因此, 想要忽视TIME_WAIT的过程的办法, 有三个:
		* 重用该addr, 即便占用, 也不影响;
			addr 重用可以让两个socket 能同时占用一个addr, 防止TIME_WAIT的过程导致addr 占用的问题;

		* 当然也可以shutdown(), 但只能单次操作, 没法一一应对意外关闭的情况;

		* 或者直接设置socket 属性为SO_DONTLINGER, 不允许Linger, 这样也可以快速关闭socket 而忽视TIME_WAIT的过程;



socket port 重用的意义:
	混杂模式, 手动混杂模式, 一个端口两个app server;


