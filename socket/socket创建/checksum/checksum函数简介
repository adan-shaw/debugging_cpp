#
# 1.checksum()函数简介:
#
在C语言中, 'csum()校验和'函数并不是标准库的一部分, 
因此没有特定的头文件包含'csum()校验和', 这个函数通常是由程序员根据需要自行实现或通过使用第三方库来实现的; 
要实现一个'csum()校验和'函数, 你需要根据自己的需求和数据格式编写相应的代码;
ps:
	如果操作系统或网络库提供checksum() 函数, 则应用程序开发者不应该自己实现的;
	(自己实现, 主要算法效率低的问题, 公版可能有cpu 架构硬件加速, 不同的操作系统和网络库可能有不同的实现方式); 

常见的TCP/IP 的checksum()函数:
	* ip_fast_csum():
			Linux 内核网络栈中用于计算IP'csum()校验和'的一个快速函数;
		头文件:
			<linux/skbuff.h>
		注意:
			ip_fast_csum() 是内核态的, 用户空间的应用程序是不可见的;
			这个函数是在内核态下用于处理网络数据包等底层任务的; 

	* inet_cksum():
			用于计算 IP、TCP、UDP 等协议的'csum()校验和'; 这个函数是 BSD 系统中的一部分, 并且在许多 Unix-like 系统中都可用;
		头文件(debian linux 找不到这个函数):
			<netinet/in.h>
			<netinet/ip_icmp.h>
		注意:
			inet_cksum() 是用户空间的'csum()校验和'函数, 内核态程序不可用;

	* csum_tcpudp_magic() / csum_ipv6_magic():
			用于计算 IP、TCP、UDP 等协议的'csum()校验和';
		头文件(debian linux 找不到这个函数):
			<linux/in.h>
		注意:
			csum_tcpudp_magic() / csum_ipv6_magic() 是内核态API, 用户态不可用;

	ps:
		libpcap 是一个用于网络流量捕获的库, 它本身并不直接提供TCP/IP 'csum()校验和';

		//unsigned short csum(const unsigned short *ptr, int nbytes);//不知道为什么这个函数已被删除了, 这个函数也是内核态的?
		extern __wsum ip_fast_csum(const void *iph, unsigned int ihl);





#
# 2.checksum()函数的效率需求:
#
TCP/IP 协议族中的 TCP、UDP、ICMP、IGMP 和 IP 协议, 都使用了 checksum(校验和), 来检测数据包在传输过程中是否发生了错误;
Checksum 的计算是基于数据包中的每个字节, 并使用一种特定的算法来生成一个 16 位的值;

接收方会重新计算 checksum, 并与发送方提供的值进行比较, 以确定数据包是否在传输过程中被损坏;
(因此checksum 算法的使用量比较巨大, 每一帧数据都要算一次, 一般来说, 都有cpu 硬件加速来计算checksum)

由于每一帧网络数据, 都会算'csum()校验和', 
因此'csum()校验和'算法效率, 服用率非常高, 是比较重要的, 
cpu 可能会对齐进行硬件加速优化, 因此普通c 语言算checksum()函数, 可能都不适用了, 得用汇编硬件加速;

当然, 如果用汇编语言实现计算速度会快得多, 对于不同的CPU体系, 需要各自对应编写不同的汇编, 在Linux内核源代码中有各种CPU体系的IP'csum()校验和'计算源代码; 

ps:
	计算checksum 是一个比较繁琐的工作: 
		发送端, 需要计算checksum, 来保证数据的完整性, 安全性;
		接收端, 需要重新计算checksum, 以防止数据被篡改/数据不完整/数据损坏;
	因此, 每一帧数据的收发双方, 都要至少算一次checksum, 或者更多: ip 算一次, tcp 算一次, 哈哈;
	因此checksum 的计算效率, 也蛮重要的, 对于网络程序来说;






