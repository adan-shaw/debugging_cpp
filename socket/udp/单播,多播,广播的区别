//1.udp 服务器bind 绑定端口的原理
/*
	udp 服务器bind 绑定端口, 类似tcp listen() 端口, 也会拷贝套接字属性;
	但udp 没有握手过程, 服务器需要获取客户端的ip+port, 并记录下来, 当作回发信息的时候使用;
*/



//2.单播,多播,广播的区别
/*
	单播:
		udp 点对点, 类似tcp;
		实际上tcp也是一帧一帧数据发出去的, 跟udp没啥区别, udp也可以点对点.
		但数据安全, 完整性/正确性保障, udp需要用户自己实现.
		udp 比tcp 点对点的不足:
			1.udp 不能扛冲击(没有握手机制), 防止伪造数据攻击, 各种安全功能要自己搭建;
			2.网络传输中丢失机会会更高, 也没有应答机制, 收到数据没有应答回复;
			3.丢包重发机制要自己建;
			4.数据接收, 同样需要重排, 而且可能会有rbuf接收缓冲区溢出的问题;
			5.(以后再补充, 差不多了)
		ps:
			(点对点, 基本不用udp, 别浪费时间, tcp 多好, 简单方便, 还不用自己实现太多复杂功能)


	多播[或者叫组播](类似internet dns 解析服务):
		A主机创建multi_cast 地址后, 其他主机就可以通过gethostbyname()获取'多播组'(多播主机地址列表)了;
		A主机负责维护'多播组', 更新重发/关闭通知等.
		A主机负责提供多播搭建的询问服务.

		多播可以跨网络多播, 同样可以在互联网上面做多播;
		(但实际上需要igmp 多播路由器, 维护igmp 协议, 要么你自己在服务器实现一套维护igmp 的逻辑)

		多播地址 = gethostbyname(需要用inet_pton 创建)
		interface = 随意ip 分配
		要接收多播数据, 需要先加入'多播组'(多播主机地址列表).

		UDP组播的基本步骤:
			建立socket
			socket和端口绑定
			加入一个组播组
			通过sendto / recvfrom进行数据的收发
			关闭socket

		另外:
			在互联网上, 轻量应用数据, 用tcp 做'逻辑轮询,遍历发送'的伪多播, 实际上也是可行的, 看业务需求;
			这样轮询单播, 主打: 轻量, 安全, 容易编码实现, 工程量小;


	广播:
		每个socket 都是独立体, 仅在局域网内广播;
		谁打开了broadcast setsocketopt() 选项, 谁就可以接收'局域网广播数据';
		只要局域网内'任何一个成员'发广播数据, 局域网内'全体打开broadcast setsocketopt() 选项的sfd'都会收到数据.

		现在的网络设备都会阻止广播包, 防止广播风波的问题, 但不会拒绝多播报文.
		ps: 也可以修改路由器配置, 接收广播报文;
*/
