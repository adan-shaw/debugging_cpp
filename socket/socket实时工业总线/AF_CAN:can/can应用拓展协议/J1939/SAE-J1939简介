1.SAE J1939协议:
	SAE J1939协议是美国汽车工程协会(SAE)的推荐标准;
	SAE J1939(以下简称J1939)是美国汽车工程协会(SAE)的推荐标准, 用于为中重型道路车辆上电子部件间的通讯提供标准的体系结构; 

	它由"卡车与大型客车电气与电子委员会"下属的"卡车与大型客车控制和通讯网络附属委员会"开发编写; 
	名词解析:
		卡车与大型客车电气与电子委员会(Track & Bus Electrical & Electronics Committee)
		卡车与大型客车控制和通讯网络附属委员会(Track & Bus Control and Communications Network Subcommittee)

	J1939基于德国Bosch公司(Robert Bosch GmbH)开发的控制器局域网络(CAN: Controller Area Network), 可达到250Kbps的通讯速率; 
	它描述了重型车辆现场总线的一种网络应用, 包括CAN网络物理层定义、数据链路层定义、应用层定义、网络层定义、故障诊断和网络管理; 

	在SAE J1939协议中, 不仅仅指定了传输类型、报文结构及其分段、流量检查等, 而且报文内容本身也做了精确的定义; 
	J1939是在商用车辆、舰船、轨道机车、农业机械和大型发动机中应用最广泛的应用层协议; 

	J1939协议有如下特点: 
		* J1939使用的波特率典型值为250K, 也能支持500K; J1939 CANID 使用29bit的CAN扩展帧; 
		* 大部分J1939消息都是在CAN总线上以广播形式发送, 部分数据可以通过请求的方式进行获取; 
		* J1939消息由18bit的PGN(Parameter Group Numbers 参数组编号)进行识别, J1939的信号称为SPN(Suspect Parameter Numbers 可疑参数编号); 
		* J1939的消息以intel字节序进行发送, J1939传输协议最大支持1785字节的PGN; 





2.SAE J1939协议的网络应用:
	1、J1939物理层(基于J1939-11/15)
	2、J1939数据链路层(基于J1939-21)
	3、J1939网络层(基于J1939-31)
	4、J1939应用层(基于J1939-71)
	5、J1939网络管理(基于J1939-81)
	6、J1939诊断(基于J1939-13/73)





3.SAE J1939协议的网络层分析:
	第一层物理层:    描述在其它事物中与物理媒介的电子接口; 
	第二层数据链路层: 描述通过基于CAN 2.0B技术规格的CAN的数据通信; 
	第三层网络层:    主要描述两个网络部分间针对报文传输的网桥的功能, 并且只与 J1939网桥实现相关; 
	第四层传输层:    基本上描述的是针对报文申请模式、确认传输和大数据块的分段传输的各种网络服务; 
	第七层应用层:    描述实际的数据(参数或带有值域的网络变量、分辨率、物理单元和传输类型); 每个报文无歧义地对应一个数(参数组数); 

	由于网络管理(基于J1939-81)可以被当作一个分离的单元, 能直达硬件(第一层), 
	因此在这个层模型中, 该模块是作为右手边的一个独立的功能块; 
	网络管理基本上包括自动分配或决定节点地址(即插即用原则); 
	在SAE J1939中没有定义节点监视, 因而必须在应用时通过循环报文实现; 





4.J1939 协议栈在'BMS 电池管理系统'和'充电机'中的应用:
	国标GB/T 27930-2015规定:
		电动汽车非车载传导式充电机(以下简称充电机), 
		与电池管理系统(Battery Management System,以下简称BMS)之间,
		基于控制器局域网(Control Area Network,以下简称CAN)的通信物理层、数据链路层及应用层的定义;

		此标准适用于采用GB/T18487.1规定的充电模式4的充电机与BMS之间的通信, 也适用于充电机与具有充电控制功能的车辆控制单元之间的通信;
		在这部分中, 我们需要关注到SAE-J1939-21:2006(商用车控制系统局域网CAN通信协议, 第21部分:数据链路层),
		与SAE-J1939-73:2006(商用车控制系统局域网CAN通信协议, 第73部分:应用层+诊断); 

	实际上欧洲执行的是ISO-15118标准, 
	而日本则执行的是CHAdeMO标准, 
	至于特斯拉, 又是另外一种, 不过在国内, 特斯拉可以提供支持国标的充电适配器以支持非特斯拉专用充电桩; 
	(也有新闻说国标和CHAdeMO会进行共同制定, 更具通用性)

	在充电国标这里, 使用的是J1939协议; 





5.autosar 中的J1939 协议栈:
	对于J1939 Stack的实现各家都大同小异, 这里以EB产品为例, 提供了如下四个模块: 
		* J1939Tp:  处理数据分拆与组装, 数据流控制, 超时监控等等;
		* J1939Dcm: 处理诊断通信;
		* J1939Rm:  处理请求, 确认消息;
		* J1939Nm:  处理地址声明参数组消息的接收与发送;

	另外, 在测试/记录工具这一块儿, CSS有CANdege, Vector有CANoe; 
	当然了, 由于是基于CAN通信, 所以有任何一个CAN消息检测工具, 然后配合python脚本也是能做到数据解析、记录的; 





