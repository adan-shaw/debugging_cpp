#
# 1.CAN帧的种类和格式list
#
* 数据帧: 用于发送单元向接收单元传送数据的帧; 
* 遥控帧: 用于接收单元向具有相同 ID 的发送单元请求数据的帧; 
* 错误帧: 用于当检测出错误时向其它单元通知错误的帧; 
* 过载帧: 用于接收单元通知其尚未做好接收准备的帧; 

- 帧间隔: 用于将数据帧及遥控帧与前面的帧分离开来的帧; 

其中:
	数据帧和遥控帧有'标准格式'和'扩展格式'两种格式:
		+ '标准格式'有11个位的标识符ID;
		+ '扩展格式'有29个位的ID; 

	其他帧, 只会有一种格式;





#
# 2.CAN帧的种类和格式的详细分析
#
A.数据帧
	数据帧由7个段构成: 
		(1) 帧起始   表示数据帧开始的段, 1bit的显性位;

		(2) 仲裁段   表示该帧优先级的段; 
								'标准格式'和'扩展格式'在此的构成有所不同, '扩展格式'多了18位ID; 
								RTR = 0代表数据帧, RTR = 1代表远程帧; 
								CANID越小, 优先级越高; 

		(3) 控制段   表示数据的字节数及保留位的段; 
								标准和'扩展格式'的构成有所不同, 都有4位表示数据段长度代码(DLC)外, 标准帧有IDE(数值为0)位和r0保留位, 扩展帧有r0和r1保留位; 
								保留位必须全部以显性电平发送; 但接收方可以接收显性、隐性及其任意组合的电平; 

		(4) 数据段   数据的内容, 可发送0～8 个字节的数据; 

		(5) CRC 段  检查帧的传输错误的段; 
								CRC段是检查帧传输错误的帧, 由15 个位的CRC 顺序和1 个位的CRC 界定符(用于分隔的位)构成; 
								CRC校验有控制器完成; 

		(6) ACK 段  表示确认正常接收的段; 
								ACK段用来确认是否正常接收; 
								由ACK 槽(ACK Slot)和ACK 界定符2 个位构成; 
								发送单元在ACK 段发送2 个位的隐性位, 接收到正确消息的单元在ACK 槽(ACK Slot)发送显性位, 通知发送单元正常接收结束; 
								这称作"发送 ACK"或者"返回 ACK"; 

		(7) 帧结束   表示数据帧结束的段; 
								帧结束是表示该该帧的结束的段; 
								由7 个位的隐性位构成; 

	一般的CAN总线通信, 总线上通信绝大部分时候都是数据帧; 
	像在CANOpen协议中, 用的最多的PDO过程数据对象就是通过数据帧进行的通信; 



B.遥控帧
	和数据帧相比, 遥控帧是接收单元向发送单元请求发送数据所用的帧; 
	所以, 遥控帧没有数据段; 
	因此, 遥控帧由如下 6 个段组成, 这6个段和上面数据帧的内容基本一样: 
		(1) 帧起始(SOF) 表示帧开始的段; 
		(2) 仲裁段      表示该帧优先级的段; 可请求具有相同 ID 的数据帧; 
		(3) 控制段      表示数据的字节数及保留位的段; 
		(4) CRC 段     检查帧的传输错误的段; 
		(5) ACK 段     表示确认正常接收的段; 
		(6) 帧结束      表示遥控帧结束的段; 

	遥控帧和数据帧的区别: 
		* 遥控帧的 RTR 位为隐性位, 没有数据段; 
			所以对于没有数据段的数据帧和遥控帧可通过 RTR 位区别开来; 
		* 遥控帧的数据长度码用以请求数据帧的数据长度; 
		* 对于没有数据段的数据帧, 可用于各单元的定期连接确认/应答、或仲裁段本身带有实质性信息的情况下; 



C.错误帧
	用于在接收和发送消息时检测出错误通知错误的帧; 
	错误帧由错误标志和错误界定符构成:
		(1) 错误标志:
				错误标志包括主动错误标志和被动错误标志两种:
					+ 主动错误标志:  6 个位的显性位; 
					+ 被动错误标志:  6 个位的隐性位; 

		(2) 错误界定符:
				错误界定符由 8 个位的隐性位构成; 



D.过载帧
	过载帧是用于接收单元通知其尚未完成接收准备的帧; 
	过载帧由过载标志和过载界定符构成:
		(1) 过载标志  6 个位的显性位, 过载标志的构成与主动错误标志的构成相同; 
		(2) 过载界定符 8 个位的隐性位, 过载界定符的构成与错误界定符的构成相同; 



E.帧间隔
	+ 帧间隔是用于分隔数据帧和遥控帧的帧; 
	+ 数据帧和遥控帧可通过插入帧间隔将本帧与前面的任何帧(数据帧、遥控帧、错误帧、过载帧)分开; 
	+ 过载帧和错误帧前不能插入帧间隔; 

	(1) 间隔                  3个位的隐性位; 
	(2) 总线空闲               隐性电平, 无长度限制(0 亦可), 本状态下, 可视为总线空闲, 要发送的单元可开始访问总线; 
	(3) 延迟传送(发送暂时停止)   8个位的隐性位, 只在处于被动错误状态的单元刚发送一个消息后的帧间隔中包含的段; 





#
# 3.CANID的帧仲裁(帧的优先级仲裁)
#
+ 在CAN总线空闲态, 最先开始发送消息的单元获得发送权; 
+ 多个单元同时开始发送时, 各发送单元从仲裁段的第一位开始进行仲裁; 
+ 连续输出显性电平最多的单元可继续发送; 

CANID的帧仲裁(帧仲裁是通过帧类型+CANID 来实现的), 帧仲裁流程如下:
	如图: 
		./CANID的帧仲裁.png 所示, 描述了CAN控制仲裁的过程, 
		单元2最终获得了抢占CAN总线的权利, 也就是说单元2具有更高的优先级; 
		当单元1 仲裁失利时, 自动转换为接收(本来该发送, 优先级比别人低, 就开始接收数据了;

		同时, 控制器将会在下一轮继续发送这次未完成的数据); 
		具有相同 ID 的数据帧和遥控帧在总线上竞争时, 仲裁段的最后一位(RTR)为显性位的数据帧具有优先权, 可继续发送; 

	'标准格式' ID 与具有相同 ID 的遥控帧或者'扩展格式'的数据帧在总线上竞争时, '标准格式'的 RTR 位为显性位的具有优先权, 可继续发送; 





