想做linux 驱动开发(也叫kernel子模块开发), 又不懂太多'嵌入式芯片及其嵌入式小通信协议', 那怎么办?
答:
	没有怎么办!! tcp/ip 协议, 底层AF_PACKET 链路层编码开发, 目前都支持: 
		用户态, 
		内核态, 
		'微系统/无系统'的裸码封装态(甚至没有socket, 是手摇信号位的, 连数据帧都说不上, 按位传输), 
	三种玩法, 但这三种玩法都是一样的, 就是要自己对照tcp/ip 报文, 进行封包, 拆包;
	不会tcp/ip 协议, 真的没办法,
	所以没有怎么办!!

	不过一般情况下, 可以用用户态开发, 尽量用'用户态开发', 因为可用的posix/gcc 功能更多更全;
	可以用Linux kernel, 绝对不用'微系统/无系统', 因为linux kernel 毕竟有更全面, 更现成的东西, 不用自己全部重来;

	其次:
		最好你还是要懂'嵌入式芯片及其嵌入式小通信协议', 因为这片市场是一大片南海,
		不会无线电, 也有众多的高端市场, 比如说: 机器人, 电车, 电池管理等等, 很热门;
		如果会无线电, 那就更高级: 蓝牙, wifi, 蜂窝无线电, 雷达, 卫星;

	实在是没有路可以走, 最后一条道路就是: 
		* 多媒体设备(可能会被goland / rust 取代, 可能不会)
		* 网络安全设备(所有的安全设备, 实际上也是一个路由器, 因此一般路由器开发, 多半就是这种工作, 做网络安全的)





下面描述net网络协议的层面(由底层到高层):
	*
		'嵌入式芯片及其嵌入式小通信协议', '片内通信协议/片外通信协议'realtime实时协议, 
		这种协议比较小, 而且由于经常用在MCU 上面, 大部分都还是'微系统/无系统',
		因此, 这种网络协议的编码方式, 通常都是:
			对着协议栈, 进行裸奔封包, 拆包(甚至没有socket, 是手摇信号位的, 连数据帧都说不上, 按位传输);
		(现实情况是: 这类工作, 大部分是无linux 内核, 或者用小型realtime 系统, 如:RT-Thread)

	* 
		蓝牙, wifi, 蜂窝无线电, 雷达, 卫星; 无线电类的, 这种比较高级, 一般有内核和没有内核都有, 异步通信;
		CAN/ETH 等实时工业总线, 也有;
		如果带linux 内核, 也就是驱动层开发, 需要自己写linux 内核驱动, 给linux 内核打上无线电设备的驱动补丁, 高级;
		(ps: 无线电设备驱动一般都是比较机密, 不会轻易公开设计的; 目前由于最大的嵌入式设备: 手机,电车,wifi路由器,雷达,卫星, 都带无线电系统, 也带linux 内核)
		但一般linux 早就轻松支持了这些小协议了, 只需要做linux 驱动移植, 或者直接linux 内核剪裁即可补全驱动, 基本不需要自己开发(BSP 开发);
		如果不带linux 内核, 但由于这些都是高级嵌入式系统, 就算不带linux 内核, 一般也会带微系统, 如:RT-Thread;
		(很少做这种设备, 会使用无系统的MCU)
		所以, 这个层面的开发, 稍微会用得比较多原始c语言, linux 内核剪裁, 还有BSP 的知识;

	*
		intel-dpdk, 各种路由协议, 应用防火墙(类似iptables 的增强版)等等, 这些协议, 都是异步通信;
		流媒体数据处理: 硬件加速, 多媒体数据保真, 多媒体网络平滑同步, 等等;
		* 一般都必须带linux 内核, 而且需要高频cpu, 才能做网络防火墙;
			(这类工作一般以linux 内核驱动的形式打上去的, 对性能要求极其敏感, 因为要过滤数据包, 
			 而且算校验数, 加密数, 可能还要做cpu 硬件加速, 所以一般会用成熟, 多指令集的cpu, 如: intel x86;
			 伸展: 做这个通常也懂linxu 虚拟化技术, 一般云服务器厂的技术员会防火墙+虚拟化)
		* 一般都必须带linux 内核, 而且具备异构硬件解码编码加速, 才能做多媒体server;
		但由于这些功能, 都比较复杂, 一般不会是linux 内核驱动开发, 而是直接用户态的AF_PACKET 解包, 封包编码;
		防火墙过滤规则/多媒体数据, 处理起来功能比较复杂, 需要用posix API, g++;
		所以, 写成用户态的AF_PACKET 解包, 封包程序, 实际上更节约时间, 而且性能不会有影响;

	*
		rtp/rtcp/rtsp/rtmp/mms/hls, 这些是互联网的视频传输协议, 负责传送视频数据, 保证传输质量;
		sip 信令是互联网会话控制协议, sip + rtp/rtcp/rtsp/rtmp/mms/hls = 互联网实时通话;
		实现这样的功能的软件有: 微信, qq, 腾讯视频会议等软件;
		这些互联网实时会话软件, 都有可能对tcp/ip 协议进行深度解析, 封装, 从而实现更好的实时会话功能;
		(但这类软件, 一般都有现成的, proxy + app server, 跟http 一样, 十分成熟, 做二次开发比较划算)

	*
		http 超文本协议, 实际上就是website网站控制协议;
		html+css+js 就是网站内容展示类语言;
		SSL 就是数据安全通讯协议(加密对象包括: 文字,数据,图片,音频,视频);
		http + html+css+js + 后端server + SSL = website;
		[但这类软件, 一般都有现成的, proxy + app server, 十分成熟, 做二次开发比较划算]
		(ps: 但http超文本协议传输mp3/mp4, 不是以推流的形式传输的, 而是直接下发整个文件传输的, 
				 除非你做访问转跳, 把用户的url 请求转跳到你的推流server上面, 一般web视频网站都是这样做的, 如爱奇异, 优酷等)

	*
		题外话:
			如果想做c++, 就必须做应用, 抛弃驱动, 直接搞boost, qt, 做跨平台c++ 开发, 才是出路;
			否则不上不下, 拖着c 语言, 在应用市场上是没啥用的, 只有到了linux 驱动层, linux 内核层, 才是c 语言的天下;
			但c++ 学得好, 一般情况下代码质量可以的话, 也可以回头写点c, 写点tcp/ip 用户态的AF_PACKET 解包, 封包编码;
			c 语言, 面向对象能力好, 熟练多款脚本, 一般情况下代码质量可以的话, 也可以写点c++;


