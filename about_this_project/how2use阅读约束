前言:
	鉴于这个project 是纯属个人输出show, 可能我的性格比较欧美系, 
	所以, 我会很像taylor swift, 甚至会把自己的ex GF 写进project 里面;

	因此, 这个project 实在是囊括了我从2016/05/01 到今天2023/07/06, 大部分的学识, 基础的知识, 能公开的基本都公开了;
	如果这些东西对你有所启发, 阁下可以随意翻阅,
	如果你实在不喜欢这些公开信息, 阁下可以选择忽视, 不再关注;

	(由于我是一个蹩脚的english student, 所以在多种语言混合之后, 我现在甚至不太擅长区分你我他, 主谓宾, i/you/he;
	 因此, 言辞之间可能有冒犯的地方, 在这里首先表示: 这只是我个人说话方式的问题, 无恶意, please forgive me)



how2use阅读约束:
	鉴于这个project 的知识量非常庞大, 混合, 复杂, 甚至很多bullshit 和错漏, 
	因此, 非常建议阅读者可以: 
		选择适合自己的部分来阅读;

	这里, 作者做一个简单的目录:
		python教程:
			/AI人工智能/cpython基础

		shell教程:
			/posix_linux/shell

		ffmpeg命令教程:
			/media多媒体基础/ffmpeg命令/

		c 语言基础教程:
			/c_basic

		c++ 教程:
			/c_basic
			/cpp_basic
			/gnu_stl
			/boost(未完善)
			/qt(未完善)

		c/c++ 第三方库:
			/extern_lib

		posix API 系统编码教程:
			/posix_linux

		socket 套接字编码教程:
			/socket

		嵌入式基础:
			/Embedded嵌入式(未完善)

		多媒体基础教程:
			/media多媒体基础

		lua 编码教程:
			https://gitee.com/adan_shaw/debugging_lua
			https://github.com/adan-shaw/debugging_lua



单纯从c++ 程序员的视觉看这个project 和IT 行业:
	由于IT行业, 主要就是: 互联网和工业;

	如果单纯做互联网, 建议还是直接: python/lua/shell/java/go ...
	这个project 不适合互联网程序员死扣, 无畏硬撞墙, 互联网方向的程序员可以, 直接看看:
		python教程
		lua教程
		shell教程
		c++ 教程(如果技术很牛的互联网程序员, 也会懂c++, 但我的c++ 能力实在不算很强, 一般, 只是写得比较多而已, 话多人实力不强)


	如果是工业类程序员, 由于作者本人也是偏工业类的, 所以有所感触:
		c 语言教程
		c++ 教程
		c/c++ 第三方库 / posix API 系统编码教程 / socket 套接字编码教程 / 嵌入式基础 / 多媒体基础教程
		python 教程 / shell 教程 / lua 教程(会python基本学lua无压力, 可以不看lua)
		AI人工智能(作者本人实在是暂时没能力接触人工智能的知识, 所以这里不展开叙述)

	由于工业类程序员, 起点比较高, 低级程序大部分会被script 类的语言取代;
	目前script 语言也有go/rust 这种, 可以直接生成二进制程序的script,
	因此, c/c++ 的市场被进一步压缩, c++ 委员会, 不得不面向人工智能时代, 做了大量更新;
	(从c++11 开始, 对底层c++ 添加了巨大的更新, 主要是面向通用式, 高性能运算, 多线程计算等, 
	 以解决人工智能时代的需求, 也免得被go/rust script 淘汰)

	因此, 作为c/c++ 工业类程序员, 目前奉献的原则就是: 技多不压身, 多学点准没错;
	有一个概念, 就是数据复杂度的概念:
		初代互联网, 都是html+css+js+pictures, 可以看成是傻瓜图片+文字;
		第二代互联网, 是第一代互联网的基础上, 新增了多媒体技术(流媒体), 现在互联网基本上都是从网页shopping 转为直播带货了;
		下一代互联网, 就是chatGPT 那种, 在多媒体复合数据流的基础上, 再加人工智能, 你准备好了吗?

	因此, 就会有一个数据复杂度的概念:
		* 互联网text(文本数据是互联网的基石, 也是最小粒度)
		* 多媒体(流媒体), 是互联网的No2, 第二代技术
		* AI 人工智能, 站在前两代技术基础上, 诞生出来的新技术;

	一个c/c++ 工业类程序员, 要做到的: 
		* 能处理复合数据流, 
		* 能进行通用级编码,
		* 能做算法(作者本身的算法能力也不强)
	才能应对c/c++ 工业残酷的市场, 从就业角度, 从学习曲线的角度, 
	c/c++ 工业类程序员前期投入量会很大, 后期变动会比互联网轻松些, 比较考研个人毅力;



how2use阅读约束-总结:
	互联网程序员: 欢迎剽窃, 能带走就带走, 偷瞄两眼, 或许有新的思维激发;
	工业类程序员: are you ready for learn all of this project? 0.0
	(或者直接做BSP, 学习c 语言/linux kernel/驱动编程/驱动移植, 这可能可以少学点c++, 但实际也不轻松, 也挺难, 看你的选择)



thank you for your time, thanks a lot;
