why使用clang?
	1.因为Pass 机制, clang 可以轻松加入自定义Pass 编译选项, 
		这极大简化了芯片厂商开发新的编译选项, 新的硬件加速选项, 
		所以现在新的芯片厂商都在使用clang, 尤其是手机芯片, 所有arm 芯片;

	2.市场原因导致: clang 编译器崛起;
		clang 是一个纯c++ 编译器;
		移动平台, 无论是android 还是IOS, 都在使用arm 芯片,
		而arm 芯片默认使用clang 编译器,
		而现在正是移动平台崛起的红利期, 因此clang 必然成为大热门;
		而传统pc 依赖的gcc, 开始遇冷;



gcc, glibc 与clang, llvm 的关系:
	gcc   = clang = 编译器
	glibc = llvm  = 运行时库





LLVM的优势:
	1.编译速度更快:
			在某些平台上(ARM),LLVM的编译速度要明显快于gcc;

	2.占用内存更小:
			LLVM生成的AST所占用的内存较小;

	3.模块化的设计:
			LLVM基于库的模块化设计, 更易于二次开发,内部代码重用较为高效;

	4.诊断信息可读性强:
			在编译过程中, LLVM会创建并保留大量详细的元数据(metadata), 这将更有利于调试和错误报告;

	5.设计更清晰简单, 容易理解, 易于扩展加强;
		与代码基础较为古老的gcc相比, 学习曲线会显得更为平缓;

	6.在作出任何优化后都可以输出一次IR, 然后通过opt工具进行下一个优化, 易于分析, 更便于设计新的优化,
		而gcc只能将多种优化的结果统一显示.

	7.统一的IR与模块化;你可以很轻易的抽取LLVM的组件(以库的形式)出来用于其它领域.
		(如抽取LLVM的整个后端[优化与CodeGen]用于TVM这样的深度学习推理框架)

	8.快速的可定制化:在LLVM中编写优化Pass非常方便, 各种API的应用非常方便,而且文档详细.

	9.使用现代C++代码编写并有良好的代码组织;LLVM使用C++11编写, 代码十分清晰与规范, 对于阅读并且改写非常的方便.

	10.License优势.

	11.LLVM has a boss ---- Apple company.

	12.LLVM在编译程序时输出的错误信息更加详细,比gcc能更准确的显示错误的内容.





LLVM的劣势:
	1.支持语言不够多:
			GCC除了支持 C/C++/Objective-C,还支持Fortran/Pascal/Java/Ada/Go等其他语言;
			LLVM(clang)目前基本上只支持C/C++/Objective-C/Objective-C++这四种语言;

	2.需要加强对C++的支持:
			clang对C++的支持依然落后于gcc, clang还需要加强对C++ 提供全方位支持;

	3.支持平台不如GCC多:
			由于gcc流行的时间比较长, 已经被广泛使用, 对各种平台的支持也很完备;clang目前支持的平台有Linux/Windows/Mac OS;

	4.相比较而言,gcc更成熟, 易于安装, 并且是许多系统的默认编译器, 在多中系统内, 人们可以直接使用;





总结:
	这样就惨了, llvm x86 安装包, 其实只能说用来练手, 
	实际上, llvm 真正的用途, 还是在arm/risc-v 上面, 你在x86 上面安装llvm 没啥用啊, 效率永远打不赢gcc;
	做llvm 编译器的, 基本上都是面向arm + risc-v 芯片的;



