#
# 1.valgrind 的安装使用:
#
apt-get install valgrind

编译安装:
	./autogen.sh
	./configure
	make install





#
# 2.Valgrind 的其他附加工具:
#
memcheck:    检查程序中的内存问题, 如泄漏、越界、非法指针等(对一切malloc()/free()/new/delete 的调用都会被捕获);
callgrind:   检测程序代码的运行时间和调用过程, 以及分析程序性能(gprof类似的分析工具, 没啥用);
cachegrind:  分析CPU的cache命中率、丢失率, 用于进行代码优化;
             (Cache分析器, 它模拟CPU中的一级缓存I1, Dl和二级缓存, 能够精确地指出程序中cache的丢失和命中)
helgrind:    主要用来检查多线程程序中出现的竞争问题;
massif:      堆栈分析器, 它能测量程序在堆栈中使用了多少内存, 告诉我们堆块, 堆管理块和栈的大小;
lackey:      很少用的小工具(忽略)
nulgrind:    很少用的小工具(忽略)


这几个工具的使用是通过命令:
	# 当不指定--tool参数时, 默认值是--tool=memcheck;
	valgrand --tool=<tool_name> ./<exe>





#
# 3.memcheck 简单使用:
#
# 执行二进制./test 测试
valgrind --tool=memcheck --leak-check=full ./test

# 执行二进制./test 测试, 并打印详细信息
valgrind --tool=memcheck --leak-check=full -v ./test



# 查看报告example

==14150== HEAP SUMMARY(堆总结):
==14150==   in use at exit: 0 bytes in 0 blocks
==14150==   total heap usage: 
            18 allocs(分配次数), 19 frees(释放次数), 
            1,480 bytes allocated(分配过的内存大小)

==14150==   ** 分配次数, 释放次数匹配比, allocated 分配过的内存大小 等指标, 越少越好 **

==14150== All heap blocks were freed -- no leaks are possible
==14150== 
==14150== For counts of detected and suppressed errors, rerun with: -v
==14150== Use --track-origins=yes to see 
          where uninitialised values come from

==14150== ERROR SUMMARY(错误总结): 159 errors from 74 contexts(环境) 
          (suppressed(抑制): 0 from 0)

==5962== LEAK SUMMARY(泄漏总结):
==5962==    definitely lost(明确的泄漏): 0 bytes in 0 blocks
==5962==    indirectly lost(间接的泄漏): 0 bytes in 0 blocks
==5962==    possibly lost(可能的泄漏): 16,001 bytes in 270 blocks
==5962==    still reachable(仍然获得/占用): 73,673 bytes in 348 blocks
==5962==    suppressed: 0 bytes in 0 blocks










