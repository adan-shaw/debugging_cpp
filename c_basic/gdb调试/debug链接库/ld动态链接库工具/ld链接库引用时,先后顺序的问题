关于编译时, 遇到undefined reference 未定义函数API/变量, 这样的问题的解决办法:



#
# 基础错误
#
1.链接时缺失了相关目标文件(.o):
	低级错误, makefile 没有指明出所有的依赖.o 文件, 导致ld链接器查找模块出错, 会触发大量undefined reference报错;


2.链接时缺少相关的库文件(.a/.so):
	低级错误, makefile 没有指明'共享链接库'的路径&选项, 导致ld链接器查找模块出错, 会触发大量undefined reference报错;


3.在c++代码中链接c语言的库(低级错误)
	c++ 引用c 标准库的东西, 需要使用extern "C" {} 进行声明:
		# 单个函数引用转换
		extern "C" MemoryContextInit();

		# 批量引用转换
		extern "C"{
			#include <stdio.h>
			#include <stdlib.h>
		}








#
# 高级错误(比较少见, 但也不是没有这种情况)
#
*.你引用的多个'共享链接库'本身, 就存在互相引用, 互相内嵌的关系时,
	你要把被内嵌的链接库, 放到前面, 首先被ld 链接器找到,
	否则, 你引用的'共享链接库'本身, 就会报错undefined reference,
	因为'共享链接库'之间, 存在互相引用的关系, 你需要把最多人引用的共享库, 放到前面, 首先被ld 链接器找到;
	(静态, 动态库都有这种问题)


例如:
	你编译x.exe, 引用了a1.a, b2.so, c3.so
	本身, x.exe 就依赖a1.a, b2.so, c3.so 3个'共享链接库', 而b2.so, c3.so 都依赖a1.a,
	这时候如果你执行编译:
		# 出错, b2.so c3.so 链接库都找不到a1.a 中的函数
		gcc -o x.exe x.cpp b2.so c3.so a1.a 

		# 正确编译方法(把顺序换一下, 就成功了, 因为b2.so c3.so读需要用到a1.a, 你先找到a1.a 就行)
		gcc -o x.exe x.cpp a1.a b2.so c3.so









