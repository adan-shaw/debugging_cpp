MCU 调试器(单片机调试器):
	为什么需要MCU 调试器? 首先我们来整理一下c/c++ 程序的调试器阶级:
		* linux-pc: 
				一般情况下, 是host 主机的资源充足, 可以直接调试.exe 的时候, 才会用的调试器, 一般情况下是gdb;

		* linux嵌入式:
				一般情况下, 是host 主机的资源不太充足, 但仍然是linux 系统, 仍然有ETH 以太网的时候, 
				这时候, 可以通过ETH 以太网进行远程调试!!
				gdb-server:
					调试器daemon-server, 占用资源较少;
				gdb/gdb-multiarch:
					调试器client, 是一个模拟程序, 占用资源较多;
					调试器client 可以通过网络, 把整个.exe 的数据下载下来!! 实现daemon-server和client 的.exe 保持一致,
					这时候, daemon-server 只需要做一个类似rpc 的远程调用程序, 告诉client 我的程序执行到哪一步, 什么时候断点, 打印值时, 打印哪些值, 等等;
					因此, 要实现远程debugging, 其实不难;

		* MCU 调试器:
				一般情况下, 是host 主机的资源严重不足, 甚至不是linux 系统, 或者也没有ETH 以太网的时候, 
				这时候这种小型芯片+程序, 一般都用MCU 调试器进行调试, 常见的有:
					* rtos 程序
					* 单片机程序(裸跑程序, 无rtos)



现在市面上的MCU 调试器种类太多了:
	* jlink-ob
	* DAPLink
	* j-link PRO
	* ST-Link
	...

每个MCU 芯片厂商, 都会推出配套软件:
	* MCU 调试器
	* MCU 仿真器
	* rtos

终极武器:
	MCU 调试器 + MCU 仿真器 + rtos + editor + 烧写工具 = 一体化IDE 开发环境, 很多大型的MCU 厂商, 都想搞一套这样的工具, 稳住市场地位;
	这也是一个非常庞大的软件工程, 需要用到的软硬件知识非常多!!
