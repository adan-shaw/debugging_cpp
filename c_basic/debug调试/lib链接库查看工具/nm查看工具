*
* 1.nm 工具概述:
*
nm 一般用来查看'共享链接库'里面存放的'API地址(函数指针起始地址)' + 函数名.
注意:
	动态链接库中, 里面有一个'导出函数列表'的固有init 函数, 用来注册'导出函数的', 并初始化.so 动态链接库的全局变量;
	静态链接库中, 大部分都是.o 文件直接堆叠, 引用, 代码块直接copy 进去程序, 并不是以指针的形式保留;
	因此, 静态链接库编译出来的.exe 比较大, 动态链接库编译出来的.exe 有.so 依赖list;



nm 工具也可以列出.exe 文件中的.o 文件列表;
nm 不能查看数据存放的区域.bss, .data 之类的段信息;

objdump 则可以查看段信息



.so 共享链接库, 导出函数API, 用前缀: T 表示;
.so 动态装载库, 内部函数(不公开的), 用前缀: w 表示;
.so 动态装载库, 导出函数本身, 用前缀: _Z 表示;

    U代表'.so 动态装载库'引用了这个API, 是外部API, '.so 动态装载库'内部没有自己实现.

0000000000201020 B __bss_start
                 w __cxa_finalize
0000000000201020 D _edata
0000000000201028 B _end

'动态链接库'中装载函数: 主要是装载'动态链接库'用的(_fini执行装载并'开始共享.so库')
000000000000071c T _fini
                 w __gmon_start__

'动态链接库'初始化函数: 主要是'注册函数列表'[装载初始化]
0000000000000590 T _init
                 w _ITM_deregisterTMCloneTable
                 w _ITM_registerTMCloneTable
                 w _Jv_RegisterClasses

函数列表:(T 表示-shared 共享函数, '前+后'有点杂乱字符, 请忽略! add 才是函数名)
00000000000006d0 T _Z3addii # add()
0000000000000709 T _Z3divii # div()
00000000000006f6 T _Z3mulii # mul()
00000000000006e4 T _Z3subii # sub()








*
* 2.常用法: [T 表示-shared 共享函数的导出符号, W 表示'弱连接类型'的导出符号, U 表示'依赖'函数/变量/宏]
*
# 查看'.so 动态链接库'
nm -D ./make_so.so
nm -D ./make_so.so | grep T
nm -D ./make_so.so | grep U
nm -D ./make_so.so | grep w

# 根据API 地址顺序来排列显示(你可以看到所有T 函数都装载到中间了)
nm -D -n ./make_so.so



# 查看'.a 静态链接库'
nm -s ./obj_lib.a 

# 查看'.a 静态链接库'的结果:
	# 包含的.o 模块
	Archive index:
	how2make_lib1test in test.o

	# .o 模块包含的T 共享函数
	test.o:
	0000000000000000 T how2make_lib1test








*
* 3.nm 命令的其它选项
*
-a或--debug-syms: 
	显示调试符号


-B: 
	等同于--format=bsd, 用来兼容MIPS的nm


-C或--demangle: 
	将低级符号名解码(demangle)成用户级名字, 这样可以使得C++函数名具有可读性


-D或--dynamic: 
	显示动态符号该选项仅对于动态目标有意义(例如特定类型的共享库)


-f format: 
	使用format格式输出format可以选取bsd、sysv或posix, 该选项在GNU的nm中有用默认为bsd


-g或--extern-only: 
	仅显示外部符号

-n、-v或--numeric-sort: 
	按符号对应地址的顺序排序, 而非按符号名的字符顺序


-p或--no-sort: 
	按目标文件中遇到的符号顺序显示, 不排序


-P或--portability: 
	使用POSIX.2标准输出格式代替默认的输出格式, 等同于使用任选项-f posix


-s或--print-armap: 
	当列出库中成员的符号时, 包含索引, 索引的内容包含: 哪些模块包含哪些名字的映射


-r或--reverse-sort: 
	反转排序的顺序(例如, 升序变为降序)


--size-sort: 
	按大小排列符号顺序, 该大小是按照一个符号的值与它下一个符号的值进行计算的


-t radix或--radix=radix: 
	使用radix进制显示符号值, radix只能为"d"表示十进制, "o"表示八进制或"x"表示十六进制


--target=bfdname: 
	指定一个目标代码的格式, 而非使用系统的默认格式


-u或--undefined-only: 
	仅显示没有定义的符号(那些外部符号)


-l或--line-numbers: 
	对每个符号, 使用调试信息来试图找到文件名和行号
	对于已定义的符号, 查找符号地址的行号
	对于未定义符号, 查找指向符号重定位入口的行号
	如果可以找到行号信息, 显示在符号信息之后


-V或--version: 
	显示nm的版本号
--help: 
	显示nm的任选项


