objdump 文件命令功能强的惊人(类似于nm 命令, 是用来查看'编程库'信息的)
但objdump 还能查看'编程库'中的'段信息'!!



#
# 1.常见用法:
#
# 指定查看某个.o 文件, 或者指定查看某个.a or .so 文件中的.o 组成文件
objdump -h ./obj_lib.a text.o
objdump -h text.o


# 查看对象文件所有的符号列表(添加-g 之后才有符号列表), 相当于nm -s ./obj_lib.a, 如:
objdump -t text.o
objdump -t ./obj_lib.a


# 查看动态库的函数列表, 储存位置, 还有反汇编代码(查看动态库, 一般用大T)
# 挺简单的, 函数列表在底下, 反汇编代码在上面(这个组合只能看.so 动态库)
objdump -T ./make_so.so


# 查看反汇编信息(可以查看.o .a 的反汇编信息)
objdump -D text.o
objdump -d text.o
objdump -D ./make_so.so # 整个库看太多了, 怕你看不完
objdump -S text.o


# 查看目标代码可以适用的cpu 框架?
objdump -i ./make_so.so
objdump -i text.o


# 显示所有可用的头信息, 包括符号表、重定位入口(-x 等价于 -a -f -h -r -t 同时指定)
objdump -x inet.o  








#
# 2.命令选项list:
#
ps: 
	-单横杠是缩写命令, 
	--双横杠是复杂命令(有些命令没有缩写选项的)


--archive-headers
-a 显示档案库的成员信息, 与 ar tv 类似, 显然这个选项没有什么意思. 


--target=bfdname
-b bfdname
   指定目标码格式. 这不是必须的, objdump能自动识别许多格式, 
   比如:objdump -b oasys -m vax -h fu.o
   显示fu.o的头部摘要信息, 
   明确指出该文件是Vax系统下用Oasys 编译器生成的目标文件. 
   objdump -i将给出这里可以指定的目标码格式列表


--demangle
-C 将底层的符号名解码成用户级名字, 除了去掉所有开头的下划线之外, 
   还使得C++函数名以可理解的方式显示出来. 


--debugging 
   显示调试信息. 企图解析保存在文件中的调试信息并以C语言的语法显示出来. 
   仅仅支持某些类型的调试信息. 


--disassemble
-d 反汇编那些应该还有指令机器码的section


--disassemble-all
-D 与 -d 类似, 但反汇编所有section


--prefix-addresses
   反汇编的时候, 显示每一行的完整地址. 这是一种比较老的反汇编格式. 
   显示效果并不理想, 但可能会用到其中的某些显示, 自己可以对比. 


--disassemble-zeroes
   一般反汇编输出将省略大块的零, 该选项使得这些零块也被反汇编. 


--endian={big|little}
-EB
-EL
   这个选项将影响反汇编出来的指令. 
   little-endian就是我们当年在dos下玩汇编的时候常说的高位在高地址, 
   x86都是这种. 


--file-headers
-f 显示objfile中每个文件的整体头部摘要信息. 


--section-headers
--headers
-h 显示目标文件各个section的头部摘要信息. 


--info
-i 显示对于 -b 或者 -m 选项可用的架构和目标格式列表. 


--section=name
-j name 仅仅显示指定section的信息


--line-numbers
-l 用文件名和行号标注相应的目标代码, 仅仅和-d、-D或者-r一起使用,
   使用-ld和使用-d的区别不是很大, 在源码级调试的时候有用, 
   要求编译时使用了-g之类的调试编译选项. 


--architecture=machine
-m machine
   指定反汇编目标文件时使用的架构, 
   当待反汇编文件本身没有描述架构信息的时候(比如S-records), 
   这个选项很有用. 可以用-i 选项, 列出这里能够指定的架构


--reloc
-r 显示文件的重定位入口. 如果和-d或者-D一起使用, 
   重定位的部分, 以反汇编后的格式显示出来. 


--dynamic-reloc
-R 显示文件的动态重定位入口, 仅仅对于动态目标文件有意义, 比如某些共享库. 


--full-contents
-s 显示指定section的完整内容. 
   objdump --section=.text -s inet.o | more


--source
-S 尽可能反汇编出源代码, 尤其当编译的时候指定了-g这种调试参数时, 
    效果比较明显. 隐含了-d参数. 


--show-raw-insn
   反汇编的时候, 显示每条汇编指令对应的机器码, 
   除非指定了--prefix-addresses, 这将是缺省选项. 


--no-show-raw-insn
   反汇编时, 不显示汇编指令的机器码, 
   这是指定 --prefix-addresses 选项时的缺省设置. 


--start-address=address
   从指定地址开始显示数据, 该选项影响-d、-r和-s选项的输出. 


--stop-address=address
   显示数据直到指定地址为止, 该选项影响-d、-r和-s选项的输出. 


--syms
-t 显示文件的符号表入口(类似于nm -s提供的信息)


--dynamic-syms
-T 显示文件的动态符号表入口, 仅仅对动态目标文件有意义, 比如某些共享库. 
   它显示的信息类似于 nm -D ./make_so.so 显示的信息. 


--all-headers
-x 显示所有可用的头信息, 包括符号表、重定位入口(-x 等价于 -a -f -h -r -t 同时指定)
objdump -x inet.o  



