*
* 0.编译时, 常见的编译选项
*
一般情况下, 编译用的共享链接库, 都是以.so 动态共享链接库的形式存放&运行的, 
常见的'动态共享链接库'and 编译选项list:
	-l rt      --提供posix实时扩展
	-l pthread --posix 线程
	-l m       --math 库
	-l dl      --动态链接API库(如果使用了dlopen(),dlclose()等API, 手动加载.so库, 则需要-ldl
	-l z       --zlib 压缩库(gcc 自带zlib 压缩算法)

	<外库>: 
	-l cjson         --cjson json 解析
	-l expat         --expat xml 解析
	-l pugixml       --pugixml xml 解析
	-l boost_system  --boost 库
	-l jemalloc      --jemalloc 内存管理器
	-l ssl           --openssl 对称加密库
	-l crypto        --openssl 校验算法库

注意:
	有时候, 库的添加顺序是不应该乱的, 有些非标准库不能乱序的, 标准库随意.





*
* 1.ld 工具概述
*
ld用于把'.o文件'连接为可'执行文件'或者'链接库文件';
(但ld命令比较难用, 在makefile 中可以用gcc 代替)
gcc 本质上也会自动调用ld 工具, 只是gnu 社区的程序, 将所有步骤都简化了, 这样更方便;





*
* 2.ld 工具命令细节
*
-b:               指定目标代码输入文件的格式
-Bstatic:         只使用静态库
-Bdynamic:        只使用动态库
-Bsymbolic:       把引用捆绑到共享库中的全局符号
-c:               从指定的命令文件读取命令
--cref:           创建跨引用表
-d:               设置空格给通用符号, 即使指定了可重定位输出
-defsym:          在输出文件中创建指定的全局符号
-demangle:        在错误消息中还原符号名称
-e:               使用指定的符号作为程序的初始执行点
-E:               对于ELF格式文件, 把所有符号添加到动态符号表
-f:               对于ELF格式共享对象, 设置 DT_AUXILIARY 名称
-F:               对于ELF格式共享对象, 设置 DT_FILTER 名称
-format:          指定目标代码输入文件的格式(和 -b 相同)
-g:               被忽略, 用于提供和其他工具的兼容性
-h:               对于ELF格式共享对象, 设置 DT_SONAME 名称
-i:               执行增量连接
-l:               把指定的存档文件添加到要连接的文件清单
-L:               把指定的路径添加添加到搜索库的目录清单
-M:               显示连接映射, 用于诊断目的
-Map:             创建指定的文件来包含连接映射
-m:               模拟指定的连接器
-N:               指定读取/写入文本和数据段
-n:               设置文本段为只读
-noinhibit-exec:          生成输出文件, 即使出现非致命连接错误
-no-keep-memory:          为内存使用优化连接
-no-warn-mismatch:        允许连接不匹配的目标文件
-O:               生成优化了的输出文件
-o:               指定输出文件的名称
-oformat:         指定输出文件的二进制格式
-R:               从指定的文件读取符号名称和地址
-r:               生成可重定位的输出(称为部分连接)
-rpath:           把指定的目录添加到运行时库搜索路径
-rpath-link:      指定搜索运行时共享库的目录
-S:               忽略来自输出文件的调试器符号信息
-s:               忽略来自输出文件的所有符号信息
-shared:          创建共享库
-sort-common:             在输出文件中不按照长度对符号进行排序
-split-by-reloc:          按照指定的长度在输出文件中创建额外的段
-split-by-file:           为每个目标文件在输出文件中创建额外的段
--section-start:          在输出文件中指定的地址定位指定的段
-T:               指定命令文件(和 -c 相同)
-Ttext:           使用指定的地址作为文本段的起始点
-Tdata:           使用指定的地址作为数据段的起始点
-Tbss:            使用指定的地址作为bss段的起始点
-t:               在处理输入文件时显示它们的名称
-u:               强制指定符号在输出文件中作为未定义符号
-warn-common:             当一个通用符号和另一个通用符号结合时发出警告
-warn-constructors:       如果没有使用任何全局构造器, 则发出警告
-warn-once:               对于每个未定义的符号只发出一次警告
-warn-section-align:      如果为了对齐而改动了输出段地址, 则发出警告
--whole-archive:          对于指定的存档文件, 在存档中包含所有文件
-X:               删除所有本地临时符号
-x:               删除所有本地符号



使用例子:
# 将mytest.o转成可执行程序
ld -o mytest mytest.o







