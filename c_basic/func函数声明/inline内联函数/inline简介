#
# 1.inline 内联函数的优缺点
#
优点:
1)'inline内联函数'在使用时, 会像宏一样展开, 镶嵌到每一个调用inline 函数的部位, 
	执行效率很高, 省去了参数压栈、生成汇编语言的CALL调用、返回参数、执行return等过程, 
	避免压栈消耗的代码, 从而提高了速度. 



2)类的'inline内联函数'也是函数. 
	编绎器在调用一个内联函数, 首先会检查参数问题, 保证调用正确, 
	像对待真正函数一样, 消除了隐患及局限性.
	(相比宏定义更安全, 定义更灵活)

	宏可以替换变量, 但宏不可以操作变量进行运算的;
	'inline内联函数'可以像普通函数一样, 任意定义变量进行运算(比宏定义优秀的地方)



3)'inline内联函数', 可以作为类的成员函数, 可以使用所在类的保护成员及私有成员. 
	如果'inline内联函数'作为类成员函数, 那么每个使用者同样都会拆开这段<'inline内联函数'代码>





缺点:
	1)如果函数的代码较长, 使用次数过多, 则'inline内联函数'将消耗过多内存.
	2)如果函数体内有循环, 那么执行函数代码时间比调用开销大. 








#
# 2.inline 内联函数与宏定义的对比
#
宏一般情况下, 只做常量定义or 公式定义, 不能进行变量运算的,
所以宏定义绝对不能执行循环(循环体必然有变量控制exit), 不能定义变量!!
所以复杂操作, 还是inline 函数好用.

n--; n-=1; 这类操作都属于变量运算操作, 
任何循环控制体, 都必须有变量植入, 做退出exit判断条件, 
一旦宏引入变量运算, 会报错: lvalue required as left operand of assignment
所以, 用inline 函数替代宏, 有很多应用场景









#
# 3.inline 关键字 && gcc 编译器的兼容
#
c 语言其实也可以用inline, 只不过gcc 搞得这个标准有些奇怪而已,
总的来说, gcc 还是遵守inline c99 规则的, c89 则没有加入inline 关键字,
inline关键字是C99中新加的.



static inline 与inline 的区别:
	相同: 两种关键字, 都不能出现在.h 头文件中
	不同: static inline 不能被其它.c文件引用,
				inline 可以被其它.c文件引用.

inline 和static 不能共用!!
inline 告诉编译器, 将函数写实,
static 告诉编译器, 将函数放到.bss 区(和全局变量放在一起?)

inline 和static 共用, 有明显的语义冲突, 不能共用



根据c 语言标准, 在.h 文件中是不能声明inline 关键字的,
但为了引用inline 函数, 你可以:
	(1)在.h 中, 添加函数声明(去掉inline 关键字, 其它不变), 使用时需要包含这个.h 头文件;
	(2)在.c 中, 添加extern 函数声明, 直接引用inline 函数
	(3)在c++ 中, 类定义中, 可以添加inline + 函数实现{}, 就不用这么麻烦了(c++ 对inline支持十分友好)
		 但c++ 也继承了c 语言对inline 函数的使用规则, 
		 你可以在类定义中使用inline 函数, 但你不能在.h 中定义inline 函数.





