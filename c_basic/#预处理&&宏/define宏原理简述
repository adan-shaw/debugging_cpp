宏一般情况下, 只做常量定义or 公式定义, 不能进行变量运算的,
所以宏定义绝对不能执行循环(循环体必然有变量控制exit), 不能定义变量!!
所以复杂操作, 还是inline 函数好用.



宏不能内嵌!! 不能是:
#define _H1(tmp) #tmp
#define _H2(tmp) ( _H1(love You) ## tmp2 )

#define _H1(tmp) #tmp
#define _H2(tmp) #( love ## tmp2 )

// 宏中不能调用宏, 不能给另外的宏调用参数, 不能内叠(宏只展开一次)
//#define _H2(tmp) { _H1(tmp)##tmp }



//宏定义参数, 不能为'结构体指针/类指针'
//(就算用, 也只能替换字符, 不能声明'结构体指针/类指针'的结构or 类型)
例如:
//错误!!
#define _H1(struct p1) {p1->m1 = 1;}
//可以, 但意义不大, 只能替换字符, 不能声明结构体类型!! 使用效率不高
#define _H1(p1) {p1->m1 = 1;}



//
//本头文件, 主要描述宏的基本原理要素!!
//
/*
	宏定义, 本质上, 是由编译器做'字符串替换';
	但简单的字符替换, 也可能会触发很多问题;
	下面将做详细的解述.
*/



//宏定义的用法细节:
/*

*1.对于运算表达式, 要多用()括号, 保证'运算符-优先级'的准确性.
	'运算符-优先级'的问题:
	//不稳定的宏声明
	#define A(x,y) x+y

	//同样不稳定!! 万一传入: A(1+2,3);  展开得到: (1+2 * 3); (错误)
	#define A(x,y) (x*y)

	//正确用法!! (注意多用()括号, 维护'运算符-优先级'的准确性!!)
	#define A(x,y) ((x) + (y))





*2.分号吞噬问题
	//不稳定的宏声明
	#define SWAP_INT(x,y) x=x+y; y=x-y; x=x-y;
	//稳定的宏声明
	#define SWAP_INT(x,y) { x=x+y; y=x-y; x=x-y; }


	因为你使用的时候, 可能会:
	if(!working)
		SWAP_INT(1,2);

	这时候, 不加{} 大括号, 就会造成展开出错!! 变成:
	if(!working)
		x=x+y;
	y=x-y;
	x=x-y;
	这样就扭曲了原来的意思了!!





*3.
	宏的参数, 可以是实体变量/常量, 
	传入函数时, 需要特别小心!! 
		首先, 必须要是'线程安全函数';
		其次, 不能是管理资源的函数.

	其它如指针, 结构体, 类之类的等乱七八糟的东西, 少用!!

	同时, 千万不要传入带有'全局变量/静态变量'的函数(即非线程安全函数)
	例如:
		//定义全局变量
		int G_x;
		//G_add()函数: 全局变量G_x=G_x+n;
		int G_add(int n){ G_x+=n };
		//定义宏
		#define  MIN(X,Y)  ( (X)<(Y) ? (X) : (Y) )

		//执行: 可能会出错!!
		int tmp = MIN(90, G_add(10));
		//展开后, 得到:
		int tmp = 90,G_add(10) ? 90 : G_add(10);
		ps:
			这种情况, G_add(10) 就会被执行了2 次了, 全局变量从G_x+=10, 变成了G_x+=20


	也不要传入'资源管理函数'!!
	例如:
		//执行: 可能会出错!!
		int tmp = MIN(90, write(fd,str_buf,64));
		//展开后, 得到:
		int tmp = 90,write(fd,str_buf,64) ? 90 : write(fd,str_buf,64);
		ps:
			这种情况, 即便write() 是线程安全的, 也没有用.
			本来是写入'64 字节'数据的, 结果写入了'64*2 字节'数据. 所以这是一个错误.


	所以:
		宏定义首先必须确定传入参数是否是实体/常量, 最好是实体/常量!!
		如果是函数, 你必须确保这个函数重复调用, 也不会出问题.
		(就算不出问题, 损耗也很大!!)
		所以, 一般只推荐传入'实体变量/常量'





*4.编译器只允许宏'展开一次'的特性!!
	例如:
		宏对自身的递归引用, 产生的分歧. 例如递归宏:
		#define  foo  (4+foo)
		理论上会:
			(4 + foo)
			(4 + (4 + foo))
			(4 + ( 4 + (4 + foo)))
			...
		但实际上不会!!
		编译器实际上只允许宏展开一次!!(这点超级重要!!)
		所以诸如这类的递归调用宏, 统统都会被报废!!
		编译器只会展开: (4 + foo), 这时候不会向下展开, foo 会成为"错误字符"

		对于以下的交叉引用, 宏也只会展开一次:
		#define x (4 + y)
		#define y (2 * x)
		x展开成(4 + y) -> (4 + (2 * x))
		y展开成(2 * x) -> (2 * (4 + y))
		(注意: 这是极不推荐的写法,程序可读性极差!!)





*5.宏# 号的用法:
	在宏中, 如果'宏参数'前加个#,
	那么在宏扩展的时候, '宏参数'会被扩展成'字符串的形式'.
	(其实就是将'宏参数'强转为字符串模式)
	主要用来防止: 
		遇到某字符串, 与宏参数重名时, 用# 号将该字符串, 强制转为string
	例如:
		//在"" 字符串中, 调用# 号, 需要'多加双引号'
		#define PSQR(x) printf("the square of "#x"=%d\n",((x)*(x)))
		//如果不是在"" 字符串中, 调用# 号, 直接# 号即可
		#define PSQR2(x) printf("the square of %s=%d\n",#x,((x)*(x)))
	执行:
		int tmp=5;
		PSQR(tmp);  //结果：the square of x=25.
		PSQR2(tmp); //结果：the square of x=25.





*6.宏## 号的用法:(其实就是将前后字符串都拼接起来!! 这个用法很杂...)
	“#”是将宏字符串化(String ification)
	“##”是将##左右两边的标签拼接在一起\
		(## is called token concatenation,\
		 used to concatenate two tokens in a macro invocation)
	[ 这个用法, 忽略什么运算优先级限制(但最好还是加个括号,反正不出问题),
	  标签, 即'预编译原理'中, 变量名, 就是一种标签,
	  ## 就是预编译后处理的'宏运算符',
	  忽略所有现实因素, 只进行字符串拼接.]

	***题外话***
	宏是一种预编译处理语句, 预编译之后, 所有变量都会变成标签的!!
	## 就是标签运算符号, 做标签相加操作的.
	标签经过"编译"之后, 才会对应分配变量实体!! 内存区域.
	这些内存区域怎样存放, 则是链接器需要做的事情.
	编译器编译出.o 文件, 一块一块的, 就不管了.
	***********

	例如:
	用法1:(示范使用, 没有实用意义)
	定义:
		#define ADD_LABEL(n) (tmp_ ## n)//’单标签‘拼接法
	调用:
		int tmp_1=0;
		int tmp_2=10;
		tmp_1 = ADD_LABEL(2)+=1;//实际等于:tmp_1 = tmp_2+=1;
														//又等于:tmp_1 = (tmp_2+=1);//优先级问题
		所以:
			printf("tmp_1=%d,tmp_2=%d\n",tmp_1,tmp_2);
		结果:
			11,11
	分析原因:
		实际上, ## 是将左右两个标签拼接起来: tmp_ ## 2 等于 tmp_2
		而tmp_2 刚好又是 int tmp_2;
		那么编译器预编译之后, ADD_LABEL(2) 就会被解析为与int tmp_2同一个标签,
		即: ADD_LABEL(2) = tmp_2


	用法2:(给类的名字加'前缀'/'后缀')
	定义:
		#define SON_CLASS(who) (class son_ ## who {};)
	调用:
		SON_CLASS(a1);//结果得到: son_a1{}; 的空类.
		SON_CLASS(b1);//结果得到: son_b1{}; 的空类.





*7.可变参数宏: ... 三点 / _VA_ARGS
	... 三点, 与_VA_ARGS 宏, 都是代表可变参数的.

	例如:
	定义:
		#define PR(...) printf(...)
		#define PR2(__VA_ARGS_) printf(__VA_ARGS_)
	调用:
		PR("Howdy");
		PR("weight=%d\n",100);
		PR2("Howdy");
		PR2("weight=%d\n",100);





*8.编译器常用的'预定义宏'
	 (不同的编译器, 预定义宏不一样, clang编译器, 预定义宏很多)

	ANSI C标准中有几个标准预定义宏(也是常用的):
		__LINE__: 在源代码中插入当前源代码行号;
		__FILE__: 在源文件中插入当前源文件名;
		__DATE__: 在源文件中插入当前的编译日期
		__TIME__: 在源文件中插入当前编译时间;
		__STDC__: 当要求程序严格遵循ANSIC标准时该标识被赋值为1;


		__cplusplus: 当编写C++程序时该标识符被定义.
								 通常配合 extern "C" {} 使用

		C++内部察看当前函数名, 根据C++标准如下:
		__FUNCTION__: 打印当前调用函数(但不会打印系统API函数,是用户自定义的函数)
									一般用来debug 定位的.

		但是有的IDE也支持其它格式, 比如VisualStudio, 如下:
		__FUNCDNAME__ 函数修饰名
		__FUNCSIG__ 函数签名





9.宏与inline 内联函数的区别, 普通函数的区别, 宏的优缺点等, 请看截图和网文!!
	这里不再详述

 */















