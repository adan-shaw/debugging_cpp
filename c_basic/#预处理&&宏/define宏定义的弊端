使用宏定义, 的确性能很强, 但弊端也很明显:
	宏只提供简单的字符串替换, 一旦变量更换, 
	或者稍微换一下变量的传入方式, 就会出现报错, 这种情况, 是极难忍受的;
	比如: 
		-> / . 类元素引用方式的不同, 会导致宏崩溃;(最经典的宏缺点)



	在这种苛刻的条件下, cpp才会出现inline 内敛函数, 主要用来取代#define 宏;
	从而方便团队合作, 也方便提高代码复用率;



	禁止使用宏的场景:
		* 传入的参数, 是一个结构体/类时, 禁止使用宏;


	(后续有新的禁用场景, 可以继续添加)
	ps:
		快速函数调用组合宏, 不受影响;
		普通的变量值替换, 不受影响;
		普通的运算式替换, 不受影响;
		...
