#
# 1.什么是eBPF内核脚本机, 他与lua,python,rust 有什么区别??
#
eBPF 实际上, 是一个不同于lua, python, rust 的新型jit脚本机.
前身是: 
	Berkeley数据包过滤器(BPF), 又是BSD的产物, 被移植到linux 上面, 就变成了eBPF, 只能需要使用llvm 进行编译;


rust和go 两者是完全不同的概念:
	eBPF 与rust 不同, eBPF是目前已经流行于linux 内核的一个内核脚本机.
	而rust和go 差不多, 是二进制编译脚本, 新版linux 内核可能会使用rust 代码来进行编写;





#
# 2.eBPF 的功能
#
* 系统性能监控/分析工具: 
	能够实现性能监控工具、分析工具等常用的系统分析工具, 
	比如sysstate 工具集, 里面提供了vmstate, pidstat 等多种工具, 
	一些常用的 top、netstat(netstat 可被 SS 替换掉), uptime、iostat 等,
	这些工具多数都是从/proc、/sys、/dev 中获取的会对系统产生一定的开销, 不适合频繁的调用; 
	比如在使用top 的时候通过cpu 排序可以看到top cpu 占用也是挺高的, 
	使用eBPF 可以在开销相对小的情况下获取系统信息, 定时将eBPF 采集的数据copy 到用户态, 然后将其发送到分析监控平台; 


* 用户程序活体分析: 
	做用户程序活体分析, 比如openresty 中lua 火焰图绘制, 程序内存使用监控, cdn 服务异常请求分析, 程序运行状态的查看, 
	这些操作都可以在程序无感的情况下做到, 可以有效提供服务质量; 


* 防御攻击: 
	比如DDoS 攻击, DDoS 攻击主要是在第七层、第三层以及第四层; 
	第七层的攻击如http 攻击, 需要应用服务这边处理; 
	第四层攻击, 如tcp syn 可以通过iptable 拒绝异常的ip, 
	当然前提是能发现以及难点是如何区分正常流量和攻击流量, 简单的防攻击会导致一些误伤, 另外tcp syn 也可以通过内核参数保护应用服务, 如: 第3 层攻击, 如icmp; 
	对于攻击一般会通过一些特殊的途径去发现攻击, 而攻击的防御则可以通过XDP 直接在网络包未到网络栈之前就处理掉, 性能非常的优秀; 


* 流控: 
	可以控制网络传输速率, 比如tc; 


* 替换 iptable: 
	在k8s 中iptable 的规则往往会相当庞大, 而iptable 规则越多, 性能也越差, 使用eBP 就可以解决, 关于这方面有很多开源的实践可以参考; 

* 服务调优: 
	在 cdn 服务中难免会出现一些指标突刺的情况, 这种突刺拉高整体的指标, 对于这种突刺时常会因为找不到切入点而无从下手, 
	eBPF 存在这种潜力能帮助分析解决该问题, 当eBPF 发现网络抖动, 会主动采集当时应用的运行状态; 





#
# 3.android 对eBPF 的支持
#
从Android 9 开始(包括android9 以后的版本), 内核版本为4.9 或更高, 且搭载了Android P 版本的Android 设备, 
都必须使用基于eBPF 的网络流量监控记帐模块, 而不是xt_qtaguid; 
新的基础架构(基于eBPF), 更灵活且更易于维护, 并且不需要任何外部内核代码; 





#
# 4.eBPF 在车载行业中, 作为bsp 分析的最新依据
#
由于车载系统, 舱驾一体, 做bsp 分析时, 一般依赖eBPF 做详细分析(性能分析, 稳定性分析), 
甚至会有比较成熟的分析监控平台, eBPF 程序负责发送数据到分析监控平台, 进行详细的数据记录, 分析, 甚至有动态反馈系统(i dont think so); 

目前应该只是对庞大的舱驾一体, 做详细分析(性能分析, 稳定性分析)而已, 应该还没有动态反馈系统, 这个就更困难了;

但一般情况下, 这种分析是后期维护所需的, 软件项目初期, 还是直接阅读设计框架, 分析代码, 逻辑, 可靠些, 变动性太大;

后期软件稳定了, 项目也很庞大, 做一个专业分析平台, 貌似很有用, 但实际上, 如果不理解整个软件框架设计, 盲目分析, 大概率也是会得到一个报告而已;

不过这种报告, 递交给项目技术主管查阅的话, 如果技术主管眼尖, 或者会看出问题(会结合目前项目遇到的bug 联合思考);



Unbelievable!!




