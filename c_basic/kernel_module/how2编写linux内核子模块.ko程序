#
# 1.为什么Linux 会以内核模块的方式, 新增功能? 而不是整个linux 内核更新, 像普通软件升级一样.
#
首先linux 项目过于庞大, 用户数量巨大, 而且经常会出现安全漏洞,
因此linux 项目必须是一个可以持续更新, 方便更新, 可靠更新的project;
所以, linux 必须搞一套可以轻松, 持续更新的系统/方法;

但又因为, Linux属于单内核, 为了弥补单内核扩展性与维护性差的缺点, Linux引入动态可加载内核模块, 
模块可以在系统运行期间加载到内核或从内核卸载;
模块是具有独立功能的程序, 它可以被单独编译, 但不能独立运行;
它在运行时被链接到内核作为内核的一部分在内核空间运行;
模块通常由一组函数和数据结构组成, 用来实现一种文件系统、一个驱动程序或其他内核上层的功能;

这就是为啥, Linux 会以内核模块的方式, 新增功能;





#
# 2.怎么写linux 内核程序???
#

内核模块程序编写真容易, 设置几个内核宏, 引用Linux kernel project 中的资源就可以了(不能用glibc 里面的任何API, 包括c 语言标准库libc.so.6);
而且必须使用纯C 语言, 就是最原始的gcc, glibc 都没有, 最原始的gcc 就是linux 内核程序的编译器(没有C++);

因此, 编写内核程序, 有很多小规则需要遵守, 请自己阅读: kernel编程小规则;

linux驱动程序, 可以编译成哪几种exe二进制文件:
	1)内部编译: 将驱动程序源码放在内核源码目录中进行编译
	2)外部编译: 将驱动程序源码放在内核源码目录外进行编译
	3)静态编译: 编译进uImage中
	4)动态编译: (.ko文件,动态加载驱模块)


写个内核模块不一定就是设备驱动, 内核模块只是内核装载的一个模块功能, 一般有:
	* 设备驱动型内核模块, 如: usb驱动, 摄像头驱动, 显卡驱动, flash 存储芯片驱动...
	* 上层软件支撑型内核模块, 如: iptables, 文件系统的格式ext4,ext3...


拓展话题:
	现在的路由器, 就只有32/64m 内存, 已经接近linux 裸奔内核的极限了, 
	路由器厂商除了要对Linux kernel 剪裁, 剪到尽量小, 还要写内核程序, 以满足网络包过滤, 组网协议支撑等服务;
	最终, 实现路由器硬件级功能;
	路由器软件级别的功能, html 网页登录认证等, 都是使用lua 实现的, openwrt;
	最近内核也引入了lua 机, 叫: eBPF内核VM脚本机

Linux kernel project 里面的东西, 全是高效组件, 节约内存, 性能强悍, 功能简单.





