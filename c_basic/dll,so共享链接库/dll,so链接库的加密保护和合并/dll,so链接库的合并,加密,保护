前言:
	从国产软件Virbox Protector Native, 看PE/ELF/MachO格式的程序的安全性压力(不容乐观);
	看来想做点什么, 还真的得上点心, 加加密, 防止被人搞才行;

	相比于静态链接库, Linux上的动态链接库和可执行程序是同一种格式, 都是ELF格式, 原理上动态库也能和可执行程序一样直接运行;
	这么说, 二进制程序也不一定绝对安全, 仍然有被人逆向工程的可能, 要把整个共享链接库弄得很复杂才行, 这样就可以增加他们的逆向难度;





1.Virbox Protector Native:
	Virbox Protector Native 是一套国产的, 可保护PE/ELF/MachO格式的程序, 防止程序被反编译及逆向分析的工具,
	Virbox Protector Native 也可以加密Native程序使用的配置、资源、脚本文件等;





2.Virbox Protector Native 功能介绍
	为本地程序做代码保护, 可使用代码混淆、代码虚拟化、代码加密等多种方式保护代码逻辑, 防止代码被反编译, 同时可配合授权产品实现软件的许可管理; 

	* 多种保护方式
		代码混淆、代码虚拟化、代码加密等多种方式保护代码逻辑

	* 字符串加密
		加密代码中使用的敏感字符串

	* 内存校验
		校验程序内存完整性, 防止代码被篡改, 防止内存补丁

	* 防反编译
		对程序的代码数据压缩加密, 防止被 IDA Pro 等工具反编译

	* 反调试
		检测调试器, 防止程序被调试分析

	* 资源加密
		加密程序访问的配置、资源等文件, 防止被窃取





3.Virbox Protector Native 应用场景
	Virbox Protector 针对本地程序遇到的安全风险提供全面的保护方式; 

	* 加密方案被破解
		重要数据和文件的加密逻辑, 如果不保护, 很容易被篡改或窃取; 

	* 通讯加密被破解
		通讯加密算法和协议, 防止机器人和外挂的产生; 

	* 核心代码被窃取
		本地程序也可以被 IDA Pro 等工具反编译为 C 语言代码; 

	* 资源、数据文件被窃取
		程序访问的重要数据文件和资源如果不加密, 可以被轻易窃取和修改; 

	* 代码逻辑被篡改
		版权验证代码或重要的程序逻辑如果不保护, 很容易被篡改, 产生破解补丁或外挂; 


