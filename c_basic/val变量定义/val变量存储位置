//变量的存放位置
/*
	1.局部变量:
		局部变量也只有局部作用域.
		它是自动对象(auto), 它在程序运行期间不是一直存在,
		而是只在函数执行期间存在,
		函数的一次调用执行结束后, 变量被撤销, 其所占用的内存也被收回.

	2.全局变量:
		全局变量具有全局作用域.
		全局变量只需在一个源文件中定义, 就可以作用于所有的源文件.
		当然, 其他不包含全局变量定义的源文件,
		需要用extern关键字再次声明这个全局变量.

	3.静态局部变量:
		静态局部变量具有局部作用域, 它只被初始化一次,
		自从第一次被初始化直到程序运行结束都一直存在,
		它和全局变量的区别在于全局变量对所有的函数都是可见的,
		而静态局部变量只对定义自己的函数体始终可见.

	4.静态全局变量:
		静态全局变量也具有全局作用域.
		它与全局变量的区别在于如果程序包含多个文件的话,
		它作用于定义它的文件里, 不能作用到其它文件里,
		即被static关键字修饰过的变量具有文件作用域.
		这样即使两个不同的源文件都定义了相同名字的静态全局变量,它们也是不同的变量.

*/



//1.自动默认存储(在函数外, 当成全局变量/静态变量; 在函数内, 当成局部变量/静态变量)
auto int _auto;


//2.寄存器变量
/*
	register 关键字, 用来定义存储在寄存器中的变量, 而不是RAM 中的变量, 这意味着:
		变量的最大尺寸, 必须等于寄存器的大小(通常是一个int),
		且不能对它应用一元的 '&' 运算符(因为它没有内存位置).

	还应注意的是: 
		定义'register'变量, 并不意味着变量将被存储在寄存器中, 它意味着:
			变量可能会存储在寄存器中, 
			这取决于硬件/系统的限制.
*/
register int _register;


//3.静态变量
static int _static;


//4.外部变量(如果该cpp文件'本身没有定义全局变量', 那么引用全局变量时, 需要做extern前置声明)
extern int _extern;











