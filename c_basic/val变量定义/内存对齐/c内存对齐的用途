c内存对齐的用途, 主要有两个方面:
	* string 内存申请, 申请对齐内存, 可以方便ptmalloc/jemalloc/tcmalloc 等内存回收器重用, 减少内存切片, 提高内存重用效率;

	* 定义struct/class 时, 使用c 内存对齐, 可以使结构体实体占用更少的内存空间;
		(详情自己看结构体定义策略)



c/c++ 内存对齐:
	c 语言内存对齐, 主要用在struct 上面(因为c 语言没有class);
	c++ 的内存对齐,  主要用在struct/class 上面, 创建class 的时候, 同样有内存对齐的问题;

	由于class 成员较为复杂, 有常量/变量/函数, 
	因此, class 的内存对齐, 会稍微复杂一点;
	主要规则有:
		* 类中的函数成员, 不参与内存对齐, 可以忽略不计;
		* 类中的变量, 内存对齐, 一律使用从大到小, 从上到下的原则, 顶部top 放最大的元素;
		* 类中的常量const, 参与内存对齐(常量尽量使用指针, 这样内存最小, 反正const指针指向的内存是共用的);
	详情请看:
		c++内存对齐test.cpp



强行修改内存对齐的粒度大小:
	可以通过#pragma pack(i), 来告诉编译器, 你需要自定义的内存对齐粒度大小; (i = 1,2,4,8,16... 默认值是:8)




