1.在C 中, 有两种简单的'定义常量'的方式:
	* 使用#define 预处理器(实际上只是字符串替换, 属于编译器预处理, 无内存地址, 无数据类型, 统一为string替换)

	* 使用const 关键字(const 常量, 存在.code 段区, 有内存地址, 有数据类型)




2.define 和const 的区别:
	* const 常量是有数据类型的, #define 宏定义常量却没有;
	* const 常量有实体内存地址,  #define 宏定义只是编译器预处理, 字符串替换;
	* const 常量可以有不同的作用域,  #define 宏定义是全局的;

	数据类型的确认, 数据正确性检查:
		const 常量有数据类型, #define 宏常量没有数据类型;
		编译器可以对const进行类型安全检查(赋值双方类型不对会报错or 警告),
		而对后者只进行字符替换, 没有类型安全检查,
		并且在字符替换中可能会产生意料不到的错误(宏定义只有数值or 字符串).

	有些集成化的调试工具可以对const 常量进行调试, 但是不能对宏常量进行调试(待证实)

	总结:
		能多用const 常量, 就用const 常量, 用来替代普通变量, 可以节约很多内存;





3.define, const, 普通变量对节省内存的区别:
	* const 常量比普通变量要节省内存, 一份const 宏, 全程序可见;
	* const 常量和#define 宏定义比, 也可能会节省内存?
		(不一定, 不会节省内存, 硬要比较无实际意义, 节省内存方面,  const 常量/#define 宏定义 并无太大差别)





4.const 常见的用法:
	* 修饰指针
		const int *A;				//A 的值可变, A的类型不可变
		int const *A;				//A 的值不可变, A的类型可变
		const int* const *A;//A不可改变类型, A不可改变值(错误语法)

	* 修饰函数返回值, 防止返回值被改变
		const int func();		//定义const常量返回值函数
		const int a=fun();	//使用const常量返回值函数: 接收的也要是const 常量, int a=fun()是错误的;

	* const 可以用来修饰类成员, 但不能用来修饰类, 不存在const class;



