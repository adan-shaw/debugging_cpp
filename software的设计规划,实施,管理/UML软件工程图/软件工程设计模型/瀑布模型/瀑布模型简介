#
# 1.瀑布模型简介
#
瀑布模型是软件工程中最早的一种模型, 也是最经典的一种模型; 
该模型的基本思想是将软件开发过程分为需求分析、设计、编码、测试和维护五个阶段, 每个阶段的完成后才能开始下一个阶段, 即按照顺序进行软件开发; 

1.线性序贯
	瀑布模型是一种线性序贯的开发模型, 即按照顺序进行软件开发, 每个阶段需要在上一个阶段完成之后才能开始; 
	这种模型的优点是结构清晰、易于管理, 缺点是无法快速响应需求变化, 容易出现开发过程与实际需求不一致的情况; 

2.阶段性交付
	瀑布模型将软件开发过程分为多个阶段, 每个阶段需要交付相应的成果物; 这种模型的优点是结构清晰、易于管理, 缺点是无法快速响应需求变化, 容易出现开发过程与实际需求不一致的情况; 

3.严格控制
	瀑布模型对开发过程进行严格的控制, 使得开发过程更加规范化和标准化; 这种模型的优点是有利于项目管理和控制, 缺点是无法适应需求变化和不确定性的情况; 

4.缺乏灵活性
	瀑布模型的开发过程缺乏灵活性, 无法快速响应需求变化和不确定性, 容易出现开发过程与实际需求不一致的情况; 

5.适用范围有限
	瀑布模型适用于开发过程稳定、需求明确、开发人员经验丰富的项目, 但对于需求变化频繁、开发人员经验不足的项目, 不适用于瀑布模型; 





#
# 2.瀑布模型的优缺点
#
瀑布模型优点: 
	1.为项目提供了按阶段划分的检查点
	2.当前活动完成后, 只需要去关注后续活动; 
	3.它提供了一个模板, 这个模板使得分析、设计、编码、测试和支持的方法可以在该模板下有一个共同的指导; 



瀑布模型缺点: 
	对于绝大多数人来说, 刚接手一个新项目的时候都会不自觉的选择"瀑布模型";
	我们跟客户交谈后指定需求分析, 之后进行简单的设计, 之后编写代码, 提交, 完成; 
	新手会不自觉的选择这种方案, 因为它直白, 想到哪一步做到哪一步, 需要做什么就做什么; 
	但是, 因为瀑布模型延迟实现的观点,即所有步骤完成之后才能看到结果,这在有些时候是要付出惨重的代价的.

	1.由于开发模型是线性的, 用户只能等到整个过程的未期才能见到开发成果, 从而增加了开发的风险; 
	2.各个阶段的划分完全固定, 阶段之间产生大量的文档, 极大地增加了工作量
	3.只有在项目生命周期的后期才能看到结果,早期的错误可能要等到开发后期的测试阶段才能发现, 进而带来严重的后果; 



瀑布模型的应用场景: 
	1.功能和性能明确、完整、无重大变化的软件开发;
	2.分析设计人员对应用领域很熟悉;
	3.项目风险低, 用户很少参与开发工作的项目; 



