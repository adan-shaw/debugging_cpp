software.design软件设计简介:
	软件工程也是一个设计行业, 有一定的工程规范, 下面从小到大介绍一下这些软件工程的规模级别:
				* 芯片硬件加速/FPGA 专用算法加速:
						应用广泛, 但一般来说, 这属于硬件设计, 数模转换, 芯片软件设计行业, 基本上都需要懂FPGA+C语言, 或者还需要写python 脚本做一下自动化校验;
						不属于软件工程(一般软件工程师, 直接会用芯片厂商提供的硬件加速SDK 即可, 要谈这里面的细节, 那是另外一片天和地了)

		* 汇编级代码优化:
				普通软件工程, 根本没必要用到这个层面, 部分芯片工程需要做编译器, c/c++ 运行时库, MCU SDK, 可能会用, 提高芯片的配套软件的效率;

		* 面向过程:
				单个函数or 小型程序的软件工程, 注重过程细节, 效率, 可靠性, 稳定性;

		* 面向对象:
				单个程序的软件工程, 中大型单体软件工程, 注重功能迭代, 代码重用, 工程效率, 时间成本;

		* 面向服务:
				多个程序的软件工程, 中大型软件工程, 优势是屏蔽单个应用的限制, 以多个应用来提供一个应用服务群, 最终实现业务功能;
				一般情况下, 面向服务设计的软件程序群, 基本上都是在单机host 内运行的, 或者同一个局域网内运行的;
				跨局域网的可能性很少, 即便是'互联网软件程序群', 
				如果你称'互联网软件程序群'为面向服务设计的软件程序群时, 你应该首先考虑各个应用之间的延时, 是否会影响业务, 
				如果不影响, 你也可以称互联网'互联网软件程序群'为面向服务设计;

		* 老式-中小规模群集(自主建站时代, 代理网关+均衡负载):
				多个程序联合工作, 多个server 联合工作, 但一般不会进行大规模的云服务, 只是普通的互联网应用;
				(这种方式目前已经越来越少了, 服务器一般也是直接物理机托管;
				 不过在一些局域网, 校园网, 单位网, 或者小型游戏公司, 仍然会采取这种务实的方式进行互联网app服务)

		* 新型-超大规模群集(复杂云服务器时代):
				以'代理网关+均衡负载'为技术基础, 实现RPC server, serverless 等超大规模的云service;
				可云service 资源拆分, 可云service 资源租借, 云资源的租借方式如下:
					- 直接以serverless 这种API SDK 方式, 租借云资源(小程序和微信公共SDK 实际上也是云SDK 共享);
					- 直接以docker 这种单个应用的运行环境方式租借云资源;
					- 直接以云主机host 这种单个操作系统的运行环境方式租借云资源;
					- 各种物理机, VPN专线, 物理防火墙, DNS 解析增强, gpu 算力租借, fpga 算力租借, 等等资源租借(规模超大, 价格略贵);
			新型的混合云资源租借的方式很多, 很复杂, 就不一一展开讲述了, 这里只描述软件工程的阶级;



本文并不是说什么软件设计模式, 单例模式, 观察者模式, 工厂模式, 这类型的设计, 本质上是: 介于'面向对象设计, 群集程序设计'之间的范畴, 这里不做细节展开;
这里谈论的是软件设计的规模阶梯, 从小到大进行分类, 有助于帮你了解更多软件设计的工程概念;
