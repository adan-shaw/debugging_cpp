RPC 设计模式简介:
	RPC 设计模式, 实际上是一个业务思维主导架构设计的产物, 
	因此, 你不用纠结这个demo 有什么用, 这里只是演示RPC 的原理, 就是:
		* client 上传RPC-API 函数名+参数data 到server;
		* server 根据RPC-API 函数名+参数data, 选中对应的函数, 并将参数data推入该选中函数, 执行, 把结果返回下发给client;
		* client 从server 获取RPC-API 函数名的执行结果;

	RPC 远程调用函数, 本质上就是一种业务思维主导的架构设计, 
	设计细节也是侧重业务的, 力求简单, 可靠, 复用率高就行, 简单做一个demo, 谁都会做;
	如果你想要可靠的RPC server, 可以选择gRPC;
	ps:
		要实用, 还是现成的软件框架可靠(如果你足够自信, 也可以用boost 等跨平台开发框架, 实现自定义RPC 功能, 但非常不建议这样做)



	注意:
		rpc 同样需要信息安全, https, ssl 那些东西的, 
		当然这些东西, 可以建立在socket 编码上面, 但如果rpc 框架没办法指定openssl API, 没办法指定socket 的实现方式, 那就是: rpc 自己会集成openssl;
		这种情况下, 你只能使用rpc 框架进行编码, 自己实现的技术成本太大!!



	rpc 和libzmq 的管道模式, 实际上是"反义词"?
	rpc:
		client 调用server API;

	libzmq 的管道模式:
		server 命令client 接收消息(然后执行操作), 完成之后, 答复一下server;

	真是一个奇妙组合!!
